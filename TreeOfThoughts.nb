(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    470837,       9398]
NotebookOptionsPosition[    456348,       9169]
NotebookOutlinePosition[    456820,       9186]
CellTagsIndexPosition[    456777,       9183]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Tree of Thoughts: Exploratory Problem Solving With LLMs", "Title",
 CellChangeTimes->{{3.8946219008423567`*^9, 3.894621920942494*^9}, {
  3.898101276117096*^9, 3.8981012791105433`*^9}, {3.898108309760043*^9, 
  3.898108312328539*^9}, {3.898188720626494*^9, 
  3.898188740846018*^9}},ExpressionUUID->"d2a0f2ea-1afa-47bb-af64-\
05cfebfe254e"],

Cell[BoxData[
 GraphicsBox[
  {Thickness[0.0016666666666666668`], 
   {RGBColor[0.6, 0.588235, 0.5529410000000001], Opacity[0.7], 
    JoinForm[{"Miter", 3.25}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{48., 372.34799999999996`}, {167.75, 
     136.19099999999997`}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{48., 372.34799999999996`}, {167.75, 
     254.27000000000004`}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{48., 372.34799999999996`}, {167.75, 
     372.34799999999996`}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{48., 372.34799999999996`}, {167.75, 
     490.422}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{48., 372.34799999999996`}, {167.75, 
     608.5}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{167.75, 254.27000000000004`}, {287.5, 
     18.116999999999962`}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{167.75, 254.27000000000004`}, {287.5, 
     136.19099999999997`}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{167.75, 254.27000000000004`}, {287.5, 
     254.27000000000004`}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{167.75, 254.27000000000004`}, {287.5, 
     372.34799999999996`}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{167.75, 254.27000000000004`}, {287.5, 
     490.422}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{287.5, 254.27000000000004`}, {407.25, 
     77.15600000000006}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{287.5, 254.27000000000004`}, {407.25, 
     195.23000000000002`}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{287.5, 254.27000000000004`}, {407.25, 
     313.309}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{287.5, 254.27000000000004`}, {407.25, 
     431.38700000000006`}}},
     CurveClosed->{0}], 
    JoinedCurveBox[{{{0, 2, 0}}}, {{{407.25, 313.309}, {527., 313.309}}},
     CurveClosed->{0}]}, 
   {FaceForm[{RGBColor[0.960784, 0.988235, 0.976471], Opacity[1.]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGZigAERB4UNRRkTz5Y7zD4CYvHC+XPfLz/mbc7s
0Po6cIfc0XKHAluu64sLvts/WQpUua3coXzffCn9uw/swfLLyx1gJk7PE2o+
MAnBB5tXi8bnRfB3ygFN+FEGNw8s+KQMbt8i122f/14pg7sHLH+sDNW9e8sc
UPwD4x8Ig/Nv/6zL2iMSDuc3Hzi10DUtHG4eyDbbReEOMPvA8veg8k9g5kc4
wNwL46P6B8qvRfBh4QEzDxZeMPtg4QlzDyy8Udx7thzVP0A+ANQOqQg=
     "]]}, 
   {Thickness[0.0016666666666666668`], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
      0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{3.940625, 373.718243}, {7.0203125, 
      373.718243}, {7.0203125, 368.8385555}, {6.2, 368.8385555}, {6.2, 
      373.046368}, {3.940625, 373.046368}, {3.940625, 
      373.718243}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQffYMENhIOdTlTJL/mF3uUFEOApJwflgoEFyVcGD/
KrXiZk65Q3oaEIRJOEiw6exclVfu0AECN8QdNMVtT1UXlDvMmgkC4g4L+rY4
fi5C8EHmCZYh+CD9WpUI/VcOPi9ZVo0wf9P8o0EttQj7QfJp9Qj3Pb30ozW8
odwB5n4Yf89uIPiN4LuAwBxpuH6Q8WlyMnDzO0H2L5CB2w9230MZuPtgfBT3
A/kw/8H0w/wPMx8WPjD7YeEHcx8sfNHDHwAEsbl9
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGINIGYC4rNnQEDZwdsy/s3c6HIHMF9DFZXvo+pQlzNJ
/qNfucOsmUCQiOAbg8BjVYdN848GPQkqd3j/Dgjy1BxivAr++oVB9bOog9Ub
RkLVz1Z3eHrpR6t4TLnDnt1A4K7hIMGms7MrttwhDQS4NOH8inIgMNaC8wVB
gFfbYULtYoNHUeUOJiDzpmuDzZ8YWu4QCgKKOg550Y18DgFQ89J0wO5L8UDw
Qf77a4vgg9wTzgvlH9LC4IP0H7FB8DXFbU9Zu5Q7KIHANC2Hb485p6/whIaP
LcS9XL5Q9z7VBLuvEOaeIE2weSpBUPWtGnA+WN4KwQfr/6oOtu92IFT9VnWw
+V5A/upVQFCm7sD+VWrFTqD5HSBgoQ72/wN/aHj/VgP7dy8wvu7dBYK9amD5
BUD3gbSvqlMD+9fcB+Z+NbD9LV7lDp0g8/5A4vsiMPxcQGCHqsOhDdeSr7pB
47cAIj/RBcEHxxcvlA9MX+h8WPoCAKI6EkQ=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
      0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGDQAWIQDQbbDBwk2HR2vmIrd4Dx63ImyX98XeZw9gwI6GPn
R5VD+FMMUPnLDBy8LePf7A0od0gDgXUIPtj8FwYOC/q2OE4OKXfoAAEtQ7D9
q8Kh8mWGDpvmHw1iAZq3ZzcQHDQE64+NgfJ5jcDqu2Kh6qMQ/PfvgGANgu8C
At+MHDTFbU/NjoGqNzOGuAdmfqmxQ150I9+DiHIHYxBYbexwaMO1ZNMwqPuv
QdUHlTvcuwsEjCZg8738yx06Qe5XMnGYULvYQMkbqt7CBOx+FzeovB9EfZZj
ucOsmUAQaQL2/2drBB9k/l1TBB/kHgd9qPu9TBzYv0qtiNSEymtDzNNSgbqX
18QhF6ieQR7qvyfGYPUzpaD8DcYOTy/9aP0uBjWvBiIfKQx1r4MxJHwEoPw/
RhD/8pU7rF4FBDuMwOY/4IHaX2gEiW9uqP3qCH4oCLw1hPPB6WGdocNCoH8v
w/RnG4LdMx1mvoYh2P5ooP1KIPDGACx/XQiRHkH+5RJD5YPSKwAlUhZr
      "], CompressedData["
1:eJxTTMoPSmViYGBQAGIQnQYCOwwcvC3j3/yVL3eYNRMIPhs4sH+VWrFTptzh
7Bkg0DN0+PaYc3qGVLkDAwhkGTpIsOns5JIsd6goB4Klhg51OZPkN4qXO4DN
u2HosGn+0SAWcah+JiM4v7MDCIoQfLB554wcNMVtT+0GmmcMAqLGYPO15KHm
xRiD3TNTBaq+ASqvg+CD3H/XFMGfULvYQMkKal6lscOVg89L2Oyg/suG6O9y
LHdwAYE4Y4cYr4K/fK5Q/3gag/0j6AHVrwvhT/SC8gWh8r5Q/lsjsH1M/lD+
QYj/UgLKHUDGlU81Att/LLDc4f07IEgwcnh66UdreRDUPcoIPtj+t4ao/M2G
YP9XBkLVlxqC/VsLtG/PbiAwNwTb3wR0z+pVQPDDABye0V7Q8APGLzi+3BB8
WHwDAIcixzY=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4lkzgUDSysHbMv7NXd5yBwYQSLHE4NflTJL/
KA3lByH4LiAgZOkQ41Xwl0+83EEQBM5aOEiw6ezUEi53SAOBJguHTfOPBrkI
lDvs2Q0E5hYO/bWLDZKA5leUA8FDc4h53OUOYPfUI/irVwHBCzM4H2xelZnD
00s/WqfzlTucPQMEJmZg858A7QMZV/7eFKzeUBIqf8bU4dtjzukcigg+yH1Z
2gg+2PzocgdjEFhohsEHhUetLoIPMk9DDerf7WYOE4D+WaQANe+RGdj8VzJQ
Pp+5w8K+LY7GQPeEgkCkOdj94eJQ/xxC8MH+5bKA88Hh7QMJvxYJqPo2C0j8
SEHNP2DhoClue8paFuo+RkuHvOhGPgZFaHi6W0LiQw3Bh/kPFv/ofFj8AwAJ
D96q
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4jQQELF18LaMf7M3oNzBGAQ2W2PwN80/GsQS
DeVr2mLwn1760RpeVO4ANu8ZJr8uZ5L8R6D6s2eAQNkBK98wEFU9Ol9QB8H/
9phzeodGuUNFORC8tnVY0LfFsVi13GHWTCD4ClF/UancgQEM7MDyxgrlDoJg
YOegKW576rcs1H4NOwcJNp2dWjLlDp0dQOBg58D+VWpFpBRUPgGqXgJqfqcd
xD0SUPdssnO4cvB5iZp4uQNIe8cTiPxGMaj9CvZwPti90Qj++3dAMMHeob92
sQGTONS8A/bg8F0C5CuBwAd7sPu8JKDm8TuA5VUkoXxVaPhJQfk2DuDwny4A
s9/BIcar4K8fP9Q+Boi8OR/UP3sh7gnkhfIr7cH+SeOB8k0h8h+5ofyPdnA+
yDvl0xH8PbuBwNvO4fCGa8lbeaD+4bMDpydboH2hIHDRFuyfU/zQ8FpgCwlf
Qah7a6DxJwINr3BbsHuWiUPjzxYS/xzS0PjRgaS373JQ82Qg5r9SgtovAlHv
oY7go6QnpPQPAN3NOHU=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKD1rJgg4Okiw6ezkCi53gPE1xW1PSYdD+YsdHa4c
fF6SFgXlb4eofxUD5Z92dIjxKvibF1/uoAQCTxwd6nImyW9MKHcwBgFGJzjf
BQTkEPyzZ4DAzAmuH8z3coKbD+bHOcHtB/MznODug/Fh7ofx2b9Krfjph9B/
aMO15K3eCPO9LePf2Hoi7AeZf8wN4T6QeV2uCPfD+DD/wfgw/8P0w8IHZj4s
/GD2w8IX5j5c4Q8Kn0JJBL+/drFBkyzCPCsNv9tnFBD2gdQHKiPcA7LvqirC
vU8v/WgVV0f4B8aH+RfGh4UHTD8svGDmw8ITZj8svGHug/Fh7keOr2hRhP7D
QPNFhVDjYy4/wn5QeGjxoqaXj9yo6QnER05vID7M/zD9yPEBMh8WfjD7kdM7
yH3o4Q8AGudk4w==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
      1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
      0}}}, {{{48.7, 371.24636799999996`}, {48.7, 373.283868}, {48.7, 
      373.461993}, {48.7, 373.655743}, {48.7, 373.865118}, {48.7, 
      374.07449299999996`}, {48.7, 374.268243}, {48.7, 374.446368}, {48.6, 
      374.28907633333336`}, {48.49270833333333, 374.1297013333333}, {
      48.378125, 373.968243}, {48.264583333333334`, 373.80678466666666`}, {
      48.1546875, 373.64740966666665`}, {48.0484375, 373.490118}, {46.3125, 
      371.24636799999996`}, {48.7, 371.24636799999996`}}, {{50.459375, 
      370.583868}, {49.4796875, 370.583868}, {49.4796875, 368.846368}, {48.7, 
      368.846368}, {48.7, 370.583868}, {45.4, 370.583868}, {45.4, 
      371.1354305}, {48.6, 375.252618}, {49.459375, 375.252618}, {49.459375, 
      371.24636799999996`}, {50.459375, 371.24636799999996`}, {50.459375, 
      370.583868}}}], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVG1MzVEYvxExt7jovvQitUa1NI1mF5enug23e86dLDFtVmJmFNN2bFxj
ymLzkjHygdJYy8uizAwf8vKhF1/My8yu2QiLobXEjDn/c37uX/y28+G385zn
+T2/85yTXF5VtH60xWKJkGulXKPketgr8ctPuzcfS7qaImiDASuj+Wn8RWay
oJchiThGpb6tP68kCZpjIINR36NvtfOmCTpQJ+FmdO3sg6L7CYKKDfgYbVmz
N2ZPvKDTDRKljJxjM29uikO+SkZRQ3Etq12CvAb2MSp0r/0YdApSehp0/mcO
5GtjSl+2A/W7dHzIDr1vTK7iI/hInsCV/koH4nO4ylcv6+0QEpxT0+GO3HYX
9iu40uuLRz3BlZ6SREEWAwe56rdC+nGxVeIUp0rZ76tkxDfr892p6Pcyp7tt
T9ddn4n9dk6Nst5ghsmNfDVZJj8abJ59LkdQioEmrTd7AeoHwRcj/yrwfJxP
Ay9A/Ac2kneZ3GbgEqPHne+qL3hx/rjer8+Hf7sYpTs83TvzBH3+JFGm77Of
kK8A/i/Cfbtw3/kmN/pLrcb9DvH/uHH+zkbwGhbmKn+VnodhH/rdz5Tf5If+
Mzq/l6Feh+aRHP71YD45+nsLPQHUG8PDXNWbZXKVb7nWF+Tg2+GvrHf7lsQJ
Tl9fjz/5vhB+tev9gWWYp17M0xLMW5+Ob/nj93c9DytykT8qoOM90G8PqHnI
cyNfYkDl3zbX5Oq9ZJnc0OtJhz+xAVVvaSr2I3X8cBL8HNT6WuW8G8+5LqT1
jXMivlP3Y4sFP8/V+3VNxvut5XRPzveTifCvTPvnjUH+hfr93LCiXwf8mYD4
LyzMlX89//BWff8lVsQfwv1F4/1VIT4aeor1vP6Iwf16MB+T4P8MzLcNemz6
v7NOQX75Hyq9UzHv/X46Iv0vt6Pec7/636Y7cb5b/58DLtT76z/9Deq8LGA=

     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQbQwEm/mDHDbNPxqUIlbuAOZLI/iCIKAe5CDBprPz
FZB/9gwQGAY5PL30o/W7eLlDZwcQ2AQ5fHvMOZ1Dstxhz24gcA1ysNLwu90j
Ve6QBgK+EPNaZModlEAgNMghN7qRr0EOot46OsiB/avUipsKUPvjgxzqcibJ
T1Qud1i9atUqrRSI+R5qUPPSIPaHayL43pbxb/bqIPhXDj4vOWYM4T+LC3KY
ULvYQMkSyveHmH/RBsp3CHLIA7nHAeI/H22o+U7lDrNmzpwpyY/ghwLB1X+B
cD7YvW8Dwf71cYTyb0Pkze2h/JOBEPttyx3evwOC7RD56VD3pC2D8k0g6o1X
QcxbowXlbw0E+19DGar+eCA4PrjkIO6beTMQ7J+PElD7PgaixidS/AIAj9LT
Rg==
      "], CompressedData["
1:eJxdVF1Ik2EUXiJlJY5FspWRzC4qG5IMkyztSKPFnOL3JlQoGbONDWWrpryB
VBpJFlQmha2brIRkgf2JEGVR9Ct1YYRdiN7Yz00oGWZeCH3fe578oANjPJz3
Pec5z3m+1xmIiWCKxWKp1H/Gv9uIuCDHYtejZJ2ks+16hAV1X+gvdYckXUsk
EqtqBL24N1JXEJYU0uNbuaATDZ3Z9yOSPHq83ME4v16SxYh8xj/r+X7CaWLV
z2ZiacQiQUUbKkZd9Vw/NK3Rg+uvRE8EeEKjjfbioaww7o9o9PXjn7auoKQP
7/UYYmwP4Pwz5A9IupNMJnMHGM/uxzx3GRdW8bxpvVy/uYL5t/Ro9HtiaVfY
a+KyrbU/5kswb7+m9Fq2U5LNiDfM17ML/Uc5n9wt6cljPaY0pV9mGfikst4+
P8/z0GFi1W/Tf/ntgqLVrRndZTyv34+8j/WbrRa0ZGZ175zeb2pycjIaEdRx
/NbmFC/uNwrF75AH87YI+vT8e+PrUujXLnj+EuzvIp8/XcTzeq7wvi5twXxX
0S/fxIY+gy4TG/p+Xi8pR4+bl9F/HfQ/D5yNfBtwFvg2C7qh+++XHfPGuL8t
E/4LCKrxHZ7PWwH/VMFPVvD3cP+9GfCzG/zS0T8H55ejn9XESv85bQGPj+nx
Bf5Jh17DvO9UK/BTPm+z8b639fH+c1eiXzfnNQf07+R6cg3wGfjdifMntQX9
lF8k/JYH/8cZ+wpMrPxebGLDbzNe6KXfV/uuhJ6tqLcP85/T1Pe+pxb5Lk35
jYLgc5v5D0fgtwGuF4rCH+/4+xg8Av3HwT8O/0+DTxP0SeN9p0rovdbEik+h
idX7Uc77nG3CfAd5n2Nx6H9UqO/1rd7/mMHvFN6jGOp18H17wz99zPfuL7Gz
HIU=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{86.3, 369.5291805}, {86.3, 368.846368}, {82., 368.846368}, {82.,
      369.5291805}, {83.8, 369.5291805}, {83.8, 374.24636799999996`}, {
     82.4390625, 374.24636799999996`}, {82.4390625, 374.7791805}, {82.7796875,
      374.8333471666666}, {83.0765625, 374.8989721666667}, {83.3296875, 
     374.9760555}, {83.5828125, 375.0531388333333}, {83.809375, 
     375.1453263333333}, {84.009375, 375.252618}, {84.61875, 375.252618}, {
     84.61875, 369.5291805}, {86.3, 369.5291805}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQb1YQ51OZPkP3KXO5SDQCCCbwwEm3XDHA5vuJY8
VQDKFw5z8LaMf3NXstzBBQiO/Ax1kGDT2amlXO5w9gwQvAl1uHLweUmaAYIP
Mm+iI4J/CGje1SCEfvavUit+xqOa/zcDYT/IPLaicgeQcxuA7gPZ11VW7jBr
5syZkvUIvhIQLFqD4N+7e/du7AWEfpD9Pq8Q5oP5LOFw+8F8wXC4+2B8ZPeD
+Mj+A+lH9j/MfFD4wOyHhR/IvTPXIMIXPfwBj+Oz6g==
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQb1YQ51OZPkP2aXO4D5hQh+Z0dHB0dKmMOE2sUG
SkD+rJkzZ0pGhDlsmn80qCWz3GHP7t27rX3CHK4cfF7yLL3c4f07IHAMc3h6
6UdreGq5gzEIWEL41xPLHcpBwCDMQVPc9lR0XLmDCxAc0QxzOLThWvLXSKj5
qhDzl4RAzMtTCHNY0LfFMdgfKi8HMe+7B4IPcu9ERwQfZN5Vo3IHJRBQD3Ng
/yq14qc6wj3elvFv/ipA7HfxhrifTarcQRAIJiaFOUiw6ezsEoOaV4/gg+Vn
I/ihQHB1E0J/GhA8O4IwH+Td79cQ9oPD9wHCfTA+zP0wPsx/q1cBwV2E/8Hy
NxHhA7I/9Aoi/EDeXXQWEb4w98DCH2Se1h5E/IDdvxERf2D1SxHxC47/WYj4
B/lfsBctvSClHwAy3/nJ
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQbQwEm+vCHCTYdHZqWZQ7dHZ0dHCUIPh7dgNBVpgD
+1epFZKW5Q5nzwBBUpjD00s/Wr9blTu8fwcEURD5mzblDgwgEB7mMKF2sUGT
PYJflzNJ/qMTqryTG5p+D1Tzt3uh2j/TB9V9Xb7lDsjuB/Hv3b17N7YTwVcC
gkWTEPpB1jfMQpgPsj9vEcL+NBBYhnAfjA9zP7I8yH8o+m1QzQeFD7L9oPBD
dh8ofNHDHwBmaqoU
      "]}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], 
    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGZigAEhB4UNRRkTj5Y7SOnfVWFr5Ibzj3mbdzom
MDt0OSY8vbCv3KFvep5Q84Ff9p0g/qZyB2mw+rf2YPll5Q4Q8x7YX1S6/bNu
GoIPNq8Vjc+K4B/+qhHT/6UMbt5OudbXgU/K4PaB+TfK4O4B88+Uobm3zAHV
P1D+gzA4v13s5rnvyuFw/kLXbZ//poTDzQPzp0D5N6D8I1D+E5h54Q4w98L4
KP6B8VsRfFh4wMyDhRfMPlh4wtwDC29U95aj+afcAQAXkLr+
     "],
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{125.75, 
     152.69099999999997`}, {209.75, 152.69099999999997`}, {209.75, 
     119.69099999999997`}, {125.75, 119.69099999999997`}}}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], FaceForm[RGBColor[0., 0., 0.]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{140.05, 141.37554949999998`}, {140.05, 140.69273699999997`}, {
     135.75, 140.69273699999997`}, {135.75, 141.37554949999998`}, {137.55, 
     141.37554949999998`}, {137.55, 146.09273699999994`}, {136.1890625, 
     146.09273699999994`}, {136.1890625, 146.62554949999998`}, {136.5296875, 
     146.67971616666665`}, {136.8265625, 146.7453411666666}, {137.0796875, 
     146.82242449999995`}, {137.3328125, 146.8995078333333}, {137.559375, 
     146.99169533333333`}, {137.759375, 147.09898699999997`}, {138.36875, 
     147.09898699999997`}, {138.36875, 141.37554949999998`}, {140.05, 
     141.37554949999998`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIN3xMdFI5M3fx9UqLDnt1A8ADBnzVz5syb5xId
VvnI2TjMgfIPJjrsitX3vbgu0UEJCB5tSXQI+X7iWRZQPA0EgOJn8hziHt1G
8EHmmf9D8EHmHVBIgus3urrsCId1Eor5gr5JcPtB5inFJzmA3HvgAcQ+rYwk
h7Nnzpzp+Y7gCwJBIF8SnP/+3bt3ekB7YPpB1qvpJsHNB/OtkuD2g/jLHJLg
7oPxkd0P4iP7D6Qf2f8w80HhA7MfFn4g9/rwJcHDFz38AbnWs2w=
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIN3xMdFI5M3fw9KMkBzP+A4LsAAcurRAenZ9uv
RgYmOZw9c+YMz5NEhw6tP5JyfkkO9+7evSt7L9HhTJ5D3COvJIdyIPh+I9Hh
3YSkhiOuSQ6zZgLBFSjfLslhz+7du60vJDqUSb7mOGue5KAEBI/OJDqs8pGz
YdCHmN9zCmJ+nArEPPMTiQ5pHLe+75aE2n8cYh4LL4IPcq/5v0Q4H2TegQeJ
DoJAMPF0ooPR1WVHOIA0zD27YvV9Bfcmgu1fdBfifqX1iQ6dHR0dHi8THUK+
n3imtQJiXs93BB8kf4I1Cc5fvWrVqizBJLh+YyAolkqCmw/yb7VyEtx+cIBr
JMHdB+PD3A/jw/wXCgRX1ZLg/gfHDzBcYOEDsl9LKQkefiD/XpRLgocvzD2w
8AeZJyqWBI8fkP5XAknw+AOp/8yVBI9fcPwD/QuLf5D/O/6hpRek9AMA1fP8
bg==
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQPWvmzJmR3xMdQr6feJb1OtHBBQhYPiH49+7evRv7
NtHB6OqyIx5AOg0EXiY6vJuQ1MDyMdGhHASeQuRPfEl0ABrJ0PA40cHp2far
kr8QfIUjUzd/Z0hCkZ/JnoSqnycJxfwWgSRU+0WSUNynJZbkgOx+EP/9u3fv
1v1B8AWBIJAxCa4fZL8DaxLcfJD15pxJcPuNQYA7Ce4+GB/mfmR5kP9Q9EP9
DzMfFD4o9gP9gew+UPiihz8AjnW17A==
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     157.5015625, 146.84586199999995`}, {154.3078125, 139.89117449999998`}, {
     154., 140.03336199999995`}, {157.1890625, 146.98179949999997`}, {
     157.5015625, 146.84586199999995`}}}], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVF9Ik1EUnzrJSMVVQxc0tERCH6SsREo6hA8+rAcjAx8Uvtv99uCDPgjt
wYd82MMCH7JaNSPDKMvPMtJi5GdiNWrJRoqMtJpB1h4WLdYfpqTV3T0nv6QD
9+HHPff8fvfc3z0lrP2ommUymTLEOi5WplhVIkb9HIoD3lHXpAK9Pp/PpnO4
dCCvov2RAi4R/gkOb081tHeMKRAOhULdTzgkzrAut1+BHSLYMw6e8hVb330F
GkV4pzj86u/osY4o4BRR9pLDsVQwFr9L9WY57IkMBIJ3FLCImJnjMNZcecRy
W4G0no4FrB/QsJ71A+kbRH5HHPNnbpHepIHT+Y1L67H1N+r/Noj5TdmqrFct
+Bai0eiVTSo4c16nOoepnkWVerV7yBeyqqjngQKiZaaubaq878JDBYY0TSu3
q/K+kQnKL6bzAbyva6cKmsN+sGuK9kuR7+e0gdP17HMGPhzzR5piCpz2eDz1
xajXlUR+KCS8jPWr8wlnMHk+N5NwNpP5k1/5OgxxA9eJMC9yCLVBCzPT+Sju
V2cy7N8rDidtn3LyTAzGdV3vnKb3XCE9L6jfS/jezgnaF3r+4vT9Wk4wfN99
6n84fb7Hgbhqnq9hqX8W/WC2MPTPPPrLuwX1u9+R/6zIV/YRsb2Qyf4F47Rf
hPfrTpIeG/EvG1jeJ0tdw1J/LuqzFCGObaX+Cr4viUSibbsKBaPua7HN2K9I
Ke6n8hn6qYL8sJFJvzXvxnwn9duxH/2gr2L/YjWU/wPf31OLfvB9Jv8eovqL
Bpb+nDOw7F9Ykf2pq0W+gafk7xrMN+von9Re5Gsdof9cifllQ1RvF/2XG4RL
VPl/66/i/22wob8ne8kPBdi/vovkzw3I5z5P/l5Ff6XOYr7pu4Fl/+Lrsfc9
zYNzVP8NvZcX/198lvIvkJ4w+dVH8+Q5vf9l+u+Pyd99NE/Gcd5V9tP/9tN8
u65Iv+sjXPZ//ibytQ6j/xqHaB5qxD+MfP/O0z9Fomt1
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{181.7484375, 
     143.62242449999997`}, {177.75, 143.62242449999997`}, {177.75, 
     143.99273699999998`}, {181.7484375, 143.99273699999998`}, {181.7484375, 
     143.62242449999997`}}, {{181.7484375, 141.792737}, {177.75, 
     141.792737}, {177.75, 142.16304949999994`}, {181.7484375, 
     142.16304949999994`}, {181.7484375, 141.792737}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVEtoU0EUfbaNFGzUorXGTWPAohGJNkKFYLmEilWqNGKQCA3MqHlDF+0i
YBYudNFFBRe6qBgXgoIu4m8RNGAKFtuFSloJNIukKhoklagJEiG0KeK8uVeG
6oVZHOa+M+eeM/N28rFTF5oNw1gnl1+uJrkiVj0x4XT9dal8n0HMqpcm9OQe
zA48YxCUNTlvQmYUwq4ZBvITY3rRBOfsZDL2joFXVu2rCb/vRm/kFhn0y2r5
ZcItn32vZ4n2V02oXOdXxn8yeJhIJMo2Af5SKpdv4HmpNgGR1kL9ko3D7Xg8
HmoXSs/IRg5T6XS60SHU+byTw1wmkxncjtjl1NjqT+zWeHNy/F7kIEf+rcjf
OIz71+zEf4SDSxZfj3zFQa7mDTZMmHCvOu4McVD+fF+LS0WNrfaOAvrRe5Lj
vFn0c+QYzpN/Q/39HK5OyHplwothz4lsH1d+GlPoT8sh5O9+TPgo6u99TnxD
iOsyn/eXA2O1M6TvLfEPc/j4QdYC8gfOkR+f8Xt3BPUlqxpb+nPLGiv+JqHm
SZ1H/Y4NAvUyzMO3ReD5YdK7A/0unaV5uyiPIPm9C/liUn+1ImsP5Xec5t9H
/X4O7VbtR36vD/niByi/Ho2VP26Nrf6oE78PeARcdHxrnduG/NNu1N9uJz+7
hfIr3Iz92S68j6Flhno7ib/KVF4Dm4S6z0+/MKV/1IZ6y3l8D8YK5p+aZ6in
Qvd9BvnaipRXCvdDC5TvI3wf0YLG6r5+0lj5u6Sxeo8/NFZ+1tbyeVc0Vvn1
if+wyvsm8v99//9i63/wB2vd45U=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4lkzZ868aZTgEPL9xLNV1QkOQCEGhyZM/h3F
owydk+Lh/B3/F91Lq453KAeC7y0JDgppnK5ns+Id0kCgK8FBIPSH8Z6EeIdQ
ILjan+Dwx/m50uowqP7pCQ4lu+NmLQqEqF+2AMF//+7dO72VCP6e3bt3/96U
4JCyyrdzIlD/2TNnzvDsS3Bw6NBOz0+A8M8cgbrPIt7BBQiO7IW6zxhivtp2
iDynfryDMRB83gDVrw1xz4FVCQ4z7jbsOaIe76AEBEmLIfLvVeMdwOEzC8EH
+de8C8EH+W9qbYKDQblUWBzM/BKI/22c4h0EgSAwJ8HhjdE1QalQiH0MGZDw
0C5E8MHumYbgg8JfKy3BATl+0Pmg+AEAvzG4Yw==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxlVF9oUmEUlxGysTYUWqEEU6HVtJHpWIP5cGqOIjJy5GgDvd9nzmCUBtY2
GJXNHhR66D4MphCRDxIO9lKwyEFBRnu4vgQWwfShB3soNPqDjUbru/d867I6
IPLjnPM7v/Pnu+ZgdHSyRaPRjLCf/B+WrU5g3fxKk1oTYBtfKwQylg8CVCuV
yv0vBEJ5T0q/IUBJkqTdPwicb67V8loCq4VCYW6DwLThU2tJRyCTTqfHtwhI
EQgEDUThy2mpEj9lwvhfHRTWb3mjsYNE4ffvpfD7YUwsHyYKv9RN4Zn/iEe0
E3DL1ksVfk8/gRlmTQfyWQeQv+ZScaPO7KSKFT4vhcWhDluU5bOWNfEJCqbi
wuMm43fKdpGCo5wrJvsI6JmJU5ifP4T9pK9SSFo3DQELAQuz7DSFE7WVsmE/
9jM0x/XuQT3hmxTq94LxYjvPv83rtfB6CQqQtF2KfhX+Ynn+bRUVy/PPvlOx
Kdw24nnzT3xJxY/qYqn8WsD5ziP2vcR93Z3H+NRzAfW0/Y+fbmWr4WVB6c/S
zvkfcP5OrldEvjN6Xi+B/lgXhTtSdMk5i/eTM3L+CPK/78b8RkhQ9rmrh803
7ZqN+zG+p4+CzvfT6bogQCqZTJ7qpyDpnjSao5hvcPF+znG9bhXL/RY8Kpb3
px/bmZ/2q/xL+XzeOqnW9zFbuIz+1RDXG+N6r/D6N3g/pwXlviLXKWwOf7Qs
gaDc4wrL/+x4qzcO4jy+Bfl87Og/Nk6V9yP2cn1nOf8BAe/xuIrl/lsHdvrB
xuv18nmZ8T4sR1F/1z6snxnk8+vk/Q5j/gst36eX62HvU953LYD7cLP3a58x
jlWjyF/7TrB+AvWK2+9/Uf0+KP5lFW9/P/4A4nrXJA==
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQbQwC2YkODh3a6flP4x1gfIUjUzdvZ0xwWL1q1Sqt
9ESHNI5b3615ExxmzZw5UzI+0eHdhKQGF9EEB0EQCE90KJN8zeErC5G/6Z3o
sCtW3zdQMQFsXrEtgh8KBKLmCP6e3bt3/zZIdDC6uuyIh0KCQxoQqGlD7DeX
g5gXqZroILC5ZZGaTILDvbt378oqJDo4Pdt+VVISar40xDxBoHs6Ozo6TohB
+YJQ9wglOtypD8w35oGYv4wfYn45G8T+ah6I/3YzQMyP5QLKp3G6+n6Jdzh7
5swZH07M8IHxAf3Lfe4=
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYCYmMg+OyZ5LArVt/3YlKCw9kzZ870OCc5OD3b
fvVmaoLDvbt37861hfLTExzSgEDNAqo+I8GhHAi2GyU5GF1dduREZoJDKBBM
1UlyeDchqcElK8EBaAXDAVUE//27d+/WiSP4s2YCAW+Sg8DmlkXL0iDqG9iT
HEK+n3iWFQ9Rn8eY5DDDmldbPwJif9q/RIcOrT+Scn4IvsKRqZvNHVH5340S
HED+22yfhJVfLouqHplfsjtulpJePMQ9TzD5YPfJQdzLsAOTD7MPph4b39wh
AdW84AQHQSCY+DLRoUzyNcfZJKh7P0P8G5cHCd+rf6HmVSY4rF4FBLyQ8DxS
D1FvrIzgg80zQvDB9jlC+TVQ9wZA+WUQ/cjpAQBqQN/X
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4rNnzpzpmZXksCtW33eiTIJDGgjkYfI7tP5I
yhlC+GpzMfnvJiQ1HIlPcACZd2YLJl/hyNTN340SHIyB4DNDMlZ+uSyqemS+
Q4d2ev6yeIR8Gqer74x4h/fv3r3L25rkcEZgy/vv3fFg8zZvg6pvjHdgAIEd
UPmyeAclENiV5PDG6JqgVF68w6yZM2dK7k1yWPFu4tmrafEOgiBwIMkhZZVv
58R4qPwRqPooiPnGJ6Hmh0Hc43MuyWHG3YY9R4Ig+idegci/D4DafwfBB7v3
MYJ/7+7du7KvkhxazuSvNg6CmMfzIclBIPSH8Z6QeAcXIGD5BnFfaDjEvAO/
ofJREL4DYzLEvDiofezJDncUjzJ0WkD5wPDd8X/RvTTjeIc9u3fvtv6RBJbn
1IeG13uof7Sh/nsO9Y86VP4e1L2qUPlrCD7IP+9OIfjlIHAwySFkpk0FgyY0
vnYmOZTsjpulBLRv9apVq7Q2Qf1jCg3vNdDwtYO4t2E51D2eUPMXQd0TAom/
RfOh8Z8EiZ+Zc6H+KYKG/2xofDZC7Aelb7D6yQg+cnpCTv8AFwNSDQ==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKJ0GAnHJDiHfTzzTUkxwgPHLJF9z+GpC+M8Skh3O
5DnEPdKH8lMh6l+ZQPlZyQ536gPzP1smOHR2dHRwFCY7KByZurncJsHh7Jkz
Z3wqEHxBIJhYj+AbA8HmVoR+ML8LYT6Y34+wH8Q3noRwH4wPcz+Mb3R12REO
SYT+VT5yNg1CCPN3xer7TuRF2A8yfxEHwn1g89gQ7ofxYf6D8WH+h+mHhQ/M
fFj4weyHhS/MfbjC36FDO/19dDyc33Imf7VxTjzcPINyqbC4yni4fSD1+c3x
cPeEzLSpaOiNh7v3juJRhs5J8XD/wPgw/8L4sPCA6YeFF8x8WHjC7IeFN8x9
MD7M/TD+G6NrgrO8EfrB5tshzC/ZHTdrkQnC/hXvJp69qoVwH9g8VYT7YXyY
/2B8mP9h+mHhAzMfFn4w+2HhC3MfevgDAF/PQok=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVF9Ik1EU//JPGGk1ymy+OAdJrUJrgYEkB1v0T8OFqxTcd1v3LvDB70Fo
Dz3kg9SEHvJBaEE++BQb9TJo0QZJFGRswkAfWjpKYUZ/NmjByA3qfvfcuFgH
7sOPe+7v+53fOedr9RmXWLWmaVv46eGnih+/GU8pPM5PpZYu6BAw4yUFGu6b
nBrRwcNjeoHCg5XxhOuODvyJNveBAgQP3SjM6ODkUfxMoXJq3R6J6eDiUfOT
Qkeg+bJ3Qd5XKCy3vtG2rekQCYfDX2oZTCSNSLSE34vVM/DXZUq3agk8DIVC
gxYGA6W3uZEdBBLxeLzcyCA5Cl5fE4FUMpns3YfYblPYzA8fUHhXdGLWf5wg
/x7kL5/E+3sNkv80ATsP31bkW+0lol5PmULQUbHO9BMQ/nzbjHOrCpvpjRkK
ttfT0c6LBOtNU+Q/h/W8n5f5LgKTQR6vKLwYbu9LdxPhp5agkL/vG685gfxt
TyQ+g/o7n0m+fsQl3p/l226jeEXqeyf5hwlkV3gsIr/7uvTjE753+FFftKCw
qX/pl8KCv4qJemIU9Vu3M9R7DfvRtZvh971SbzP6nRuS9bbIfnik3/uRL8D1
F/I8Dsr+nZf1H5H5PQQsZnQgv7ML+UJHZf+OKSz8cShs5o/Z8L27ncFN69e6
1F7kn3OgfkuD9LONCb+81ZifbpHz+ENHvU0M5zWri36d3clwnud1oX+Uz6/Y
lyjug7aB+2A80lFPXs77XeSr5/Py/PdsNmfg/eCivL+K+zGWUVjM60eFhb/r
Cot9/K6w8LO4mc+5obDoXzf7D5v6PYeR/+/+/4vN/8EfkwPT2w==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
      1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
      0}}}, {{{180.45, 127.09273699999994`}, {180.45, 129.13023699999997`}, {
      180.45, 129.308362}, {180.45, 129.50211199999995`}, {180.45, 
      129.71148699999998`}, {180.45, 129.92086199999994`}, {180.45, 
      130.11461199999997`}, {180.45, 130.292737}, {180.35, 
      130.13544533333328`}, {180.24270833333333`, 129.97607033333333`}, {
      180.128125, 129.81461199999995`}, {180.01458333333332`, 
      129.65315366666664`}, {179.9046875, 129.49377866666663`}, {179.7984375, 
      129.33648699999998`}, {178.0625, 127.09273699999994`}, {180.45, 
      127.09273699999994`}}, {{182.209375, 126.43023699999998`}, {181.2296875,
       126.43023699999998`}, {181.2296875, 124.69273699999997`}, {180.45, 
      124.69273699999997`}, {180.45, 126.43023699999998`}, {177.15, 
      126.43023699999998`}, {177.15, 126.98179949999997`}, {180.35, 
      131.09898699999997`}, {181.209375, 131.09898699999997`}, {181.209375, 
      127.09273699999994`}, {182.209375, 127.09273699999994`}, {182.209375, 
      126.43023699999998`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQPWvmzJk3/6c7CIT+MN7jH+8A5rNmwPmdHUDAneGw
4t3Es1cD4x3SgOCZQIbDHcWjDJxh8Q4uICCW4aCQxunqGxXvcO8uEEhlOBiU
S4XFJcQ7GAPBZjmIeTYZ8Q6CQDBRKcPhj/NzJe0CiPq5qhkOKat8OydWQu1X
z3Bw6NBOz2+JdwgFAlEtqPn9EPOMtSH2d85G8Et2x81SWongz7jbsMflKIRf
DDSv5Uz+6s23IPzP8lDzX0LlJaDu+QHx3zJeqPn/4x3OnjlzpgcYPjD+6lWr
VmV9R/DB7n2XDvHvbyj/KUSe8zOUfycdYv+reIdyIPh+Gar/DtS9p6H8ExD1
kmch5t1bAOHPvJQO9v/ZJmh43k4Hx0doHsR9Z56kg/3zPhJq3we0+ESKXwBN
/9t0
      "], CompressedData["
1:eJxVlF9I01EUx3+V4EaOtqQ/kxxpKKnBaCL4Dz2MZZApaQ3xwf1+rPLefHAP
Rj7YwyAfFHrIB0F9CNrDKB+CWDBpK4oWSE7KxKRSEaNFJVtWMCnL7u457FcH
xvhwfvec7zn3nFvk9bVf3Kkoyhnxy/xPjAs7zuFcejrR49TAlbFjHLoNb9MD
JzWYjcfjeaUcJk/b6v3NGlQK+27jcDg2Gupv1aBY2NoB4jYNREjFb0ZOt+P5
uEFnmU/RORoRtslgrM5U4WvD+JUbDIbKt6yeVuTQJwZXrF8MLc143vqeQfKG
1+9q0qA7Y8vEjfT9InG1Bm5h++aRc+yo5/oL5MEjWG9OHOObDqJ+eM7AHBoM
JIw6X454Joq/qbJe7ysm+1W+Q4PhIWHvUO/NXMr/Af09eRqsLAtLMdk/sJCe
n+ifzMd6OnN4ljP5Hpv4//79HP7c6htx78V6S23k34P9+1XCwbEQjBlMGvQL
C4v7cybCC1YjnXdwqW9lF9VbzWFs2R91/Vaxf/Uc1h2vLQVfVby/Rg5m92Zl
/SrWG3BygKEK5nup4v24OFyYbBm2PNJZ9ueOzktFz5ThURUswtqcGC96TcX+
NxD3oX+ulvi8KvW+qeIQN99Ppd2oL2in/Kcwfl8Zh6ntwEqiQZX11xWjP1WF
+pUCym9XZb0xC+krw/x5Rvq+hPJtsyzL/v/QOZVMJns/MxnPWI56EqsM++Og
/i3i975aVd53oZiv28mR2YUmyjdN/g7Uk/OE4nHkwQjGi16l/oRZtn+ZeRkN
YTz3XdQ7fo94Rmf5/brOmXlTdtO+ivPxXvAEDuH8BKdofitoPh4yue+RGvI/
ZXLeRk/Qvswwua/hVpy3gXmMt9aB+x9YYvCgy94y4sH5VT7ifsW8OP9dG6SH
IRdu4b7YLtF+5fIsy/vI11m+H2Le5f4y2v+jXOab89L+i/crs69BD+mrofeo
k+oDPO86S+/PP+/dX20yI20=
      "]}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{125.75, 
     152.69099999999997`}, {208.75, 152.69099999999997`}, {208.75, 
     120.69099999999997`}, {125.75, 120.69099999999997`}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[0.960784, 0.988235, 0.976471], Opacity[1.]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGZigIKIBIedcq2vA98UOAg3Hzi1UBfB3z9fSv8u
S4KDbFSK9f3HBQ7fNGL6D52Nd6gWWef+8EqBQ629adyuifEQ+aMFDmDzCuId
DO6qsDVuRPDB5s1B8Itsua4vjsiD84G8Alu9PLh5YP2seXD7SjImvq15ngt3
D1j+ZC7cvWDzduQ6wPyDwp+RCee/rQFacAjBd0p4ekHpdSbcPKArd8hxZsHt
cwTJq2fB3QM2zyIL7l4YH8U/QD6Kfy2y4OEBMw8WXjD7YOEJcw8svGHuhcUH
zD8wPgB/VqpM
     "]]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], FaceForm[RGBColor[0., 0., 0.]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{140.05, 259.45236550000004`}, {140.05, 258.76955300000003`}, {
     135.75, 258.76955300000003`}, {135.75, 259.45236550000004`}, {137.55, 
     259.45236550000004`}, {137.55, 264.169553}, {136.1890625, 264.169553}, {
     136.1890625, 264.70236550000004`}, {136.5296875, 264.7565321666667}, {
     136.8265625, 264.82215716666667`}, {137.0796875, 264.8992405}, {
     137.3328125, 264.97632383333337`}, {137.559375, 265.0685113333334}, {
     137.759375, 265.17580300000003`}, {138.36875, 265.17580300000003`}, {
     138.36875, 259.45236550000004`}, {140.05, 259.45236550000004`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIN3xMdWO+b1G7TKnDYsxsIHiD4s2bOnHnzXKKD
l3LlwSh9KP9gosOl1Yxeiy0KHJSA4NGWRIf5FefEPjgWOKSBwLpEh2iTrkva
/gg+yLywBAQfZN6sQoT+vvS9rPvrUM0/3I6wH2Te6QkFDiD3HngAsS9gaoHD
2TNnzvR8R/AFgSCQLwnOf//u3Ts9hSS4fpD1arpJcPPBfKskuP0g/jKHJLj7
YHxk94P4yP4D6Uf2P8x8UPjA7IeFH8i9PnxJ8PBFD38AFt+sJQ==
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIN3xMdWO+b1G7rKnAA8z8g+C5AwPIq0UHsg2vf
884Ch7NnzpzheZLoYCmUscGzo8Dh3t27d2XvJTpEm3RdWt1W4FAOBN9vJDrk
uM5+LNNS4DBrJhBcgfDnNBQ47Nm9e7f1hUSHDZ331RVrCxyUgODRmUQHL+XK
g7sqIOb3nIKYn1kMMc/8RKKDBmP4fIk8qP3HIebtSUfwQe4NS0DwQebNCixw
EASCiacTHfrS97Lud0O459JqRq/D9hD7F92FuP+0RYFDZ0dHh8fLRIf5FefE
Akyh7vmO4IPkT7AmwfmrV61alSWYBNdvDATFUklw80H+rVZOgtsPDnCNJLj7
YHyY+2F8mP9CgeCqWhLc/+D4UUmChw/Ifi2lJHj4gfx7US4JHr4w98DCH2Se
qFgSPH5A+l8JJMHjD6T+M1cSPH7B8Q/0Lyz+Qf7v+IeWXpDSDwC9fPZe
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQPWvmzJmR3xMd5lecE/sQVuDgAgQsnxD8e3fv3o19
m+jQl76X9X54gUMaCLxMdMhxnf14T2SBQzkIPIXIz48ucAAaydDwONFB7INr
n3scgs9636R2WyKqPHsqmv50VPNrMlHtj89GdV9AToEDsvtB/Pfv3r1b9wfB
FwSCQMYkuH6Q/Q6sSXDzQdabcybB7TcGAe4kuPtgfJj7keVB/kPRH41qPih8
kO0HhR+y+0Dhix7+AEgUpgo=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     157.7484375, 260.76955300000003`}, {153.75, 260.76955300000003`}, {
     153.75, 261.13517800000005`}, {157.7484375, 261.13517800000005`}, {
     157.7484375, 260.76955300000003`}}}], 
    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
      1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
      0}}}, {{{168.45, 261.169553}, {168.45, 263.20705300000003`}, {168.45, 
      263.38517800000005`}, {168.45, 263.578928}, {168.45, 
      263.78830300000004`}, {168.45, 263.997678}, {168.45, 
      264.19142800000003`}, {168.45, 264.36955300000005`}, {168.35, 
      264.21226133333334`}, {168.24270833333333`, 264.0528863333334}, {
      168.128125, 263.891428}, {168.01458333333332`, 263.7299696666667}, {
      167.9046875, 263.5705946666667}, {167.7984375, 263.41330300000004`}, {
      166.0625, 261.169553}, {168.45, 261.169553}}, {{170.209375, 
      260.50705300000004`}, {169.2296875, 260.50705300000004`}, {169.2296875, 
      258.76955300000003`}, {168.45, 258.76955300000003`}, {168.45, 
      260.50705300000004`}, {165.15, 260.50705300000004`}, {165.15, 
      261.05861550000003`}, {168.35, 265.17580300000003`}, {169.209375, 
      265.17580300000003`}, {169.209375, 261.169553}, {170.209375, 
      261.169553}, {170.209375, 260.50705300000004`}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{181.7484375, 
     261.69924050000003`}, {177.75, 261.69924050000003`}, {177.75, 
     262.06955300000004`}, {181.7484375, 262.06955300000004`}, {181.7484375, 
     261.69924050000003`}}, {{181.7484375, 259.86955300000005`}, {177.75, 
     259.86955300000005`}, {177.75, 260.2398655}, {181.7484375, 
     260.2398655}, {181.7484375, 259.86955300000005`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQPWvmzJk3/6c7WAplbNA0LXAA81kz4PzODiDgznCY
X3FObAOQnwYEzwQyHHJcZz/eY1bg4AICYhkOtWFrvpw1L3C4dxcIpDIcDs76
YBFkWeBgDASb5SDmeVoXOAgCwUSlDIcvZ5VzXG0h6ueqZjj0pe9lnW8PtV89
w4H1vkltmFOBQygQiGpBzOd1hZhnrA2xX8YDwb+0mtGr2RvBjzbputQdBOEX
A80T++Da9zwcwv8sDzF/WjRUXgLqnniI/5bxQs1PLHA4e+bMmR5g+MD4q1et
WpX1HcEHu/ddOti/QglQ/lOI/J9YKP9OOsR+oH3lQPD9MkQ+JgLq3tNQfjBE
veRZiHlFnhD+zEvpYP+/dYSG5+10cHxcsIG478yTdLB/tplD7fuAFp9I8QsA
0PLZlw==
      "], CompressedData["
1:eJxVVGtIVFEQXkMpoUCNtgclpGSabZZa+cIm0SDrh0UaogtlrOdsWV4KzAhD
UmTXVEQ0yAKhoD/1wxBUcqXEoNeapaBUa1ZSUT981BJiQp17v2lvDVwuH3PO
zDffzJyNJeWHHUssFkue+vR/+zVlOyR1VL6wapc1ytZtq6TYoKMd87UaDXm9
3uUxknKjLwws1GmUpOxHpKSQyeSqCpdGUco+rgb+6dZIhbRUhwF31+O+d5mJ
jXwWE3v6lM0LGmifTfnuRvykOUGpEbLT6QLu+iqo0z25+UMd7q+dElSWc32q
WPEr1W0C2FfN58fZX6VRvrJVo8CeSvBpGAZePIt6g72Iv/c0+NMzQVUFd/22
UhOP3AnKHbSj3pIRYej18rhGbpeyt+Ab6uD8n+DXhEbvJpTNCEO/N07mswB/
2CnUUxgsA1jP93CF/N9vleQfii5znES9MZHsd0K/X5skNYn+kAcq33llPap/
1tmcpscOvp8oDX5xJ7jeFElFyfUjV46xfhkS9du5f3twfn8h6r2ZhX4V5HN/
sjlfnol1fWoOmFjX98Y+jcKVHcri/FmsfybjTPhfpTFOA9/XOzF/vbvA73YC
8o8lIf65OElTnogi/3bUnx7F87QN/C3rkH+9DfU+Cmd+8TzPoXx+C+f7LQLY
0N9v4pnp6ekz33h+4sHn83v0+6mN9RvH+bEE9HvDMPo7m8j5nsBv3c36DyBe
RjpwbR/PO7E+PSKgnz4vbV08bwd5f+7x/BwxsTHvxSbW5+1+Ke+rum/0u5z1
7OV4FTwf/cLQe80l9g8KY95CeP8bnoP/VRf0vjiKePGNPB8+7EdNM+v/hfm3
QA/7HPNpZX0WWb823q+lMoCNfqw0sfF+RKKfnlbe/1j081YL66/eL31fG5uZ
Xyq/R41cH+G+7+/788979wcZCyHF
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4lkzZ868aZTgYPdxjq6CXb4DUIjBoQmTf6PL
7PjO7jw4/1il6jaNhjyHciD43pLg8GtNxMvb5XkOaSDQleBQpHIh4XJRnkMo
EFztT3B4Mdv9xqlcqP7pCQ5LwpmnuGVD1C9bgOC/f/fund5KBH/P7t27f29K
cJA5X8W9D6j/7JkzZ3j2JThw7cv8taYIwj9zBOq+uDwHFyA4shfqvhiI+Wrb
IfI/I/McjIHg8waIfp0IiHsOrEpw2JYhsjQ8LM9BCQiSFkPkc0LzHMDhMwvB
B/nXvAvBB/lvam2CQ5Ppw0KVKKj5JRD/T07OcxAEgsCcBIcE4f3+TFD/M2RA
woOrGsEH+6cXwQeF/wKNfAfk+EHng+IHAC7RuP8=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGBwBWIQnQYC7xIcbnSZHd+5LM8Bxl8SzjylbXOew727d+/O
/ZDgIHO+ivvfvjyHs2fOnOH5muBg93GOrsLJPIc9u3fvrv6Z4JAgvN/f6XKe
w6yZM2dG/k9w2JYhsvT6bYh5y9gSweofPIKo/82b6HCsUnXbi5cQ82PFEh1e
zHa/4fUeYv4Z+USw/Wyf8xxcQEAzEWz+oW95DuVA8N0IYt6CHxDzn9kg+O/f
AYE7gg82LzDRocn0YeEToH6glxkaohIduPZl/soBmm8MAsmJEP8B7RcEgolZ
EP0KryH+mVmQ6FCkciHh8pM8ByUgWFSW6KDzoFum/x7EP9bVUPdeh4ZfXSI4
PC3PQfU3Qu07CrWvGcJfsxvBB6n/uQHBB5nntg7B/7Um4uXs1WjqVyD4IPcm
LIOGbxPU/Usg/u9pgrpnEdQ9nJh8UHysmAnxnxI31PyJUPP5IO7V6YaY5yMI
ta8FIl8sCg2POmh8S0H076yEmH9THqL/TQkkPlnUEh2muH1qMi2EqFfThYTv
5Lw8h86Ojg4Pk0SHAKZ1dh+zIfolYfGbBXWvC4IP8u9uXwQfFH+CYaj6Z8Yi
zF+9atUqrVSE/aFAMDUHGr8lUPcWQ+ML6n7JWqh/0iHpK68Ukl5PJUHS4/Yc
SPpsioOEx+ckaHqPgsibR0LSl1041H1+UPNDoenREcEH+Z/DDFXeQRuaP8Kh
4aUITW/REPeLikPzRxw0/Pgg/hFOgeg/wAaNzyyoe4D5E5z/CqH5C5h/Qfkj
pQqan74kQOxvgeYHaP6v60OUD+D4nIngw8oPAHVC6f0=
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQbQwC2YkOXPsyf+lszXNA4R/Jc1i9atUqrfREhwCm
dXYbz+c5zJo5c6ZkfKLDjS6z4zuv5zkIgkB4okOC8H7/Q/ch8je9Ex2WhDNP
OfYYYl6xLYIfCgSi5gj+nt27d/82SHSQOV/Fve9RnkMaEKhpQ+xf8wBiXqRq
osOvNREvZ9/Lc7h39+5dWYVEB50H3TL9t6HmS0PMawO6p7Ojo+OEGJR/Geoe
oUSHY5Wq21acg5i/jB9i/psTEPureSD+MzwMMT+WC2rfnjyHs2fOnPHhxBE+
QD4AKMGQsg==
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYCYmMg+OyZ5LAknHmKm2q+w9kzZ870OCc56Dzo
lvHXyHe4d/fu3bm2UL5WvkMaEKhZQNVr5zuUA8F2oyQHmfNV3HY6+Q6hQDBV
J8nhRpfZ8Z1APtAKhgOqCP77d+/erRNH8GfNBALeJIdfayJeSmtC1DewJznY
fZyj+0ARoj6PMcmhyfRh4RIpiP1p/xIdilQuJEwWQPC59mX+WsOMys/5mucA
8t9m+ySs/Df381DUI/NB/muLzIO45wkmH+y+BxA+ww5MPsw+mHps/DVM+ajm
ieY7CALBxJeJDgnC+/2dgPEBdu9niH8vG0DC9+pfqHk2+Q6rVwEBLyQ8LZ0g
6o2VEXyweUYIPtg+RyjfHsJnCIDyLSH6kdMDAJhT2Zg=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4rNnzpzpmZXksCSceQrb/TyHNBDIw+QXqVxI
mPwZwlebi8m/0WV23FIp3wFk3pktmHyufZm/cr7mORgDwWeGZKz8N0D7kNWj
89dMRfB/rYl4Obsvz+H9u3fv8rYmOQQwrbMr7ICYt3kbRL1Oc54DAwjsgMh/
rM1zUAKBXUkOCcL7/Zsq8xxmzZw5U3JvkoPdxzm6D0rzHARB4ECSg8z5Km67
Iqj8Eaj6fIj5xieh7smFuMfnXJLDtgyRpdezIfonXoG6Pwtq/x0EH+zexwj+
vbt378q+SnLQedAt058NMY/nAyR8L+fkObgAAcs3iPsU8iDmHfgNlc+H8B0Y
oeFXCLWPPRkc/jvjoHxg+B6rVN2mEZPnsGf37t3WPyDx8zMSGl7voeEVAfXf
c4h/wsOg8veg8RcKlb+G4IP88+4Ugl8OAgeTHKa4fWr6GgaNr53Q9BSV57B6
1apVWpug/omFhvcaaPgmQtzbsBzqnnSo+Yug4ZsDib9F86HxXwyJn5nQ9FdZ
DQ3/2RDzE5oh9oPSN0i9dA+Cj5yekNM/AANfY6w=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKJ0GAnHJDnYf5+gueJznAOMnCO/3P/Qawn+WkOyw
LUNkafgnKD8Voj7hO5SflexwrFJ1W8afPIfOjo4OjsJkB659mb/e/MtzOHvm
zBmfCgRfEAgm1iP4xkCwuRWhH8zvQpgP5vcj7AfxjSch3Afjw9wP48ucr+Ku
u43QP8XtU9PXKwjzl4QzT2G7gLAfZL74aYT7wOadQLgfxof5D8aH+R+mHxY+
MPNh4QezHxa+MPfhCn9Q+OQUIPg6D7pl+isQ5jWZPixUqUfYB1Kv04JwD8g+
006Ee290mR3f2Y3wD4wP8y+MDwsPmH5YeMHMh4UnzH5YeMPcB+PD3I8cX04Z
qPGxNRE1Po7FIOwHhceDcNT0khOKmp5AfOT0BuLD/A/TjxwfIPOR4wNkP3J6
B7kPPfwBgJdX1Q==
     "]], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVFtIVFEUnZweoJKJSlgWWhrRgxDT8EPbH2IRgj1QMzEmu9fMx/GRYNOD
agibzI9A/VDrzyImkUjQ4MpoJloyojKYY8OYlYUNYowUpRB15+6FN2nD+Vic
ffZeZ521T0xB+UnZaDAY1qgrW10B6kpQo7NbokD7xeV5i6CW5ubmSEUiS+KH
ytkbgmrU6LZLNGiO65q7JmjE4XDU90vkqksaWjIL2qFGwaBEVbFjprAaQVlq
NA1LNNd6xFVXLahQjV2jEqX6Huw3VaGeU6Ko0StBqRWCQtUYd0nUlmNsrBWC
/HwuTXP95DKuFzELfiXcP8PL+ekl4OvTsT8/69dqHPGH+ReVcn7uOlmr1672
m/Z4PA+DZDoe0JHqq0C9UFnjG13N/RwRMvO5LEiVzHBzi6zd95Sqx1ObzbZn
u6zd99gt5Efj/B2+b81OmRrTFy0/6rEfy/0qG3Tsr9fQouN9M/eiRp8Iumu1
Wo9GM9/5Tu5Pm4EVrn9oI/ArPh8cADzE+X2L0ipMXh2nqbH2k0RdReGPJgdx
3sP77QPQb1IiU1hvpqVfUI+iKFfH8J69qPcGeiv83oV27A/o2H8/Z1w5v2+i
/B/2n18fwjhhSlrBGn8n+8HshH+m2F+Bb5n/7ffwnwt++8y4YYr1e+3Fvhv+
9YGPG35b0rF2H6O8gjX+wcyv9h3jL+HQd1LQt4WFBbFNpuX201/zJliviVje
Lx2Hn/bCDw72W34857uhd0YS+yG+D/WTkf+C+VtT2A8hz+Dfw6j/WMeaP1t1
rOl3n/VJS+F+W2vBJ5nzzddZz58Hud9MNeb5AOe3lqHebszLBeAYWZtf+zme
3xOR7O/EfOi3ifULOwN/buB+S9nw92/2V2kW5xu+61jTz7saN33Ef5CN+m68
Vw7Pn9eJ/FzwGYFf8/C+Q3j/s5j3l/C3Cfr38H/Xdh7z3Y3/rZD9rjyXNP0z
i7lfcQf7b7gMfrKhfyX3+/c//Qt7pWYT
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQPWvmzJk369McilQuJARn5TmA+a0IfmcHEHSnOdh9
nKObkJ3nkAYEzyakOdzoMjtemZvn4AIC09Icfq2JeDk7P8/h3l0gmJXm0GT6
sHBJUZ6DMRBsngcxb3JZnoMgEExclObwYrb7ja4qiPq5S9McZM5XcdvVQ+1f
nubAtS/z15qWPIdQIBBdBTFfugtinvFqiP2WExD8JeHMU9imI/jbMkSWii+F
8IuB5uk86JY5vx7C/zwfYr7Odqj8DKh79kH8t6wXav6hPIezZ86c6alH8Fev
WrUqqxzBB7s3D+JflQNQfipE/uduKD8Gaj/QvnIg+B4Mkd+5Aepebyh/GUS9
pC/EvCeTIPyZQRD/326Ghmc0JD4WVELcdyYF4p+cfKh9BWjxiRS/ACLS6QA=

      "], CompressedData["
1:eJxdVG1IVFEQ3UzCTEHZJEqFjAwk+yFLX0gyUVhUoCmy2SaZ4TWj7mPLPjSp
RaS0lAot0UJKUiyk0ND8Qs3EwNasjLCgsqgwqI1N+pH1o/funLjRwLIc7n1z
zpyZuTE5RlpugM1mSzV/1n9drRmtgpL8V1dMBhq00YoWQakBt5P8cw0a9Xq9
IU2CqpO/l/wINchhxnS9oOC+/JkvYQYtMeN9DbDdIDOlzXOB8YEI/t5bprHi
82jc22PGcUElK9+5P9g5v8Mt6NDSJ9njYYzv5gvKtvenDIby9wv3Cpo4u+ph
V5BBwoos4Fm47wSekZRhRkQ640K/VHoqUhj//ChVvYHbOH/JK6n00xZBMy07
Pru8Gt9wzq4+3SNVvTlp7Ne1B5LKy8xwsV77iGT+XPj5WNKb12YY7F/7OPQU
8fniF1LVk1mqscU3UPnf+WVBU1c2TYw8l6reZfU4fyaVf78aBUWNFc07OSbp
mBn3zP7FT56LOv8I37exvvRh1NspqGPf/MYF9zmf6EX93czv6ef7VW1cb8Mg
96vlFtfnGALfdY0tf+bUaGz5u7ZSUrgZ2wfBXwr/+4CL+fxpN3AB633ZzvPn
Psj6mu6AP4/zH74paLgwtmNqD9ef2IB5ymL9tjrw7+R6hy5Cn5P5Q8pxPwN8
pzRW/hdo/M3n88n9mB8n6/mUDX9c8M8Jfbu539Ep6H8u+DbzebyE/+uR7yjj
0kTMuwf+rNb+WfNyyYF5q2W9tQnof7PGat47Nbbm7cgo+zXtQL/fws81yPcV
87GO/U74jfMNPG/BQby/FVuhP5z39UQ653Mu4v1v2AV/Y3j/bXnQH2soP7Lc
0BPHOLoY/i3n+3RGY9WPKo3V+1EPv+Kw/83MlxyL/W/lfY2Mgb4uvEeRfD9z
AP78fX/+ee/+AFkfL7g=
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQPWvmzJk3/6c7FKlcSAjOynMA81kz4PzODiDgznCw
+zhHNyE7zyENCJ4JZDjc6DI7Xpmb5+ACAmIZDr/WRLycnZ/ncO8uEEhlODSZ
PixcUpTnYAwEm+Ug5k0uy3MQBIKJShkOL2a73+iqgqifq5rhIHO+ituuHmq/
eoYD177MX2ta8hxCgUBUC2K+dBfEPGNtiP2WExD8JeHMU9imI/jbMkSWii+F
8IuB5uk86JY5vx7C/ywPMV9nO1ReAuqefRD/LeOFmn8oz+HsmTNneoDhA+Ov
XrVqVdZ3BB/s3nfpYP+qHIDyn0Lkf+6G8u+kQ+wH2lcOBN8vQ+R3boC69zSU
vwyiXvIsxLwnkyD8mZfSwf6/3QwNz9vp4PhYUAlx35kn6WD/5ORD7fuAFp9I
8QsAfxrnsA==
      "], CompressedData["
1:eJxVVGtIVFEQvtliq7mgbCb5WFJaSTLCFiMrtkHEfmaFbCaSCXpPUOdiT7Yi
FpHoYfRDI6x+lFRESFCSj7aXGRa6tuVG2sPaHpZGrWwW1CbUuWemvTVwuXzM
OTPffDNzMqu0tdUxiqKUiE//n2wWlsfAGT69MGjSoEi3XAYlMZed4TgNBnw+
X0I2g6bir3XfLRo4hE3aGMTf2hz5nKhBlrC3KYStGoiQiicR8ZZkvO8zG1jm
Uwx8wyvshwp1+W9q31sxviOswrZ5jyoDiYjbxlWotN5efdeC9+e8U2H48JL7
XWYNanQbITyNzg8RjnAoFZYcQOwOc8mnwY/45yiX9Zp8GL/uOZf8oU+FSOv6
8XKfgc+5pjcd8HJZb9WgKvU608Ph0EFhL5CvtY9j/lH0Bx9yeDUibEKV+l0L
EJ8I+uc+5bKeMhOLYj3fHQv73z+bwdipVcN9T7isN9tG/kEu9ftlZ5Du3zNz
v5/DbmEdon+5wSPpx/rp/mIm+a3rpXqXMmhns86ndGO8mhUM67+O+T0r8Xzj
Vay3pRD71XoJ63MUUb6zBtb1iT1hYF3fgqMckoStKaT89aS/k/A+9D9eRngH
8n2Wj/NXuxX5XVhE+VWMvz2HQa/b3j62CetfnkXzVIH8lVTKvwHrvZdE/FyY
PyGOzpdSvt9qFEv9vxl4IhQK8U80Py7k8yGI/W4sJ/2G8HzrRux3hp/6X035
HqA/l5P+3RRvF+J6L827h/TpUKP66fNyvI3mrRn5Nl+h+bloYDnvnQbW523n
AOo1Ke7Lfr8mPTsp3heaj5uq1Dtvivw9qpy3eDPub0M/8U/Cfd0bwHiuVNz/
lpe4H7GZuP/KR+Jv16QeFWHik4M4Y4r0W4DnYQaLYtkPq4Hl+2HDfrpzaP/n
Yz+L7bT/4v3S9zUtk/gV0HuUhufLAO93/X1//nnv/gCLxDAw
      "]}], 
    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGZigAKPBIedcq2vA58UOOwtmSzBoobg699VYWtk
TXBQ2FCUMfFugUPcLk8eptvxDoog/sUCh1gQf3U8RP5ogQPYvAnxDlEp1vf9
tyL4YPOWIPhFtlzXF3vkwfnbTpTtm6+WBzdPzZBjjQxbHtw+MP9dLtw9YP61
XLh7weadyHWA+QeFvyITznfpznn++ySCf0np9s+6V5lw8y6C+ExZcPvA8lJZ
cPeAzdPIgrsXxkfxD5CP4l8gHxYeMPNg4QWzDxaeMPfAwhvmXlh8wPwD4wMA
ChOoIg==
     "],
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{245.5, 
     34.61699999999996}, {329.5, 34.61699999999996}, {329.5, 
     1.6169999999999618`}, {245.5, 1.6169999999999618`}}}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], FaceForm[RGBColor[0., 0., 0.]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQPWvmzJk3r+c7MLQ6znTTNncA8+8i+J0dQPA43yHh
9fL/a4zNHdKA4NmLfAeFHSVnKl3MHVxA4F2+g8PJ1rtdoeYO9+4Cwad8hwbe
U4rnc80djIFg8zeoeb3mDoJAMPFXvsMBh78hTGsh6uf+Beq/Ne3d7EtQ+/8D
5QP50oT/mTusXrVqFRdjAcR8TQuw/EwgH2x/FIK/QO620YMJSPLLk3dnMFqC
7S8GmvcgSb5cJRzC//wdav4kqPwHqHvOWoL9t+wp1H+vLB3Onjlzpuc6gg9y
T9Z5BB/s3mNQ/96E8vdC5XdA+Vug9k+3dCgHgu+rofJxEPuNF0P5fBD1kkuh
5uVD/bMKGr7foeG5GRofS83B7juzB+qfEGj4nUCLT6T4BQDiVee+
      "], CompressedData["
1:eJxdVG1IU2EUviyrlZsUUbAfmsYIA6lIdq/33glvtUb0pxQjIiJZNexH3QtF
Fv7IHxquBg1KYQkh9jHYJH+osFqWhhCLRZ/0bW5RViiTkvYjM3vvOcfd6MAY
D+e9z3nOc877lvm02sMWQRB28Z/x/yjFo0Bn9RORuZ45la0xwqKz9PGNba5y
NzPytj8aEzpqo3u2u1klj+mcxoZqivwr6t1w/uMU4VNuximF5q+EW/D7VNrE
l8M8Xpv4ToLHE4012x+WPW5E/sokr9e6Oew9gLhvmOd/x5fd9eL3joTGSuMn
UqdL3MxvxADhcRXP9xK+qbLdPFbGCB9SQU8wQtiqMg+PgmvE36OAftatMZZs
HT2nmrir5N2mdL8M/fqiGvr1U2aBNh59pHedgvUHKb9TYR9GeTwg/04qqOcZ
5QMK9LP3vYmNekOf/8tnuV9sts5yRoF+1+Yof0QB/2Zmud63HdnOOsT7jPn5
Vjc6XQr0W7FQR32FCui3WHVWGjmYaMjI6PdSnfqXsX4hnT8qs+U8auw6zmu9
jP4X6VjvU1Uegz8hE4O/W6rAn3I78c1IoN87z5+QIN+whHCTBHonF9H+eSTQ
93wB1V8lAf8tgdfbMLn1+xcR+lV/0T6NiKBf+EHzjYow35FvNL+QiPucmd8/
EfjevDIx9J8y8VQ2mz12n/guiaB/PE7zHkDs76XzL0WYd3GE5rMY+7F1UX6H
hPsWJr4g4paLxDeG54MXtLx/xr60nye+6+hvOEDYIecxnL9iYtg3D+7jNP8e
5v0U9+dGiL7fpuJ+tWvo920V8520bw68v8GrpN+H97UpRnwxvP/d/eRvGu+/
cI/0WKrBj/1J0uNEXPyC+nVV4/0aMzHMY8LE8H7kiM+J2CbQvnF+uG/8/YL7
mnED/6CV9iWO+itstI9n6T365737C+TxKg4=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     268.2515625, 28.769046000000003`}, {265.0578125, 21.814358499999912`}, {
     264.75, 21.956546000000003`}, {267.9390625, 28.904983499999958`}, {
     268.2515625, 28.769046000000003`}}}], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVFtIVFEUnQyKoocSRRCkhvhRQaV479xbwjFTSa10cnJ0UGZsHAbF5Obg
aD6yfDROfhSBdfVHotAmC5RAY6JEJDCm+ugjUkaEwJ9kKkIIeh7PXnaVDpyP
xdln7bXX2fskVtRaKtebTKZ1fJ/jO4bvPl3XP+RobKJwm3vHF5m9DofDPSc1
1rb1VeLb9zJ7FgqF7HkaGzi0mPn1hczcfGWf0ljCuDfcOCSzOL6OnNGYqTND
z74ps4fBYDC3kPOxX0UxLTJL5evWWY05Pg3+Ga4mvlmrxthMb7S/VGbdfr/f
Y+P8e2dT5vNltqxHsYP/OPFtLoc+M+VPdiI+BXpdBl6O3+9ZiwPV0H+U4ocv
gO+0zD5Ho9E3msbm6w770xzg80JvI+VbqIeePplxy0ysEfWGZGbla2cT6v1I
8e5m3I8zi3pDLTy+1xIsZmY6b0U+r4EF36NV5xXxvqR4hZ3gK6kZehsUkX/A
BzyuCP49dcDfFXF/Qw3wblXEOyrX4gSngffxdbWM1zd4PuTZror7XaU4/62Q
f8W8H36Oxz5fVNhcJBJJL0J976CnAH6PKuK9U/Nw/sPAor6N6eJ9n3b9j8X9
gmMC6zYDL/PPW+G/V6X+scHvbtI/aQefrlK/lQPfV4V/LifwCNX30gU8plJ+
j4FFPTUGFvovQs8w4bp6+HNHZT6+xi7xfp7ujATaVeFXVSvOXSr10xX4oaii
3x53IB5+J19DP8yQX9/8iNfp/acC6IcShfr3Ovi3GFj4M2r+h4Vem1n4czeA
fJvovMeP+Cmax6Yu5LtM8zzSjvgsmoeDbci3C/PTjPldkMT8DjWgvycl6i8v
/HsgCf7+WuS7IdE8VYGvg+JNbgML/5xrcW4Z7gcofqAE/LclMX9LVsTfgx4L
+vWJRO+78j9NSzTv+YifIz3Jufjvloh/Igf5YmXR72VZ8P8AzXtaJvovB/9h
xsp70/+1+j/9CysDQRk=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{292.4984375, 
     25.545608499999958`}, {288.5, 25.545608499999958`}, {288.5, 
     25.915920999999912`}, {292.4984375, 25.915920999999912`}, {292.4984375, 
     25.545608499999958`}}, {{292.4984375, 23.71592099999998}, {288.5, 
     23.71592099999998}, {288.5, 24.086233499999935`}, {292.4984375, 
     24.086233499999935`}, {292.4984375, 23.71592099999998}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{304.8, 23.298733499999912`}, {304.8, 22.615920999999958`}, {
     300.5, 22.615920999999958`}, {300.5, 23.298733499999912`}, {302.3, 
     23.298733499999912`}, {302.3, 28.015920999999935`}, {300.9390625, 
     28.015920999999935`}, {300.9390625, 28.548733499999912`}, {301.2796875, 
     28.602900166666586`}, {301.5765625, 28.668525166666655`}, {301.8296875, 
     28.745608500000003`}, {302.0828125, 28.822691833333238`}, {302.309375, 
     28.91487933333326}, {302.509375, 29.022170999999958`}, {303.11875, 
     29.022170999999958`}, {303.11875, 23.298733499999912`}, {304.8, 
     23.298733499999912`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYCYmMQsC52OBDIlyYcY+4A4z9Iki9XmQvhF9sU
OzTwnlI8fxHC/2wHVf8LKu9Y7MAwLWhVuJKFgwsQtLgUOyjsKDlTaWbhkAYE
ah4IfmdHR8cJbwR/1syZM2/6IfSD+JGBCPPB8sEI+0F8yVCE+2B8mPth/IY/
OwT2SSH0g81/ZgY3f4HcbaMH+8zg9ie8Xv5/zXQzuPvA5rWYwd0P48P8B+PD
/A/TDwsfmPmw8IPZDwtfmPvQwx8A2zec3Q==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVE1sTFEUfh1RjSBGF0jjp1JWEkp4f3eS4ycW0g1qJaEZNF0puZJqbBo0
RhGkMsmjE5Mpnc7rqCg6I0/a0pLoPLEuRiZshJrGQsRPw33nnboZTnIXX+65
3/nOd8571eHm3YdnKYpSJs5WcQLibPTiNIeGT8nf6SoVHjkiznOAV9Hi9agK
fbZt7+zksDJ50GmarYF4ohQsDiO7FjRWNmlwzbKs1rjAMF0fyGmwSkSgh0Pb
/PHql6t1/94W77PH3dYTOuwV8bWfQyG8oqUmp2O9fQMC8/WRTUsMeOG6bvo+
6TlgwNt8Pj89SPWTBjSKWJMl/FlizK81/2J43p7vuGT6/IPE/8a/fzZA+YsZ
BEXU3iG+PQz7tVMclPYt1o5jDNCfRCnmMYm9/Lkzfuxn2O/3q8SvMuxn8jLl
Bxls9+Iih/jy1xsK70z0U+kgf9Im8neeIlzDUH/VWeJr9vFPMZ/4usltX/pI
3xXin2AwVSwWj0SJvzyE/fZ00ftlIdQ30S2xp/9jr8Qe/8nb1M+iEOq/cJf4
fjCcR+wB1X/v1698SH6PUr8O8VnM93uI+I4yaBHxbYT8DjHsv+0J5ZcxOBeJ
RCrGiP+piXzuGM3vjMToD5MY86cMfN87KvbvV3bhUMJA/obHpL/e8P0cJr/m
+PkfHNrHjO7rzRD/IR3ndfMe7XNQR/2ZftLr+N+DkqL+whrqqeum9xUa8pXH
Zual4v3aKN3XqTgP3ZIY97VLYtyHGxJ78xpPSIx+3irlW5qS2Ks3L/c/Rv2x
zVDy/f+Lxf/gD1l/6WQ=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4lkzZ868qZXvcOCa///IydoOQCEGhypMvkPB
yxmfcxTg/IZ9G/iPpss7lAPB95p8BwZV8TLtODmHNBBoAvJF2FKl9so6hALB
1XYgn/lrMKeMLER/P1B/Vc7phtMyYPXLZiD479+9e6e3EMHfs3v37t+rgPoz
o3flS8k6nD1z5gzPNiDf3XKG7w4I/8weoPoHlwyfW0o7uADBka1Q9z2XApuv
th4qv1DKwRgIPq+A6s+QArvnwCKg/Jy+t4t0pRyUgCBpNlReQMoBHD6TEHyQ
f82bEHyQ/6aWAvlmGu02y6Hm50D9f1XaQRAIAlOA/E+PnX4wQfzPkAANjyNy
cH7DYpkzaj0KcD44/K21HFDiB50PjB8ATXOsXQ==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGBwBWIQnQYCz/IdHApezvgso+QA59tuSz3wUsnh3t27d+e+
yHdo2KJ713yhssPZM2fO8LzNdzhwzf9/pLOKw57du3dXf8x3YPhZqFjzVMVh
1syZMyO/A/X7HS+7mKcKNm/ZP6j6+6pg8/4yFTg4xN9of+Sv5vD+3bt3euwF
Dg2Nv1ayLFMDq3/GXQCx/6GagxIQLBIogJgvqw6xT7QAYp61uoMxEBRLIfjl
QPBdHsEHm6cC1C89xXmevLoD0MsMDppA+xbLnFF7oQZ270zdAoj/Nqo5dHZ0
dHgYQvUnq4H962MC1M/VbNT7T9VBEAgCzYHyR+3eecyC+GeuJdS9iqpg9xhb
F0DCc4oKWP8ZG6h9HJDwmWkL5ecow/lg9QeUEHyQeVMR/IZJ3LtFs5VQ1Tsg
+GD3ikPiqxbG/6wI9r8bTP0VRYh7GLDwQfHhrQj230RGqPwFBbD5ksxQ96Yo
QOKTBchfO//f5nfyYPmdbEB+d+2diSbyYP8HcwL5Dy4ZPp8pBzb/DTA+Gdwt
Z/gyyIHjk4kfyI/wWhnXKQtWP1kIyBdhS5UylXVwAQIVMaD+8wcVrj2QgaQ3
Kah92yB8HzkEH+Tfu0oIPij+ONRR9Z/RQpgfCgRT9RD2r161apWXEVT+ryzE
vaZQ906AuL/HCuqfSBlw+tpuBpRn/hrMuUcanB6jQfo/PXb6YSQNDo9KXah7
9kmB5WdrAOUzo3fle0lB3KcMNV9ACpweD8gg+CD/s4ijyi8QhNrnIwUJLx6g
+VU5pxsOS4Hd38UOtd9KGhJ+zFD/PJWGmA/Mf2D3H4S43xyYPxv2beA/Oh8S
3i6g/Gum0W6zXg6SX97kQ+z/IA9JD7D8P1MBXj6A00OAogN6+QEAbzzZJw==

      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmEBgWODQsljmjxqLsgML/ouwQCgRT9QscDjxP
EMheo+Jw9syZMz3aBQ4OBS9nfNZRdejsAAL1AgeGn4WKNWtVwfJvFIHytttS
D7xVBZu3UwrBX71q1aoucQT/3t27d2tFgPZt0b1rflfVwRgIJgtC7d8DMW8N
H5A/iXu36GxVh/fv3r3j4wG656jdO48sqPmcUPM0VR1cgCCFHcp/CXFvDiuQ
H3+j/dFsFbD5l5mh5juogO23ZYL674ky2Hw9Rqh91coOaUCwjAFH+AD5AH7z
j9I=
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4lkzZ878uaDAwcF2W+oBVi2HNCA4NrfA4cBR
u3ceZloO79+9e3duFpQfpuVgDATCM6DqU7Uc9uzevTt6aoFDwxbdu+alWg6r
V61a5TUJKF/wcsbnGi0HoBUMD/oQ/HIguN6O4J89AwRNQP2TuHeLOkPUH6gH
2nfN/3/keU2w+u01BQ4M0lOc50Vrgu03rgbyuZqNendpwPkNi2XOqL1RR+Vz
qDuA/HdzNg7+BlVU9cj8qpzTDZOlwO5xyMPkg923XxXMZ4jA5MPsg+vHxr+j
jmoev6ZDZ0dHx4kCoP9+FirWAOMD7N5SqH/3QcL3VRVUf4W2QygQXG2ChucV
bbD6mb0IPsg8j6kIPjh850D5SyB8hiVQvgtEP3J6AACOct09
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4jQgcDtZ4OBguy31wEJVB2MQ2IzJZ+BqNup9
pQbmTz6FyXcoeDnj8xVNB5B5adcw+Q2LZc6ocag7zJo5c2blHxz8Daqo6tH5
PIoI/iTu3aKzFRzKgWA7kH/geYJAtoUC2LzI60D3uVvO8D0h78AAAjeA6s8f
VLimIO8gCAI3gfKfHjv9mCTncPbMmTM9t4Dya+f/2ywn59DZ0dHBcQconxm9
K3+VLFie5x5UfZAs2PyZD6DmS8iC3aP2GKh/Tt/bRXdlwPo9nkHlD8hA7H+F
4IPd+xbBf//u3Tu+j0D93bV3Jl6RAZvH9gUoL8KWKvVXxkEJCJi+Q92nJgs2
78FPqHwshL/gD9S8BRB+w3+g+geXDJ9bSkPsB4Xvvg38R59LOdy7e/eu7A+o
/EIpsH9ufobqz4DwZ76H+kcXwo98DZUXgPAlnyP4IP+UP0Tw9+wGAlD4RXit
jHOUAvvnGSj8q3JONyyWcggFAtGrUP+wSUPC+xIsPiDuPXAeap4HJLzKz0Ld
AwwPUPRdPA2UVxUv074GiZ8zp6D+uQiJvxMnoeafk3eApW9weilWQPCR0hNy
+gcAWmRJxQ==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKG0MAtqFDgeu+f+PfK3qAOMz/CxUrMlVA/OLdQod
HPyOl128BuF/1oOqV1eHyBsC5eNvtD8qV3dwAYIWk0KHhsUyZ9QWqDukAYGa
BYLf2dHRccIawZ81c+bMm3YI/SB+pCPCfLC8M8J+EF/SFeE+GB/mfhi/YYvu
XfNMVbh+Bp2lIesZVOHmO9huSz2wUQVhP8j8JBW4+8DmWavA3Q/jw/wH48P9
D9UPCx+Y+bDwg9kPC1+Y+3CGv7vlDN8CWYT67to7E0vkEOaZabTbuMvD7QOr
fyEPdw/YPhcFuHsdCl7O+JyjAPcPjA/zL4wPCw+Yflh4wcyHhyfUfnh4Q90H
jx+o++H8T4+dfmTJIPRHeK2MmykNN7+hKud0w28puP0Na+f/2xwnBXcf2DwB
Kbj7YXyY/2B8mP9h+mHhAzMfHn5Q++HhDXUfevgDAMcXN2U=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{289.8, 7.298733499999912}, {289.8, 6.6159209999999575`}, {285.5,
      6.6159209999999575`}, {285.5, 7.298733499999912}, {287.3, 
     7.298733499999912}, {287.3, 12.015920999999935`}, {285.9390625, 
     12.015920999999935`}, {285.9390625, 12.548733499999912`}, {286.2796875, 
     12.602900166666586`}, {286.5765625, 12.668525166666655`}, {286.8296875, 
     12.745608500000003`}, {287.0828125, 12.822691833333238`}, {287.309375, 
     12.91487933333326}, {287.509375, 13.022170999999958`}, {288.11875, 
     13.022170999999958`}, {288.11875, 7.298733499999912}, {289.8, 
     7.298733499999912}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYCYmMQ8C5yYHC3nOFbIOsA4zd0196ZWCIH5hf7
AOXNNNpt3OXB/M9+UPUvIPziQCBfZ2nIehcFBxcgaAkpcnAoeDnjc46CQxoQ
qEUg+J0dHR0nohH8WTNnzrwZh9AP4kcmIswHyycj7AfxJVMR7oPxYe6H8z89
dvqRJYPQH+G1Mm6mNNz8hqqc0w2/peD2N6yd/29znBTcfWDzBKTg7ofxYf6D
8WH+h+mHhQ/MfHj4Qe2HhzfUfejhDwD6L5kZ
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGInIGYCYmMQmFzk0LB2/r/NeTIOe3YDwewiB4bM6F35
UXIOq1etWuW1uMjBwe942UUuBQegFoYHK4HqF8ucUbug4DBr5syZlRuA/MZf
K1mmKTooAQHTNqB+6SnO87yVIPK7gPoLXs74/EHJIRQIvu4rcjhw1O6dxzRl
sH3Rh4D85wkC2QYqDmfPnDmz5giQf83/f+R+FYd7d+/e/XsMar+fqkMaEKid
gPJvIfhg9clqcH7DJO7dovLqEPOPQc3foQ6WP3YIql5fw0EQCAz3Q81bpgH2
76qdQPdzNRv1PtJwAIfPJlR+8VoEH6SeCxYeezTA/v25BGp+vgbYP28WQNUr
aTi4gMBcoH2221IPHFUHhyfDLGj4RKiDzZ88Ccr30AC7X3o61Lz7EP5vYPw4
xN9ofxSuCXHfQqj5mzQd3r979y5vGdR8Xi2wf5etgeq31gK77+ZmBB/k/lc7
EHyQ+dV7of5R0QK7v+cg1LyvmuD4mHsUav9xiP3CJ6Hh3a4J8e9pqHnGmpDw
Pgc174GGQzkQfL8ADe8qDbD/Gy5B1TNrOHR2dHRwXIGa360ONu/MFWj8cSD4
4PCpUEPwQervq4L1r7gMDI+fhYo1rqpg8xMuQt2/UgUSnueh4cWnAlb/4jQ0
PeYpQ9x7HGr+CSVwfC05DE3Pykpg92/fB3VvuSIk/nZC/XdEAewen81Q/QIK
YPPYgOmlYd8G/qPr5cDyOsD4aXhwyfC5oSw4PixXIvjg9LoGwQenh/UIPii+
Tm1C8MHhuRXVPMmdCD7IPp7bWPig/F4m5YCS/9H5wPIAABnX7Ac=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvqosdGETYUqXWyjiA+XUIvgsQHGksdmhY
O//f5nMyDsZAUNwC5D+4ZPhcUNZBCQTagepVxcu0w2Qd3r979y6vE8g302i3
2S7rMGvmzJmR3VDzTOUcOjs6Ojx6gXzmr8GcW+TA6s/1AfmZ0bvyveQh9vcD
+e6WM3x/yDusXrVqFddEoH2TuHeLBiuAzZsJ5DsUvJzxeQsS33Zb6gFFRQTf
73jZRSYlMH8n0LwDR+3eeayD8H8C3dOwWOaMmooymG/ZAeQ3/lrJMksZ7L/L
TVDzryg7pAHBsWoEPxQItpYj+CD35hQD3Ss9xXneZgj/TR5UvgAqnwW1X0/Z
Yc/u3bt/p0Ll90DcMzMRypdRAqvvSYKad18BzPdJhYbvPXmw+puZ0PiYJgd2
X1oeNLwCZCH2laDFJ1L8AgDxv+MI
      "], CompressedData["
1:eJxdlG1Ik1EUxx/EJExqYQXtLbc9bs9kfVA/SFBxwSihNzVNVwrTmOaynGxo
mtUyq9maiVlsWhpFH1yvsAhiKdPU3hZRklCwkL5IZFr0ySDtPuee7ZEOjPHj
3HvO/7zcR1NZV2hN4Dgun/7E/7cRat0OEp7cu2heNBCtaF2Upy2yI/kCqaKW
dNlBONOdooedAunx+/1NHgdx3VZG9GGBrKb26wLyT4HQkBxpQ15uhPtVLonF
fLtaJP4SjUbLj9P4iu7cvjkW3++knHw2yzvE+JOd8ny9psUrwP1LRx2E2L/5
fm8WSDa1oA05YmDnq5HLDORuIBC4aEV+qQc944eQZXqoN6ES45vTQX9aBdXX
tSK0tpGPM9nyxBqu0UG9mVbs13cd2UZttAb1FvIs/zH09/NkbpaaA/s3w4Oe
5Cb0p6ZDPaZTEov5plr/84v9PfNnIHGBh3pTPeif4KF/fzuo//HGaM4AT56F
QqGD4vzGts7m2Xh2/yrqW8ezen20nj0vGt6P6CBedk+sfh3kD/fi+c9aqLfg
Bs6rTAv1re/DfK80cYb+aJaw2N+2NNLudrsFep9bk2SV/9gA/d/eG2M1+A/7
Y6wCvTPXaPx3w2mTMhXom7hC/Ts2+XaXKiH+007qH3q0aqxfAfWrvOiXKUA/
1079Ux8ypwfkUO9XcR+ba9+4cuWQ/7wrdl7O8p2QWLxuaZC4kVpOPcYrkIMe
Ry3q/cg4WB3Tp4B5d9D9ct3vXwiqlez9WNAvqEBPaxnGy1QDj5gx3knWn/ES
qX/ivrwuxnnv1IDeSBFytjbO7D3o4gz75mb7OF+M876VDnr3leJ9jx7O3zuA
791pYP0ux33LYu9/vALnPypAvwetGG+/ke2HDec/bIT+uepQT2IG9OOBE/Xk
MV7ZjPtly4DzN09LDPM4JzF8PzwYL4/5Uzox37IM1v9ufK/P2fdk0Id67ex7
Y7qO91MYL/3e/QPyjBuo
      "]}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{245.5, 
     34.61699999999996}, {328.5, 34.61699999999996}, {328.5, 
     2.616999999999962}, {245.5, 2.616999999999962}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{248.5, 
     152.69099999999997`}, {326.5, 152.69099999999997`}, {326.5, 
     119.69099999999997`}, {248.5, 119.69099999999997`}}}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], FaceForm[RGBColor[0., 0., 0.]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvpAscOrT+SN5bnugA5ssh+C5AcESxwCHk
+4lnr1YkOhgDQbFKgcO7CUkNLKsTHZRAQL3AQWBzyyK1tYkO79+9e5enWeAw
w5pXW39DosOsmTNnRmpDzJPbkujQ2dHR4aFb4PBvYfFE0R0Q9ef0ChyMri47
cmIP1H79AgeFI1M3mx9KdFi9atUqLkOI+cuOQ8ybaQix/8hZBH9XrL7vxCsI
/pk8h7hFjyD8nUDznJ5tvxr5FsL/qQ0xf/sXCN9SA+qePxD/XVaCmv8/0SEN
CI5JI/ihQLBVHMEHuTdHGOLf9X+h7ueDyLf8hMpzQe3/muiwZ/fu3b9ZIfIu
76DuZYTyn0DU9zBBzMu/AOH7sEL8n3YQov4mJyQ+tLZD3JfGB/HP9zVQ+0TQ
4hMpfgFCafgp
      "], CompressedData["
1:eJxdVFtIVFEUvb4fOeqkhFNmZkblVJpaamptxOzDB40lIeHQPZBWH90LQhJ9
5IfEFBIZDTVCLyM/rhDEBGJTUTBEhH1ESRRpISSFoYaUiSXde9auG20YhsW+
Z++1117nrBZa46FIRVH2mD/r//mwGcU67Zt7OnG0SlCOFYU6tca/nTu5W1Cr
GbH5Ohl1WRWdtYJ6A4HACbdO2WF/sKNBkNOMr+sYewSZJRXKBZ5rxPnWbBtb
/eoybTw2OjrakqHT5XKHW/OgfiBdJ1/eT5e3AfhNqk7HXZPx9bU43+3Qaeq8
6KyuEVRkRjCR8U7+Po5xqaABwzDOxgBH54PPkyjgrjWYNzIS9R0Z4J8doVNq
sKtvIsHG91ry653zqpx3Swz0yosQVG1GOAF8r8Zx/2TWM0nQ9JQZadCPnOCT
6ELeSMM8G7NsbPX7kPNf3tR38UZ7T9NSzJvm5nwK9Pu1WafCkf5wvEPQ/VAo
dMDcX9XE4Igrgc9vBb+xKJ63VKfhY+TtW1RlvaLtPP8PVfZ/VI7vs2Ywr6cS
+yr5pMr5XDu433sbW/r0vLKxpW/4mUpnfD7f+kru/1iV+tdw/bEh5A+XMb6j
Sr5ftsF/Cwb4vSzi/rdQf6hAp3enPFr7NVXOv3IT+6kX/JUN3P+SKucdz2V+
F9H/9B8/XuB+K2xsHT+4zMYdZpQ42T9+8GlPYn0CwME45ndFlfs+F8X7v4l+
sQrygwOq9Ev0vIZ6d4G7ZjX4/SH4dE9rf/VrMsM/qcFvrzF/4DOw8dHG0u/f
bWz5TVkCv8ya5+W+M+H//hmu54Zfm79pUu9QGecXNOk3/y6+LxHMvwF+exAD
/4zvx/33JLK+Xvi3M4X1F/D/7XT4X2kDTl7O+h3B99dX2VjuY62N5fvhZv3b
kE8qQL8Xgu9/Me5rv5f5lfJ71Mz+r+D3YC/wv+/db6dDLWw=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{271.4984375, 142.72711199999998`}, {269.6703125, 
     142.72711199999998`}, {269.6703125, 140.89273699999995`}, {269.3, 
     140.89273699999995`}, {269.3, 142.72711199999998`}, {267.5, 
     142.72711199999998`}, {267.5, 143.09273699999994`}, {269.3, 
     143.09273699999994`}, {269.3, 144.89273699999995`}, {269.6703125, 
     144.89273699999995`}, {269.6703125, 143.09273699999994`}, {271.4984375, 
     143.09273699999994`}, {271.4984375, 142.72711199999998`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvZhc6dGj9kby3PNEBzJ+H4LsAwZGFhQ4h
3088e7Ui0cEYCIqXFDq8m5DUwLI60UEJBJYXOghsblmktjbR4f27d+/yVhY6
zLDm1dbfkOgwa+bMmZGrIebJbUl06Ozo6PBYW+jwb2HxRNEdEPXn1hU6GF1d
duTEHqj96wsdFI5M3Wx+KNFh9apVq7g2Qsxfdhxi3syNEPuPnEXwd8Xq+068
guCfyXOIW/QIwt8JNM/p2farkW8h/J+rIeZv/wLhW66AuucPxH+XF0HN/5/o
kAYEx2Yj+KFAsHU6gg9yb85kiH/X/4W6vw8i3/ITKt8Ftf9rosOe3bt3/26F
yLu8g7q3Ecp/AlHf0wQxL/8ChO/TCvF/2kGI+pudkPjQ2g5xX1ofxD/f10Dt
m4IWn0jxCwCUEAfX
      "], CompressedData["
1:eJxdVFtIVFEUnSxMSyvzp4ESq5/QQMoPi4I2Yvbhg0aLiHDwHmisPpKLmdmD
xleOYqY1U46VmqnRTJk1lo6jUjFIyPQRJlGkhZAEhdVPJpV07107TrRhGBb7
nL3XXnudu1YU5hwMM5lMu7Wf/v88pEWvSntmn00fSRW0To8HKtki3sye2iXI
pkX4PZU8mXHb7RmCmt1ud6lXpfigy1eSLShGi2+3GFsEaSVN1AE8m4P7tjaJ
9X6Z1ySenJiYyGtSqWlbdGKhBfXdTpUcCb/M1mzg1w0qHTd/isjKwP268yrN
NAh7WrqgZC18tYx38PlqxlsEeT0eT20V8KIk8BmpAK5cj3nDylE/ehX4x5ep
tMJX2T4dKfFAXlJWzJxizLupCnolLBCUpkWwBnxbFnP/etYzStCXGS0uQT+K
AZ8lbuQ9sZhnY4vEer/37f/lNX3nbxQ17l2JeWO9nF8O/X53q7R5vCsYES1o
MBAIHND2lzrdN26O5PsPwW9yIc/br1LoKFnb5xWjXvIAz/9DMfo/DuB83FfM
axnCvlI+KsZ85mHu905iXZ/GlxLr+gZHFapxOBwbhrj/E8XQP53rT/qRP+Rn
fF8x+H5+BP/99IDfmI/7d6K+v0elt2cthUWtijH/mrvsp2bwN93m/lcUY96p
DubnRP9zf/14kftdlVi/nn9Z4hItUhrZPy7wKapjfdzAvmrmd10x9l1fwfu/
iX7hduT7vOBTfprr9QI/LWW/D+P8SInUT/fLaDH77RX4ho7x/j9IbPj9u8S6
30xL4ce5Yt73avgn9wTXS4Q/7pyE3oGtyI+dgd9cO/m9lDH/bPhtqAr1pvbh
/VtqWV8r/Gu/wPwF/N/tZD4FwMuaWb/DON/WKrGxj06Jje+Hl/UqQD6qB/1e
CH7/vXivXVbm18/fo/3s/0HWJxf43+/dH18FTvA=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{295.4984375, 
     143.62242449999997`}, {291.5, 143.62242449999997`}, {291.5, 
     143.99273699999998`}, {295.4984375, 143.99273699999998`}, {295.4984375, 
     143.62242449999997`}}, {{295.4984375, 141.792737}, {291.5, 141.792737}, {
     291.5, 142.16304949999994`}, {295.4984375, 142.16304949999994`}, {
     295.4984375, 141.792737}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{307.8, 141.37554949999998`}, {307.8, 140.69273699999997`}, {
     303.5, 140.69273699999997`}, {303.5, 141.37554949999998`}, {305.3, 
     141.37554949999998`}, {305.3, 146.09273699999994`}, {303.9390625, 
     146.09273699999994`}, {303.9390625, 146.62554949999998`}, {304.2796875, 
     146.67971616666665`}, {304.5765625, 146.7453411666666}, {304.8296875, 
     146.82242449999995`}, {305.0828125, 146.8995078333333}, {305.309375, 
     146.99169533333333`}, {305.509375, 147.09898699999997`}, {306.11875, 
     147.09898699999997`}, {306.11875, 141.37554949999998`}, {307.8, 
     141.37554949999998`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVFFIVEEUfWnFEhlJUCz9bH5EbIGkQYUUl8WoxEItkZRdnNEeGOqGQ9om
qdlmT4zStGiLgqIkXkIfEgvWnxIRz6KP/dhqIyK2sFiJiEW2onlzbwzWhfk4
zH3nnnvunbeBh2uO5huGsUSegDx58pS6cUjA4eyz9Nw9Bk8ey2gQUJIYn9n3
iMED27YrmgQ47RAqmmYgPzHetwjwzVyZ7HrJ4HosFoscF/D7thhJvGFQJCOv
U8C1soLNxZ/o/pSAzDDvi35jUCvjR4+AQDqeSOawXkO/ANPzOtu9jMOs4zgT
UdRzbBWHd6lU6tcA1ufrOJgyNlqkx6exm29v0nj1ZPSOuY0j/wDy53bh/dN+
4t/DoVDG1l7k+1DJVb92RIDl/+m9VcVB+dOxGIs2jd38FeTH9oNc9bvQTPz7
sZ+vjZRfzqHcjaCAqWDxgVe7ufLTqEd/lu5A/tEawntR//o64qtCnJPzedtb
Hf5eR/oY8Qc5zGcymXYT+aubsN/xVvzeb6K+pNDY1T93UmOXv/s09hNvRv0X
zpBehvO4eY7qh7D+mkH0O11P/Q7RPGrJ74u0L1J/l4zsMM2vAvvvu0z5AQ6D
lmV5xpC/tAz5nDGaX4nGyh+/xm6+8OH390cFdHq/eGbXIn/jCOovLCA/L6Ff
oXzM/zyE+3hkgaHe88Q/z9S87p7FfX74kSn98R56L0l8D0aE/HrBlJ5KQfs+
jXzL28ivON5vMYl/At/HzhaN1b62aqz2IayxO6/nHRorP08s5vNGNHbrrbzx
P1bzvor8f9//v9j9H/wBY6Hucg==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4lkzZ8682ZXvEPL9xLNV1QkOQCEGh1uY/DuK
Rxk6J8XD+Tv+L7qXVh3vUA4E3+/kOyikcbqezYp3SAOBR/kOAqE/jPckxDuE
AsHV5/kOf5yfK60Og+p/n+9Qsjtu1qJAiPplPxB8kHnTGQrg/Ht3796tZS1w
SFnl2zkxDKKejbvAwaFDOz0/AWofXwHEfRbxDkpA8IirAOI+43gHYyCYzA6R
59SPdwD5t5IFql8b4p4ExgKHGXcb9hxRh+hP+p0Pln+vClF/8xOCD3Kf+SME
H+S/qVfzHQzKpcLi9CH2fT4D8b+NU7yDIBAEHsl3eGN0TVAqFGIfwwFIeGgX
Ivhg90xD8EHhr5WW4IAcP+h8UPwAAINftmY=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxlVF9IU2EUHyNCqcBBL5Me5jJTV21uooaDTtpMxmZtalmx3duYkyzdB4s0
IhKM2KKHRgi6iGoPElv4UmA1o6BFPty9BKuX5kMP6yHZoJcV2J/v3nPWxTow
xo9zzu/8zp/vNgTC3lGtRqNx8J/8b5NtN4NPDW81sVUBqvhixp8wfhagXCqV
BhoZBFPumO6HACFuN5oYDFVWi6mtIqwVCoWXzQwu6b/W5OpEyEmS9NjEQJoE
f0AvKnyDZowfN2D8Tyuvd80TjuwVFf4DnQx+PYzE8/tEhb/YzeCFz+yOW0Qw
cksC8rvbRVjJZDJXHMjX2oH8EaeKp7hVjqlY4RtiMN+9wxTm+bxlDZxiYMjO
Palw/sQCNx8Da34xG90vQiwajfafpf6asR9XkEG0dUPvN4qg4+YZY9BTXM7r
d2E/986R3p2ox3aeQel2YCa7DfOlC1RPS/UmGEDUNBb+JvzF8vxrCyqW55/8
qGJDqNbhfv9PfE7Fj0rxXP6doOi5Snj4De6rj+JjrwTUY/kfP/udXAstCUp/
8Tbiv4/8ehvpjSPfYjvVm0X/8w4G16Vw2jaN9zN4kPgnkX+9G/PLQUHZp/YQ
n++CfXrGh/F3ehjUDX+32UcEOMKtsY/fT93TcsWL+dud1M9xxK4BFcv9Frwq
lvdXc3JzvnRa5R/mNudX66dTqZQzgP6VIOkdJb0TiG+NUz9OQbmv5RCDjd4v
xjQIyj2e4fnr1g+6+i6cx2UfzceC/rsj+H7iLaRvkPj3CMo9vnapWO5/y9HN
/geHqV4LzctO77MN9d/sxPqJLpqfjfrtxXzRTPv0kB4T7rvox30k+fu1TNWf
WAsjf6SJ6s+i3v7q+59Xvw+Kf0nF1e/HH5VF5YM=
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmECQWODh0aKfnP413gPEVjkzdvJ0xwSEUCKbG
Fzikcdz6bs2b4HD2zJkzPdEFDu8mJDW4iCY4dHYAQXiBQ5nkaw5fWYj8m8AC
h12x+r6Biglg83Z6IfirV61a1eWO4N+7e/durUuBg9HVZUc8FBIcjIFgsiPE
fnM5iHlr7AocBDa3LFKTSXB4/+7dOz6bAgenZ9uvSkpCzbeEmCcIdI8LEKSY
Q/mCEP05pgUOd+oD8415IOZfNoaYX84Gsd/WCOK/3QwQ8/UMgfJpnK6+X+Id
0oBgmQFm+MD4AGRljeM=
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4lkzZ878eaHAYVesvu/FpASHNCA4drbAwenZ
9qs3UxMc3r979+7cKSg/PcHBGAiET0DVZyQ47Nm9e3f00QIHo6vLjpzITHBY
vWrVKq9DBQ7vJiQ1uGQlOACtYHiwD8EvB4Lr2xH8s2eAYFOBg8DmlkXL0iDq
D6wvcAj5fuJZVjxE/fY1BQ4zrHm19SMg9huvLnDo0PojKeeH4CscmbrZ3BGV
/90owQHkv5unsfPLZVHVI/NLdsfNUtKLB7vHYR4mH+w+OYh7GTow+TD7YOqx
8c0dElDNC05w6Ozo6DixoMChTPI1x9kkqHuXQvwblwcJ31eroOZVJjiEAsHV
TZDwPFIPUT9zL4IPMs/jKIIPDt8zUH4N1L1XoPwyiH7k9AAAnyPu9w==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4jQgcPtZ4LArVt93okyCgzEIPMbkd2j9kZQz
hPAn/8Lkv5uQ1HAkPsEBZF4aWyEGX+HI1M3fjRIcZs2cObNSBzu/XBZVPTLf
oUM7PX9ZPEI+jdPVd0a8QzkQbAfyzwhsef+9Ox5sXiQ7VH1jvAMDCHBA5cvi
HQRBgLPQ4Y3RNUGpvHiHs2fOnOnhKnRY8W7i2atp8Q6dHR0dHDyFDimrfDsn
xkPkefig6qMg5s8UgJofBnGPmnChw4y7DXuOBEH0e4hB5N8HQO2XQvDB7pVF
8N+/e/eOT7HQoeVM/mrjIIh5bCqFDgKhP4z3hMQ7KAEBkzrEfaHhEPMeaELl
oyD8BTpQ8+Ig/Ab9Qoc7ikcZOi2g9gPld/xfdC/NON7h3t27d2U1IPKc+hD/
3FSG+kcb6j95qH/UoeEpDTVfFcKXFEfwQf4pF0Tw9+wGAmD4hcy0qWDQhPjn
GTD8S3bHzVIC2hcKBKKsUP+YQsObCRq+dhD3HvhfAHGPJ9T8vwUQ94RA4u/i
7wJI/CdB4ucMMP2B/VMEMe8EMD2D47MRYj8ofYPVT0bwkdMTcvoHAKpYOkg=

     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKG0MAtGFDiHfTzzTUkxwgPHLJF9z+GpC+MUxhQ5n
8hziHulD+J/jIOpfmUDlEwsd7tQH5n+2THBwAYKWlEIHhSNTN5fbJDikAYFa
BoLf2dHRcSIbwZ81c+bMm3kI/SB+ZCHCfLB8McJ+EF+yFOE+GB/mfhjf6Oqy
IxySCP2rfORsGoQQ5u+K1fedyIuwH2T+Ig6E+8DmsSHcD+PD/Afjw/wP0w8L
H5j5sPCD2Q8LX5j7cIW/Q4d2+vvoeDi/5Uz+auOceLh5BuVSYXGV8XD7QOrz
m+Ph7gmZaVPR0BsPd+8dxaMMnZPi4f6B8WH+hfFh4QHTDwsvmPmw8ITZDwtv
mPtgfJj7Yfw3RtcEZ3kj9IPNt0OYX7I7btYiE4T9K95NPHtVC+E+sHmqCPfD
+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcAdhhIPQ==
     "]], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVF1Ik2EU/vzLZllOG26Ksomazcx0/mRNOaWZrSQyNwJz74eu9QcNXsVF
EUhIbdFFQ7yYQtSuZEYkBmXzIsJ+LmZ3BWFKdLEgY1IRFkn1+p0jX9KB9+Lh
Pe85zznnOa+py9N2MkmSpARxHOIkijMcDAbfpnIAX+mpxX4GM9Fo9IaGw05v
jmP+IoOpSCTSsYHDoz+h+VgvA7ew5nQO70zPJI2HgVZYxWYOGfYfFusZBmPh
cNim5bDc+LGg1MXAImwwi8NoPDDzmmG8WR0HV7jVH+hg4Pf5fKf1HHojzuGC
4wxW+NTlYny/HeOl5RO/NsxfbEL/0FHiW6jiFX9zyVp8vZT4H0P/uzswnkfk
W4zH468qOEQzHiwunaB4VcjX3o35YjXE5xwD0TIJ6rDeqR4GdmG6PVjv2GX0
d1vpvR/rjdRzaA9aL0hDdN9A+e6oWOnffRUPRD1jE1EGTcIKrVT/B8x/u5bw
V4yfa+FgnB6a8CbIyvt1ZYRTZMVfLlqLjSYVFwi7kif4nAdnVzK+v5qD97WJ
MvYvm0OfYWF9uiTD/NzcXP0WmudP4pNB/f6C87YIvbQvvYx9EnxWsc+8bHB2
y8p8J5v/x487y1sDhxEH9Speif9e6CV+s6s/WSujfsT97zs9gaEs5P80F+Pd
0mG+wXzE+dmy0j+Xie71WN/zQspvoPwlKlbqKVOxwr8S+Wj1iHtqqH8in1fY
w91ifhMDoVgm9utsA94vbZJRT3uxH2GNrOjtXhP6u6nfxQdQD95f2L9vLaSf
BZz/tA31YJkl/R6i+b9QsaLPcRUr+zTClP6ExHujW7O/9Rrpu4X2tw/1c6mZ
5unCfR5vJH8H+m8H2hcbxbfS/jbg/o7uQn33V6MejFWk53KMP1JO+bbRPpmJ
fxH6S8UqVvpnWotteVTfVtKbgfbPjPv3XUf+ZcQnk8PnyjfanEr8TyZX/6da
2veNVI+V/pM0/O+c+zD+k1Tie5Apeu9MoX08gvmqk2jfHfQfJlD+Tsz373/6
F0vZO3M=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{304.8, 125.37554949999998`}, {304.8, 124.69273699999997`}, {
     300.5, 124.69273699999997`}, {300.5, 125.37554949999998`}, {302.3, 
     125.37554949999998`}, {302.3, 130.09273699999994`}, {300.9390625, 
     130.09273699999994`}, {300.9390625, 130.62554949999998`}, {301.2796875, 
     130.67971616666665`}, {301.5765625, 130.7453411666666}, {301.8296875, 
     130.82242449999995`}, {302.0828125, 130.8995078333333}, {302.309375, 
     130.99169533333333`}, {302.509375, 131.09898699999997`}, {303.11875, 
     131.09898699999997`}, {303.11875, 125.37554949999998`}, {304.8, 
     125.37554949999998`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVEFoE1EQXVuVKCoWQYle0ggqacXWlGqw1SFJ1cQmtrFJq6HZ3zRGqNAc
PhikB3MomoIHiwhGaA9FpGy85RDRHlVUNoIHD0oTRCGKSgqKBGlF/+6MfKoD
e3j8+e+/eTOzzfFU6HyjoihrxOcWX4P4nEbs5jBfmy69PqXCwiMRLRwSWmBq
ekyFvKZpfieH2+XMgveqCuKK8s7FAbItF5ZmVbiTy+UuA4cVz0d7vqiCXUTD
cQ5t6Z2R2Es693NYbH6ibPigQljEjyCHST2VL9TxvWiIQ9Lytj6xjkFJ1/X7
AxwG6s+qY1sYVMrl8q8IB30cYvEdDJIi9gwhttskNvK1fRJvLUzOJTsY8keQ
f7kbz5+GiL+HQZOI9tPI976XmfVqPg5Zx4p1to+B6Y97NebdEhv5G4Uftse3
CoeCzKz3Zwfx+7Cer22U72XgNWI/h4fDBwKvjjLTT8XBoXYjnll7GPlv2gmf
QP279hJfH+Jl0Z/FK/2p74Okr534hxks1Wq18U7k7x/Feu914X1HEvW98Uhs
6P98UmKDfyKA9RQTqP96P+kdwX7MhOn9GL6/7Sz6XT1H9UapH2HyO4Z8aaE/
LaLOqH9+rD8Tp3w3g6lsNmtJIL/zCPLpCerfQYlNfxwSG/nchvfnRzlcsn6x
lLYjPxtB/U2byU8V/Yo1Yv6nKM3jNxX1DtK8VlSzX3fP0Dw/V039xSDtSwH3
QfHhPqRmVFNPr4fuX0O+9WJeHvyeq1RTeN7aSedDuB8ul8TmvHZJbM7DMYmN
fr1wS2z62bOaz+qT2Hhv08X/saE/3Ir8f/f/X2z8D/4AeCvTHg==
     "]], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{248.5, 
     152.69099999999997`}, {325.5, 152.69099999999997`}, {325.5, 
     120.69099999999997`}, {248.5, 120.69099999999997`}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[0.960784, 0.988235, 0.976471], Opacity[1.]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGZigIIN+Q475VpfB74pcBBqPnBqYSuCv3++lP7d
mHwH2agU6/uPCxyqRda5P7TLh9BXoPIKUPmjBQ5g8wTyHQzuqrA1bkTwwebN
QfCLbLmuL47Ig/OBvAJbvTy4eWD9rHlw+0oyJr6teZ4Ldw9Y/mQu3L1g83bk
OsD8g8KXKIHzy/cBDdBF8BU2FGVMdCyBm3foq0ZMf0AJ3D6wfHwJ3D1g8zJK
4O6F8VH8A+Sj+DejBB4eMPNg4QWzDxaeMPfAwhvmXlh8wPwD4wMABIOn5A==

     "]]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], FaceForm[RGBColor[0., 0., 0.]], 
    FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVF1Ik2EU3rTlH0oTFcvMTJk/mzbZnHOWHTEjR970swqTbJaaTr4XirJS
iIJyIhJ1NS2MIgi1MAIrZhdGBIF64UU3YUaSUBcqaUIR1ft9z4Ev6cB38fCd
9znnPO9z3ky/sv9UpMFgMMrPJ78I+TlkPF1UyDTr7DxXIagvFAptXFZovG/J
/W2XoPMynq0qNDeWWHu2XNDkxMREz0+FAlX9c792CNomw/9bodLE5pFgmaCh
wcFBr1HQymRWoMojSOW/FSlooH0qxV4qaCwcDr83CeptemnKcAsKdnV1NUcL
mh4yeitLUL80Tmj8t13gi00QWn+rxYIaZVjMyL9fzP0k6VjNz09di7vThNa/
04X84S3g88l6iwsLC1OZgnKNhwfa3cyXjX43eFBv3oJ+Nst5pWQGyhPavHlS
j0Mykq2Y9wEhv9GG8zcqMW+4QJA368L4xT38vxD1nlfrWOWrrtFxylJVb9NB
QbtlZNt4/qOofzeHcR3407IYn8D59emMG5Bfn7wWbzXrWL2/K/GCap3d060N
OH8tlvXxs35RgkaCszkVkv/DzMzMznWYb+Q492Ngveu4f+kX7b79Olbn+3IT
9/vCJf7D6vmr14FD0TpW+T+aoP/YafZPNPQ2taL/V3Hgiwmw3xKA3wag30kz
cLAN/bxJ4vptXD9Vx9o86TpW+Rzb2J+Mz1hYv1bej3xBnb7hlUct0KulEP9H
m9lPReynRvjtsRP5bay3pQR+SK0H/7Kb84+h/9ce+CHqCPu3DPyuAzrW9qVG
x2q/kXuhzz0P6sVXcj9u1rMcel5yoZ6QeWYZTxzIn+R9sdlR752D+W3Y31k7
9vdhLvzdV8j+yub7KAB/fwbqdVh5nzaxPvnIN6ToWNPPvBZ743n/rHw/MXw/
VuzfdxPn27ifCPh1vIDv6w/8F7Md/r3zA++dz4559q3gvZsuAv/lRbxvHQ7e
36+Kpn8Ovyct84rmv8+sT88n8I26Ue/f9/QvN3c7/Q==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{271.375, 
     261.22111550000005`}, {269.865625, 260.81174050000004`}, {270.8375, 
     259.58986550000003`}, {270.4078125, 259.26799050000005`}, {269.534375, 
     260.56642800000003`}, {268.665625, 259.26799050000005`}, {268.2359375, 
     259.58986550000003`}, {269.20625, 260.81174050000004`}, {267.6984375, 
     261.22111550000005`}, {267.8640625, 261.73830300000003`}, {269.3, 
     261.20236550000004`}, {269.3, 262.76955300000003`}, {269.76875, 
     262.76955300000003`}, {269.76875, 261.20236550000004`}, {271.2046875, 
     261.73830300000003`}, {271.375, 261.22111550000005`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvZhc6WAplbNA0LXAA8+ch+C5AcGRhocP8
inNiG4B8YyAoXlLokOM6+/EeswIHJRBYXuhQG7bmy1nzAof37969y1tZ6HBw
1geLIMsCh1kzZ86MXA0xz9O6wKGzo6PDY22hw5ezyjmuthD159YVOvSl72Wd
bw+1f32hA+t9k9owpwKH1atWreLaCDGf1xVi3syNEPtlPBD8S6sZvZq9Efxo
k65L3UEQ/k6geWIfXPueh0P4P1dDzJ8WDeFbroC6Jx7iv8uLoOYnFjikAcGx
2Qh+KBBsnY7gg9ybMxniX6EEqPv7IPJ/YqHyXVD7gfbt2b179+9WiHxMBNS9
jVB+MER9TxPEvCJPCN+nFeL/t44Q9Tc7IfFxwQbivrQ+iH+2mUPtm4IWn0jx
CwDWWvLb
      "], CompressedData["
1:eJxdVG1Ik1EUnoJBEVEGo6Cg8kfaWl+T7Iu4RQqZP+zLCBWs2NQyfN/Kj0WL
ubX5brm1bEmb0qSMyJmNNFG3VVYYhUYYBEVm5d8oixEVBd13z4kbHRjj4dx7
znOe87x38cHqXcZUjUZTyH/q/+gIj16ZheqfaSWbxJaocVtmmSn7Qt/PSMzE
Y9otmeVnmId+OiUWDAQC5rDM0iayLbWKxObw+HId+JtLYrykhnUA97lx39Qu
sNqvoE3gt+Pj46WXZDYUnFr31YX6Ab/M1qdXRCoV4Fc+mUVcE0vfO3G/ySOz
qtzWyRLOz8Cjxw38xkrnGylvkVi4s7PT7QCO1YPPsB341zHMm2pD/S1HwX9R
g8wsRV0JvUngsXBK/sNSzLvaAb2eH5DYNh6PXOA73Uj9vaRnucQ+f+JxAfq9
rgSfGQHkZx/BPMsvC6z2e3flvzzXNzGaUWU8jHnnhilfCf1+d8vMWx5Pu8f7
xaLRaDHfn3Yq1/vYSPfvgF/WIZq3X2bF2e6xs2WoZxik+UvR/34U57fvx7w7
49hX0V7MN/8u9SsUWNXHvkNgVd+2PIm5FEXJjFP/rdA/j+pnbUa+YoDwBvD9
2Af/9a8Fvxc96P/SgPoDEZlNxtKLE6sw/8Kb5KcV4K+5gf4L9Jj3Qwfx06G/
868fl1G/VoHV62UtAtfxyDlP/tGBz/Em8H2iJ/81Er+V2LfXjv1MraHvx4q8
Ngd8bKdQb9NG4Adm8jsjf9YJ/VS/PK0hvxWA78gJ2v8egZN+LxFY9dugCXr9
qKF9V4Pv7nqqV4vzXSeh97zTpLcFfkuj73+4AfxbFOgdd6CezkP+cJO+Puhn
PUf8m6FHt5/4+IFnBUm/izjfHhI4uY9rAiffjzDp70d+ZgT9rjaT/r34Xj0+
4tdP75GH/B+j94Hen3/fuz8olDyO
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{295.4984375, 
     261.69924050000003`}, {291.5, 261.69924050000003`}, {291.5, 
     262.06955300000004`}, {295.4984375, 262.06955300000004`}, {295.4984375, 
     261.69924050000003`}}, {{295.4984375, 259.86955300000005`}, {291.5, 
     259.86955300000005`}, {291.5, 260.2398655}, {295.4984375, 260.2398655}, {
     295.4984375, 259.86955300000005`}}}], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGINIIaxWZDYzHRiM0D5DDQyfyTYRYwbAKERAuM=
     "], CompressedData["
1:eJxtVWtIk2EUnpplWOtm2t3mlrs4c9kuzqTeLqOLFmVrabOb1LRa9LUvMisx
Em0LWVZWzH4YBEEasX501SCLgmIGGRUFZiRFRdkiqez+fXsOfAm9sB8P7/me
c85znvdMUbwtf2OMTCaLEn7bhV+0DGfdVw9r3HU/MTibYy7h3PnuYb3tSnf1
TI6tEM6j3x6miVrZeGUGx9pDoVBtDM+sI0uDC60cmyeeOJ4tUpa3PTNzrLmp
qendUJ51NEctOm3imMi/L0HCrS0tLT+SJCzym8bzLLbLWJFoBr9+Es/ctpPd
P83gVykQ321B/EUlz4K+LrXCCv4XU/D9pWyOfezp6ZFreOY0HuzIzeFYinBu
avlI/VlCPw2BQKBPB/69jGMjhDNND762OcgfEnBbQzgr3yZhUR/DAgknhm1+
dS7VJ2B/yfXYrsUcmy6chzrU41gKPWu04OvI55jP6/WWqnH/xY56ylXo75YD
9fsVyFdXAD3vTQQOF5I+Y0mPVch3NAF8j53geypH/NIi6COL+z/mXPh+ulzC
Yr2uUTyrcJzr/eACXyAJ835bAr0eCPMS/fGqFPrOSQa2bUZ97xWIH+zmWJlw
TqjA174V/XtT6fttqOeGmurzkD808NO1HZRfS/dl/fHw3RIW47MrUd8FNc2/
ivyhhF5za9DvqMkU70O/A8l/lw6C72qChMV63wyTsFifMx5+uuIjvkHwU+sB
mlc0+rtdjXo+/cb7MlSRH3544O9Kmn8v7uu85NdvHtbdOtJpr0X9p355Iv1s
OUT5Ymjeh4kvjvSvR77DcvL3MZrvaAmLfh0wTsJiP3smkZ/qSc8U6Bs8ivld
TqX4I5hvno78Wof4wnTgKj/5x4D3Mb+W9kkm6qv2Ub9G8OXUkJ/N0PPbfpqH
hY/0b6yUcMT/uyUszq+B/NFnhN82kZ9eGMBftIXy68FnL8H7Oq+m/BuoXwXt
n+L+eOd6zOOliua/jt6PBu+9cS30/ayj/bAG+V6n0/yL8P1+A/W3StJDrPdu
Ae0rE/E5oPcT0mOMHfkmZyG/eRn0cltxX7CE/JANPm1uf3x2voQjfp/Lseed
nZ0TraTvLPKHBfzHab/nmWj/WoDPZZL+RsQvz6B9kQm+X2ng681A/Um0f+On
kn+VpJ8e70mTjH27Pg36FI+jex3lHy3hiD+HSFicz9hY7JN0PfRM/YP3NCGD
+unDe4mn+lYL7yuSz4T4M2GKp/+Pf////gKEROhZ
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIHyosdWO+b1G7TKnC4d/fu3dgcBP/smTNncpKL
HbyUKw9G6UP4b2KKHS6tZvRabFHgIAgEhWHFDvMrzol9cCxwMAaB4GKHaJOu
S9r+CD7IvLAEBB9k3qxChP6+9L2s++tQzT/cjrAfZN7pCQUOIPcm5EDsC5ha
4JAGBMfKEfzOjo4OjWYEvxwIxHsQ+kHWT56EMB/EF56JsB/svDkI98H4yO4H
8ZH9B9KP7H+Y+aDwgdkPCz+Qe9WaEeGLHv4A3FSfmQ==
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIHyosdWO+b1G7rKnAA8R1KEHwlIGAqLHYQ++Da
97yzwCENCNjyih0shTI2eHYUOLx/9+4dX3axQ7RJ16XVbQUOe3bv3l2dUeyQ
4zr7sUxLgcPZM2fO+KRB+HMaChzu3b17Vzal2GFD5311xdoCB0EgKEwqdvBS
rjy4qwJivlsixPzMYoh50gnFDhqM4fMl8iDybfEQ8/akI/gg94YlIPgg82YF
Fjh0dnR0nACa15e+l3W/G8I9l1Yzeh22h9h/MQvi/tMWBQ4uQLCkoNhhfsU5
sQBTiHnHyhF8kPyTOgQ/FAi2tiD0z5o5c6ZlJ8J8kH/39iLsBwf4BIT7YHyY
+2F8mP9Wr1q1Kqsf4X9w/PQhwgdkv2gvIvxA/s3oRoQvzD2w8AeZx9WOiB+Q
/tIWRPyB1Fc2IuIXFP9NdYj4B/nfpRo1vSCnHwASTPMn
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQffbMmTNryosd5lecE/sQVuCgBARMpQj++3fv3q0r
KnboS9/Lej+8wMEYCDYXFDvkuM5+vCeywGHPbiDIg8jPjy5wABrJcCC32EHs
g2ufexyCz3rfpHZbIqo8eyqa/nRU82syUe2Pz0Z1X0BOgQOy+0H8ciAIr0Lw
Ozs6OlbUIPSD7F9QhzAfZP/sBoT9s2YCQSPCfTA+zP3I8iD/oeiPRjUfFD7I
9oPCD9l9oPBFD38AhNGzyw==
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4lkzZ8682ZXvYPdxjq6CXb4DUIjB4RYm/0aX
2fGd3Xlw/rFK1W0aDXkO5UDw/U6+w681ES9vl+c5pIHAo3yHIpULCZeL8hxC
geDq83yHF7Pdb5zKhep/n++wJJx5ils2RP2yHwg+yLzpDAVw/r27d+/WshY4
yJyv4t6XC1HPxl3gwLUv89eaIqh9fAUQ98XlOSgBwSOuAoj7YvIcjIFgMjtE
/mdkngPIv5UsEP06ERD3JDAWOGzLEFkaHgbRn/Q7HyyfEwpRf/MTgg9yn/kj
BB/kv6lX8x2aTB8WqkRB7Pt8BuL/ycl5DoJAEHgk3yFBeL8/E9T/DAcg4cFV
jeCD/dOL4IPCf4FGvgNy/KDzQfEDAPLwtwI=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGBwBWIQbQwCygUON7rMju9clucA4y8JZ57StjnP4f27d+/8
VAocZM5Xcf/bl+eQBgRtagUOdh/n6CqczHO4d/fu3b0aBQ4Jwvv9nS7nOZw9
c+bMGu0Ch20ZIkuv34aYF6wPUf/gEUT9X6MCh2OVqttevISYr2de4PBitvsN
r/cQ859ZQ+xn+5znoAQEixwg5h/6luewZ/fu3dWuEPMW/ICYX+yF4JcDwXd/
BB9sXkiBQ5Ppw8InQP1ALzM4RBY4cO3L/JUDNH/WTCCIhfoPaH9nR0eHRyLU
f68h/vFJKXAoUrmQcPlJnoMgEASmFzjoPOiW6b8H8c/cTKh7r0PDLxsSnpbn
IPrP5EDtOwq1LxfCX7MbwQep/7kBwQeZ57YOwf+1JuLl7NVo6lcg+CD3JiyD
uKcWyldYAvG/G1S95SKoewww+aD4WDET4r+JhlDzJ0LMlzSGuFenG2LeMhOo
fS0Q+Z1m0PCog8a3JTQ9VULMf2MN0f+mBBKfTPYFDlPcPjWZFkLUT3aChO/k
vDwHFyBQcStwCGBaZ/cxG6KfBxa/WdD48EPwQf69G4Tgg+KPIxxV/5kohPmh
QDA1DmH/6lWrVnklQeO3BOreVGh8Qd3fkwX1TzokfW1Pg6TXU0mQ9BidBEmf
TXGQ8KiMhab3KIj87AhI+rILh7ovGGp+KCQ9HvBB8EH+Z3FHlV/gCM0f4dDw
soGmt2iI+7vMofkjDhp+xhD/CKdA9CfoQ+MzC+oebWj+K4TmLw1I/kipguYn
Naj9LdD8AM3/dX2I8gEcnzMRfFj5AQAoDfhc
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmECQWOHDty/ylszXPAYV/JM8hFAimxhc4BDCt
s9t4Ps/h7JkzZ3qiCxxudJkd33k9z6GzAwjCCxwShPf7H7oPkX8TWOCwJJx5
yrHHEPN2eiH4q1etWtXljuDfu3v3bq1LgYPM+SrufY/yHIyBYLIjxP41DyDm
rbErcPi1JuLl7Ht5Du/fvXvHZ1PgoPOgW6b/NtR8S4h5bUD3uABBijmUfxmi
P8e0wOFYpeq2Fecg5l82hpj/5gTEflsjiP8MD0PM1zOE2rcnzyENCJYZ4Agf
IB8Aj0ygpw==
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4lkzZ878eaHAYUk48xQ31XyHNCA4drbAQedB
t4y/Rr7D+3fv3p07BeVr5TsYA4HwCah67XyHPbt3744+WuAgc76K204n32H1
qlWrvA4VONzoMju+E8gHWsHwYB+CXw4E17cj+GfPAMGmAodfayJeSmtC1B9Y
X+Bg93GO7gNFiPrtawocmkwfFi6RgthvvLrAoUjlQsJkAQSfa1/mrzXMqPyc
r3kOIP/dPI2d/+Z+Hop6ZD7If22ReWD3OMzD5IPd9wDCZ+jA5MPsg6nHxl/D
lI9qnmi+Q2dHR8eJBQUOCcL7/Z2A8QF271KIfy8bQML31SqoeTb5DqFAcHUT
JDwtnSDqZ+5F8EHmeRxF8MHhewbKt4fwGa5A+ZYQ/cjpAQDNNui4
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4jQgcPtZ4LAknHkK2/08B2MQeIzJL1K5kDD5
M4Q/+Rcm/0aX2XFLpXwHkHlpbIUYfK59mb9yvuY5zJo5c2alDnb+G6B9yOrR
+WumIvi/1kS8nN2X51AOBNuB/ACmdXaFHRDzItkh6nWa8xwYQIADIv+xNs9B
EAQ4Cx0ShPf7N1XmOZw9c+ZMD1ehg93HOboPSvMcOjs6Ojh4Ch1kzldx2xVB
5Hn4oOrzIebPFIC6JxfiHjXhQodtGSJLr2dD9HuIQd2fBbVfCsEHu1cWwX//
7t07PsVCB50H3TL92RDz2FQKweF7OSfPQQkImNQh7lPIg5j3QBMqnw/hL4CF
XyGE36APCf+dcVD7gfLHKlW3acTkOdy7e/eurAZE/mckxD83laHhFQH1nzzE
P+Fh0PCUhsZXKIQvKY7gg/xTLojg79kNBMDwm+L2qelrGMQ/z4DhD05PUXkO
oUAgygr1Tyw0vJmg4ZsIce+B/wUQ96RDzf9bAAnfHEj8XfxdAIn/Ykj8nIGm
v8pqiHkngOkZZH5CM8R+UPoGqZfuQfCR0xNy+gcAlrRL5w==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKG0MAtGFDnYf5+gueJznAOMnCO/3P/Qawi+OKXTY
liGyNPwThP85DqI+4TtUPrHQ4Vil6raMP3kOLkDQklLowLUv89ebf3kOaUCg
loHgd3Z0dJzIRvBnzZw582YeQj+IH1mIMB8sX4ywH8SXLEW4D8aHuR/Glzlf
xV13G6F/itunpq9XEOYvCWeewnYBYT/IfPHTCPeBzTuBcD+MD/MfjA/zP0w/
LHxg5sPCD2Y/LHxh7sMV/qDwySlA8HUedMv0VyDMazJ9WKhSj7APpF6nBeEe
kH2mnQj33ugyO76zG+EfGB/mXxgfFh4w/bDwgpkPC0+Y/bDwhrkPxoe5Hzm+
nDJQ42NrImp8HItB2A8KjwfhqOklJxQ1PYH4yOkNxIf5H6YfOT5A5iPHB8h+
5PQOch96+AMAluBdiQ==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvtIscilQuJARn5TmA+XoIvgsQHDEscrD7
OEc3ITvPwRgIik2KHG50mR2vzM1zUAIB8yKHX2siXs7Oz3N4/+7duzzLIocm
04eFS4ryHGbNnDkz0hpi3uSyPIfOjo4OD9sihxez3W90VUHUn7MrcpA5X8Vt
Vw+1377IgWtf5q81LXkOq1etWsXlCDFfugti3kxHiP2WExD8JeHMU9imI/jb
MkSWii+F8HcCzdN50C1zfj2E/9MaYr7Odgjf0gLqnn0Q/102gpp/KM8hDQiO
aSP4oUCwVR3BB7k3RxniX5UDUPfLQeR/7obKS0HtB9q3Z/fu3b9FIfI7N0Dd
KwjlL4Oo7xGCmPdkEoTvIwrx/+1miPqbkpD4WFAJcV+aHMQ/OflQ+1TQ4hMp
fgFV1fOD
      "], CompressedData["
1:eJxdVGtIVFEQ3kxNNw232yK+yi0Nze1haiKSDWWblZYmsZFIFmgGdS6eXhgR
soSYvX4kxFY/CgpiE38kSbY9LTYwzcgICyyLAgMrNuiHUtC995s40cDl8jHn
zHzzzcxx7dK31EfYbLZK4zP/gwOGlUoqCV9aPBap03zTVkuqjOgqCcfq1GBY
9CpJHZ4fvp/xOl3w+/3NxZLs9/dMTSTo5DAsXMhY08kIaaN84L1O3G9YprCZ
r9yt8LvR0dHaLEm+gg9NnzTE92dIkhkv6oYTgN+kS6rTHmzui8f9U2mSRtpX
PO2N0SnPsO5kxtP4fCLjKUE3AoFAuxO4OSwsPiENePKzsOqNmI34vrfC4p/u
kDTVue1LzYDCV73TO1qDwqo31wm9Lj8WVGrYkyTw1foF8s9lPZ8L+v7NsAXQ
79Yw+Niz4U9/Lax63EsUNvONLf/Pb+g7fnHdSP8rYdWrFbP/pbD0+10iKXXo
yMxjQ4LuBoPBGqN/7rGTqWef8f214Fcd4nrLJPU0zrmW+Ajx8jZw/XeQ/+FG
nD93E/VWVaBfnQHUl7SJ811R2NQn+rzCpr5FpwWdaGtry6rg/Mehv4fjVx+F
v3E94wPgO+HB/DXtA7/hNZx/N+L3kqRQc2bP+E7Un7aS56kW/G1FnH876v2Y
z/y8yN/6dx63cr4chc3rdQsVPmxYoYvnxws++1NZnxrg7kTmtwP9PqNx/+uR
LzoBfrcAH18cxzsE3BfL897C8zlD6WfOS38Uz5sffAciuf/XFbbm/bbC5rwd
HIRek1Hc7/fgWx3D8b7ifKcdeuf+Yr3jMW/2GOxvyMH8HdjXe07E8yZj/6uS
WV8X9r9lHvPP1C09ujKYTzbwrEWsXw7OX16qsNWPAoWt96OY9cqGP46Qz5PJ
+1+KfU1xMb8yfo9ScN5dzvrw+/Pve/cHddQoSQ==
      "]}], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGINIIaxWZDYzHRiM0D5DDQyfyTYRYwbAKERAuM=
     "], CompressedData["
1:eJxtVW1IU2EUXjNnahS1woIKLSuL9UPEoD/yElF/BKOwlL6GlGite/EOqfWF
GA2zyCIxlv2QqCgzQcJKjCyRaTY1W+XCNlet/Gw2Nz+2/Oje+xy6Fb1wfzzc
c5/znOec99y4LH7HoTCVSjVLfPLER63C0TcLLMV3Y4P+LMeyxWNtFVhf+TZH
1GmOpYvnXbvAtqurU/KOcazNZrNdtAtMiH+tvypwbIt0HAIr3TpSWHuUY/cr
KysHnAK7tTusdOsRjkn8BR4FP62vr//Zq2CJP3lQYFHPckM6A/h1XoE5ijc2
B4+CP96HeCuP+Fq/wPTahrTNAvjdo/jekM+xYa/XO29CYI9yFt2+dpxjK8XT
GCT9pzh23WKxBEPEX8CxBeJJnARf4Tnkt4m4MPlT3q1iBcv+XFawzn1hWVoZ
6RPxso4T0c/KOZYkHnsIeqoq4Kc5SHy3OXa+qKgoZxzvh+5BjymA+swPoP+S
D/lia+Bn63dg90Pyp5/8qEW+qx7K9xh8H1yIr3gCf1SO/2O3Dd8nuRQs6c3+
IrBQVUZ/dxv4LL3ot70DfnUOYj5aO+Hv5mHg4rfQN+RDvNbBsWPiuRYAX3k3
6i8ao+97oOf5OOnz0HxMYJ7y+yl/kN57/8axAQXL8dPQVzNO/dfwmA8/+TuX
l+vV/qD4hbxcr4bmz7CYl/nqPAqW9Pb1KFjSt6eb5klLfF2YJ9N8Hv16Q35E
87IeXzvNjwb5zK9o/mao/01UzwIe89oiMKtp9aO7S6C/og31dK2gfHbq9yri
c1C+BOS74iL+9YhP+qpgaV5nDyhYquekl+ZpHeq3jJDetbzcv8djFB/Py/1N
DZGfcYjPnALWLIeebJVRvh8lS4CtaiP2iRbxptlG+DUXfDqNUfbTF079iDDK
9edMc7+xPJ+jCpb6l0zzERT55Pl00T5Qgb/uPe2zSfKzHferepz61ULz46P9
0/Q3HmrEfH8OUP9f0P2ZwH1PacD98YfIr6fI922K+lGH7wtVVF8t99sPeX/W
0L4KN4LvAe5LF/mReBf5YucYkf8m7pchEu9rbiC/Ngp8O8v+wSUKlufdzDGX
0+lcHkn+nqH7HwF+He331HD4F+SBq9Tkfy7id87QvjgIvqmf8LfvAPTH0P6N
2Qv9FX7yLxP3P2EY+7ZxF/zJGqD36ZT/q4Ll+fyoYKk/S99hn+zJgJ9rOtDP
TfupnpeUn/Tta6J8hxF/5znF0//jz//fL5u4QVI=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIH3IsduPZl/soJzXO4d/fu3VgbBP/smTNncoyL
Haa4fWraGgfhv9EpdlgSzjzFrTDPQRAICtWKHew+ztF90JznYAwCysUO2zJE
lobPQ/BB5q05gOCDzDN9jNAvc76Ku+4vqvlt/Plw+0HmTVfMdwC5N8EGYt8C
rXyHNCA45o7gd3Z0dGgEI/jlQCAeg9APsn5yEsJ8EF84E2E/iB+cg3AfjI/s
fhAf2X8g/cj+h5kPCh+Y/bDwA7lXLRgRvujhDwDhO5/E
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIH3IsduPZl/soRzXcA8R1cEHwlIGByLHbQedAt
c1443yENCNjsih2KVC4kTBbId3j/7t07Putih20ZIkvDefMd9uzevbvaotjh
RpfZcUuOfIezZ86c8TGD8hnzHe7dvXtX1qTYIUF4v7/TrzwHQSAoNCp2mOL2
qan0Yx7YfDdDiPmXn+WBzZM2KHYIYFpnZ3gHIt+mDzGv8jyCD3LvmgMIPsg8
08V5Dp0dHR0ngObJnK/iruvNg7tnSTjzlLZ6iP0XrSDun16Y5+ACBEscih3s
Ps7RXZAFMe+YO4IPkn/ih+CHAsHWEIT+WTNnzrSMRJgP8u/eWIT94ABPQLgP
xoe5H8aH+W/1qlWrsuIR/gfHTxwifED2i8Yiwg/k34xoRPjC3AMLf5B5XOGI
+AHpLw1BxB9IfWUgIn5B8d/kh4h/kP9dvFHTC3L6AQCEcvEB
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQffbMmTNr3Isd7D7O0X2wNs9BCQiYXBH89+/evVvn
VOwgc76Ke9/6PAdjINjsUOxwo8vseOXmPIc9u4HADiJvtz3PAWgkwwHbYged
B90y/XsQfK59mb9yDqPK859C038e1fyfl9Dsv4bqvgU38hyQ3Q/ilwNBuBeC
39nR0bHCB6EfZP8CP4T5IPtnByDsnzUTCAIR7oPxYe5Hlgf5D0X/dlTzQeGD
Yv96VPeBwhc9/AE/0reW
      "]}], 
    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGZigIIF+Q475VpfBz4pcNhbMlmCpQ7BN7irwtYY
m++gsKEoY+LdAgd9EN8130ERxL8IldeFyh8tcACbp5DvEJVifd9/K4IPNm8J
gl9ky3V9sUcenL/tRNm++Wp5cPPUDDnWyLDlwe0D89/lwt0D5l/LhbsXbN6J
XAeYf1D4CiVw/iLXbZ//GiD4GRPf1tg7lsDNA/N9S+D2gfmRJXD3gM1LKIG7
F8ZH8Q+Qj+JfIB8WHjDzYOEFsw8WnjD3wMIb5l5YfMD8A+MDAGcVpEA=
     "],
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{368.25, 
     93.65600000000006}, {446.25, 93.65600000000006}, {446.25, 
     60.65600000000006}, {368.25, 60.65600000000006}}}]}, 
   {Thickness[0.0016666666666666668`], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNv0ssdDKJV3rr1hjiA+VkIvgsQHMktdzjx
ZW9bQn+IgzEQFBeUO/xQ/7hz8uQQByUQKC53cMgx/Xd9eojD+3fv3uWVljsE
1Lrxv5wb4jBr5syZkeUQ844tDXHo7Ojo8Kgsd1DwEr6zdS1E/bmqcoeGDZVO
Mtuh9leXOyT0hSv8OhjisHrVqlVctVDzz0DMm1kLsV/4JoI/42BX8NpnCP6O
x2tKzzOFgvk7geatuDQ7xU4Cwv9ZDjVfDcK3LIG6xzQU7L/LeVDzbUMd0oDg
WDqCHwoEW5MRfJB7c+Kh/rWA8N9EQcPHACofBrVfI9Rhz+7du38HQvVLQeyf
6Qvls0HU9/hBzMu8BwkPn0CI/8MPQPx3MxQSHw9Wh4DdlxYF8U/VdIj6nAS0
+ESKXwAbrPNi
      "], CompressedData["
1:eJxdVGFIU2EUHYskWmUxCPohWAhFJCUiUX+6lo6K2Vx7b6tUGqZzlaYi9qGt
WrJ0W+GfBbUMKiiQZZJIkE0jJYaYIaRQScbIiKCshH7UoujtuydfdGGMw/2+
e849935vbWX9/mqjwWAo1X7p/2fjWvgFjX4banePqLQuHWcEfVid7G4bV8mj
RcYpQQ3XvXkXplS6Go1GW4Qgd6cru3VapVVazDcBJ1XSShqoAXiW73tqdZzm
s3p1/GZmZqaiSlDpaUvm0STXj7oFbSnLmbNMM35VLmjlNuPTnCm+f/GgoO/r
5wfMYyrla9HvBB7EeQdwr0p3YrFY2M440sV6EjbgAPdr3Mf1b9Wx/uwSQVRb
8Ntl1/GV4bDj7mbuN8/OfiV3qFSkxROV9Sas4D8EP50qffmsxWH2z+RmPUur
cb+K+9l0TMdpvuSJ//Kav9l7za8LKrlfs0C+nP371SrIf69l5zWXSoPxeLxM
m1/3866qRzbcPwc/i9FvQNCD2Z7mie1cL78d/ecy/+MO9JPF/dpDPK/Ucu5v
TRh8P5UFLP15r2Pp/6RCoWAwuCEE/mFF+m9BfUsf573ngW8qUu+nNuxfRJH6
Js+Cv4PrD/gEvVw8cbnRp8j+s1qwT02K1G9oBn+dIvt92wB9HuZv/7uPR8BX
o+P0dXeljoUWWyuwLzWsp+kA/Kln3O+APqHIeXfaMP8A82VYkb/Eetp2o95t
xiPF6P8hn0/s0v1L78tYIeb9kfWOE/ASdQHL8xt1LN+rg+f1oxDzPsnzdhTh
foTP91jYb2Mf5yf38L7dH8V7KYH+ad63ITvXs81hP5zwN8X74y+DnkVO6Uev
G3pMjFd44F+mU56/cVzHch6NOpbfDwG/TJxf5mO+XK2+9N/P7/VFCvoCmN9X
7H8Qet7Bn3++d38AGGJEbQ==
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{388.2484375, 83.68870400000003}, {386.4203125, 
     83.68870400000003}, {386.4203125, 81.85432900000012}, {386.05, 
     81.85432900000012}, {386.05, 83.68870400000003}, {384.25, 
     83.68870400000003}, {384.25, 84.05432900000005}, {386.05, 
     84.05432900000005}, {386.05, 85.85432900000012}, {386.4203125, 
     85.85432900000012}, {386.4203125, 84.05432900000005}, {388.2484375, 
     84.05432900000005}, {388.2484375, 83.68870400000003}}}], 
    FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGINIIaxWZDYzHRiM0D5DDQyfyTYRYwbAKERAuM=
     "], CompressedData["
1:eJxtVVtIVFEUHUctJLFioOgFFkMWFSQiEUEcJIQiKOzeqajAXmIUlB/VHSMw
P8RSrKhQC0koetiDCiTLHmZpZdZgGZOWNiVqPsbX6OT4qnvPWnIrOjAfi7vP
2muvvc+euTv2J+wOtlgsQfovRf9ZLTiJzzXxqv9xRuJTRSTpp7JSE5FrbF+K
7ylC1c/HKk38mOa5ln5VEW+rq6uzXZpYusXurSxQxCrj1GriwMXk6ElnFXGj
qKiovU4Tec9ObFhyUhEGf5rHxI9KS0uHm0xs8Me2aiIxZ2Pk0CnwL27XxGBU
74MzZ8Fv9zI+D/HF3ZqYstz6xl4Afk8v7qdeUkR3V1dXRL8mSppuHnRdV8Q8
/ZQPUP9dRZzPz88P+Mn/UBFT9RM9CL7Lz5G/Wsfrj8ZPbntrYulPnYmvvb+w
a2Uz9ek47Y4zbnaPImL088HPegLwM2OAfMGqOJ6ZmZnso95wVepx9qC+WzZV
6s/xIp9npir9rGpj/kgV/jTTD7sq853xMF8U+OrqeX+hKv2x1P4fJybgfky9
iQ29SV81IfbFjm1UwJffhH7Hb1KlXzWtmI/Yrar0N66D87Id+jq9nI9kVRzW
T24P+Nz7UX9mH+9r0FPmo75jKuajH/OUlcX8A/x+7h9caGIZXwx9d33sfwX4
Pd30twb12joZ34B6J3D+UpvA98BjYkPvj88mNvRtcXOevpLvA+fJzX69ox8u
6Omtor8VyJfxkvEl7H8Z66mHn+UvNPEp1JXb2wb9ha9Rzzo/87nY71/kq2W+
MIfMd7qe/BEO9PebiY15DWkxsVHPkXbOU7gDfnZR70SH7N/9PsZbHbK/a/30
cxj6NweI+zg/I3gfT9qAK8eor5H1Wpzgq+E8W53w8wX7EeyU9acUm1jquWxi
uW84HwGdT87nIfZ7BHptScw/SD9VvK/bPtazmvPjpZ/ib5y6Ev343kO8gu+n
n+99Gfrh89OvaORrCbDeRbifPsJ5sZt+yPcxC3oigpzgs+G9uOmHNQz5IkOc
yD+K/bMvlN/7sG9sE1h/8z/YbWI57xWKaGxoaJgTOu4vvscEg3/oCvjXBrE/
ecA3x1hfNuI3DBOng2/0J/xN0RSpf/r4/j2A/VzYTf/2KvI9Lejg/k7Cft7R
wu87mf+bieV8fjKx0Z8ZNdxPe7Bf579hvw+yngrmT4O+bWXMl4P4K48Yz/+P
P///fgM0c0qY
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIHnCsdEvrCFaqSQxzu3b17N9YCwT975syZHP1K
h4L5GYbcZRD+G41KhxkHu4J1Z4c4CAJBoVKlw4kve9sSDoQ4GIOAfKXDjsdr
Sv2/Ivgg835ZhsL5YPPqQ+H6GzZUOs3ZHIpi/trroXD7Qead/x3qAHJvggXE
vge8YQ5pQHDMGcHv7Ojo0PBH8MuBQDwCoR9k/eQ4hPkgvnAqwn4QPzgD4T4Y
H9n9ID6y/0D6kf0PMx8UPjD7YeEHcq+aPyJ80cMfAKK+pIE=
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIHnCsdEvrCFaoehzqA+A4OCL4SEDDZVjqsuDQ7
xe5BqEMaELBZVToYRKu8PXYz1OH9u3fv+MwrHXY8XlPqfznUYc/u3burTSod
fqh/3Cl8MtTh7JkzZ3yMoPzdoQ737t69K2tQ6SBgyXRaZW2ogyAQFOpVOhTM
zzDsng0x300XYr5bG8Q8aZ1KhxdiD1YwFULk27Qh5k0OR/BB7v1lieCDzOP+
H+LQ2dHRcQJoXsOGSqc5l0Pg7plxsCt47fYQsP0XzSDuPz87xMEFCJbYVDqc
+LK37UFvCNi8Y84IPkj+iReCHwoEWwMQ+mfNnDnTMhRhPsi/eyMR9oMDPAbh
Phgf5n4YH+a/1atWrcqKRvgfHD9RiPAB2S8aiQg/kH8zwhHhC3MPLPxB5nEF
I+IHpL80ABF/IPWVvoj4BcV/kxci/kH+d3FHTS/I6QcAkOj8WQ==
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQffbMmTNrnCsdTnzZ25YgEuqgBARMjgj++3fv3q2z
q3Ro2FDpJCMR6mAMBJttKh1+qH/cOVk+1GHPbiCwgsqrhzoAjWQ4YFnpsOLS
7JR9hgh+Ql+4QpU9mrwPmv5wNPPj0OxPQ3Xfg8xQB2T3g/jlQBDuhuB3dnR0
rPBA6AfZv8ALYT7I/tk+CPtnzQQCX4T7YHyY+1HkDdH0q6OZL49mvwSq+0Dh
ix7+AGP4s4s=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{418.2484375, 
     84.58401650000008}, {414.25, 84.58401650000008}, {414.25, 
     84.95432900000003}, {418.2484375, 84.95432900000003}, {418.2484375, 
     84.58401650000008}}, {{418.2484375, 82.7543290000001}, {414.25, 
     82.7543290000001}, {414.25, 83.12464150000005}, {418.2484375, 
     83.12464150000005}, {418.2484375, 82.7543290000001}}}], 
    FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGINIIaxWZDYzHRiM0D5DDQyfyTYRYwbAKERAuM=
     "], CompressedData["
1:eJxtVVtIVFEUnbQHklgxUPQCiyGLChKRiEAOEkIhFHrvWFgwWYmRoH5YeiMw
P8RSrNBQK2lA8zGaZim+Kl85ls406qijpTY6KRplaRGZWN179pJb0oH5WNx9
1l577X32bIuICTnnrtFolsm/OPnnpqFjyJfYy2/PUgyNAouUj7lQYt5HtEPV
jwUmyqfPJLHJ9c7i5CKBWS0WS3qFxPaF6z6Z8wR2SDlVEou9H+W7OktgpSaT
6UOdxHKar4fuvSEwhT+pScVPGxoa5ltVrPD7t0vMkBHm/fMm8e/pkNgPn5m6
zCzi11kRn0Px1TaJrT3g1qnLI35nN92X8gX2eXp62qtXYrWusnhbicC2y6el
D/orBXYnNzd3rh/89QJbJx/fAeIraKX8FhkfuxK0ZsqqYu7PoIqLe+6eDRiH
PhknPUoM3PJFYH7ysfejnjnyM6UPfO4iu5aamhplh15PketJ7KL6HmpFrj/D
Svmcm0TuZ8cr5PcWyZ82+KETeb7MJuTzIb7BetzfJXJ/NFX/x4YQuu9Xr2JF
b2SjxFi0/68wgfhyW6nfQcdF7ld3O82H/0mR+xvYiXk5Tfo+WjEfUSK7JJ/s
LuJzxFD9qT24n0B6muzQd1Wk+eileUpLQ/4+fL+9BBtVzOOrSV+lHf1vI36n
Df52U71aC+KHqd6VmD/JRXx1TSpW9E42qFjRF16DeXoHvieYJwf6VQ4/bKRn
xgR/2yhfShHia9F/I+p5Q362FEhsYIUte2aK9BtLqJ6j35GvAv3+Db4q5PPQ
83y36sHvpaf+NqtYmdflZhUr9VzuwDx56snP19C7Ss/7V9ODeDc9729wP/yc
J/0nBoFnMT9D9D6eTxE2j0DfCOp1gq8b8zwGP1+gHy6qP65axVxPgYr5vsF8
zDkxnxfR7yHi10Yi/wD8FOl9lduR/zDmxwo/2b9YCqB+jHUBH8T76cV730/9
+NoPfb6Ub2IQ9e6m+8lDqE+n+sHfx2bS4zUKPi29Fwf8cPOgfN7vkX+B9k/0
OL7P0r7RTqD+8SXYoWI+720CGxkeHt46vugvffdzof5C4g8ehT85hMtGUF86
xYe+BU4mvgUH+BIErn/D4v6Npf1stEH/BYG/p52d2N+RtJ8jzPh+BvmbVczn
s1bFSn82VmI/naf9uqMU/Y5HPQ+QP4n0nTIiXwbFF95DPP4//v7/+wN8e01K

     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNv1KsdDKJV3rr1hjiA+VoIvgsQHNGtdjjx
ZW9bQn+IgzEQFBtUO/xQ/7hz8uQQByUQMK52cMgx/Xd9eojD+3fv3uWZVjsE
1Lrxv5wb4jBr5syZkeYQ844tDXHo7Ojo8LCsdlDwEr6zdS1E/TmraoeGDZVO
Mtuh9ltXOyT0hSv8OhjisHrVqlVctlDzz0DMm2kLsV/4JoI/42BX8NpnCP6O
x2tKzzOFgvk7geatuDQ7xU4Cwv9pDjVfDcK3NIG6xzQU7L/LelDzbUMd0oDg
mDqCHwoEW5URfJB7c+Sh/rWA8N9IQcPHACovBrVfI9Rhz+7du38LQvVLQeyf
yQvls0HU9/BBzMu8BwkPH0GI/8MPQPx3UxQSHw9Wh4DdlyYF8U/VdIj6HAW0
+ESKXwD7DOwe
      "], CompressedData["
1:eJxdVGFIU2EUfc4Ua+oao5GVtGSlmJYiMjTJm+hKEdT2nvthwTAzg8RCSuwV
iIiZhX8MahlUUCDLJJEgm0ZKiJghpFBJi5ERQVkJ/ahF0XvfPfmiC2Mc7vfd
c+6593tbapv2HzZJklSp/fT/ZzNakEpT38Y6fRMKpeixW6UP9nB/+4xC9VrE
7lLp+PWG7AvzCl31+/2tLpV8PV7H6QWFrFos5wCHFdJKSpQFvMj36zMMrPOV
pxn4TSgUOuhUqfKs23I0zPX9DpWyapxL7gXGrzaptDbP9NQ5z/cvJqn0PXV5
xDatUI4Ww3bgUZy3AQ8qdCcQCHRbGff2sZ5JC3AH92tK5Pq3Glm/I0ElOpb7
21tl4Cvj3Z67O7nfbCv7FS5UqFiLJ+tY72Q5+DfAz2qFvnzWYjP7Z/axnjVb
cb+O+8lIN7DOF97xX17z11Fme51by/3aXMgfYP9+5avUdq+16JpXodFgMFij
za//eV/dowrc3wM/S9BvsUoPFgdOzuZzvRw3+s9k/sd70U8y91tVyvOKJHB/
SWXg+ymvYOHPewML/+dkOt/V1ZVWCv5xWfjvRn33EOcbSoBvykLvpyLsX68s
9M0Vgv8c1x8pUOllzOzlE2dk0X9yHvapWRb6pVzwN8qi37dZ0FfP/J1/9/EQ
+FINrF/3pRi4RQtXMvblCOtpXg9/mhgP26CvRRbz7rFg/h3MFxuP/CXW0x6H
ercZT8Sg/4d8fjLa8E/fl+kozPsj652RgOOUFSzOpxtYvFcPz+tHFOZ9iuft
WYX7vXx+IJb9Ng1xfm4179v9KbyXBOhf4H0bs3K9iiXshx3+Rnh/2jZCT3S1
8GPQAT1mxonb4J+lWpy/sd3AYh7ZBhbfDxf8MnM+voD5MrX6wn/i9/oiAn3F
mN9X7P8+6HkHf/753v0B/BIxrQ==
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4rNnzpzJWVjucOLL3rYHJkEOQCEGhZOY/B/q
H3cKXwiA82+wnp/+cUeAw57du3dXnyp3cMgx/Re+IsDBGATOljsYRKu8dZsX
4LB61apVr86XOyh4Cd8xnQLRv+ByucOMg13Buv0Q9cE3EPxyIJh+B8G/d/fu
3dqH5Q4NGyqdZID604CA7Xm5Q0JfuMKvuRB+2iuo+8oCHJSA4NEzqPsKIOZP
fgyRn5wT4DBr5syZlQ+g+jMg7km4W+6w4/GaUv/UAAdBINh4EyJflRzgAA6f
qwg+yL/SZxF8kP9OHSt3CKh1438JM/8QxP/H6gMcOjs6OjT2lTsIWDKdXjIJ
Yh/DHkh4bF2H4IPdcxnBB4c/Z5ADSvyg84HxAwAnuMf5
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGBwBWIQbQwC/8sdfqh/3CnMFugA48842BW8Vj7Q4f27d+/8
GCocGjZUOs0xC3RIA4I2pgqHE1/2tj3wCnS4d/fu3b0sFQ4ClkynVeIDHc6e
OXNmDXuFw47Ha0r9CyDmBXND1CfUQdT/5atwuMF6fnphD8R8PeEKBwUv4Tum
0yHmPxOvgNg/L9BBCQgWyUDNXxbosGf37t3VilD7V0LML1ZD8MuB4Ls2gg82
z6DCIaDWjT8TqB/oZQYH0wqHhL5whar5gQ6zZgKBJdR/MwIdOjs6Ojxsofr7
IP7xcahwMIhWeevWFOggCASBzhUOKy7NTtlXCvHPXFeoe9Og4edeAQnPUIj+
Mx5Q+5yh9nlC+L/0EXyQ+slSCD7IPF1RBN8hx/TfdX409VwIPjh8WSHuqYXy
HzBA/O8GVS/8NwDiHh5MPig+Pr4OAPtvIi/U/DsBYPMl+aHuPRcANm+ZANS+
gxD5nULQ8NgaAIlvUaj5ayDmvxGH+n9RADg+maQrHArmZxhyz4aonywHCd9j
UwMcXIBARanC4YXYgxVNEyD6eWDx2wvh+2gh+CD/3tVD8EHxx2GMqv+MGcL8
UCCYaoWwf/WqVau87KDxuwjqXkeoe1dD+D1uUP90BIDT13YnaHqtCwCnx2g7
SPpcUgoJj0pLaPjkQeRnm0DSl0w61H36UPOTA8Dp8YAGgg/yP4syqvwCWah9
6dDwkoCmtzyI+7uEofmjDBp+/FD/NkD0J3BD47MP6h52aP6bA4mPRSzQ/LEW
Yn4xE9T+gxD3esDy/9UAePkAln+D4MPKDwBwX+ph
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmENhWOCT0hSv8Ugp0QOE7BDqEAsFU6wqHF2IP
VjBFBDqcPXPmTI95hcMP9Y87hTMCHTo7gMC4wkHAkum0SgVE/o1uhcOMg13B
ug0Q83aqIfirV61a1aWM4N+7e/durUKFQ8OGSieZukAHYyCYLAu1vxJi3hqp
CgeHHNN/10sDHd6/e/eOT6LCYcWl2Sn78qHmi0LMW5se6OACBCnCUH48RH+O
YIXDDdbz0z+GQsy/zA8xv8oLYr8tH9R/9hDz9Xih9hkGOqQBwTIeHOED5AMA
QbSTMg==
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4lkzZ878uabCYcbBrmBd5iCHNCA4trLCYcWl
2Sl2nEEO79+9e3duGZTPG+RgDATCS6Dq+YMc9uzevTt6YYVDw4ZKJxnBIIfV
q1at8ppX4fBD/eNOYaEgB6AVDA9mIfjlQHB9MoJ/9gwQ9FU4OOSY/rvOBVF/
oLvC4cSXvW0JfwLB6rd3VDgE1Lrxv3wbCLbfuL3CwSBa5e2xmwh+Ql+4wq/9
qPyqxYEOIP/dXI6DX4GmHokP8t/a7ACwexyqMPlg91UFgvkMKZh8mH0w9dj4
v/YGopr3JNChs6Oj40RNhYOAJdNpFWB8gN3bCPGvmxQkfF+1Qc0zDHIIBYKr
fdDwtIWonzkTwQeZ57EQwQeH7woo3xzCZ9gA5WtD9COnBwA2EuAq
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4jQgcLta4TDjYFfw2rJAB2MQ2I/JN4hWeXts
PoQ/+Rom/4f6x53CfwMdQOalPcLkJ/SFK1QtDnSYNXPmzEqOSuz8CjT1aPxf
jwPgfIcc03/XrwY4lAPBdiD/hdiDFU0nA8DmRT6Gqt8X4MAAAk+g8lsCHARB
4GmFg4Al0+klqwMczp45c6bnWYXDiS972xKWBDh0dnR0cLyocGjYUOkkMxci
z/MKqn46xPyZb6DmT4a4R+19hcOOx2tK/SdA9Ht8grq/D2r/NwQf7N6fCP77
d+/e8f2tcFhxaXbKvn6IeWwMleDwdZsU4KAEBEzMlWD3PZgCMe8BK1R+BoS/
ABZ+cyD8Bu5KSPiXQe0Hyt9gPT/9Y0GAw727d+/KskDkJ+dA/HPzP9Q/GVD/
/Yb6JxUant+h7k2G8CU/I/gg/5S/RfD37AYCYPgVzM8w7E6D+OfZE2h6AtoX
CgSiDyHh/aAIGt73oOFbDXHvgdtQ97RBzb8Jdc8kSPxdvA6N//mQ+DkDTX+T
10PMO3EVGp/7IfaD0jdY/QUEHzk9Iad/AADsX6E=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKG0MAuaVDie+7G17UB/oAOMLWDKdVpkA4RdbVDrs
eLym1H8uhP/ZCqI+YTlU3rbS4Qbr+emFGwMdXICgxaHSIaEvXKFqW6BDGhCo
uSD4nR0dHSfcEfxZM2fOvOmF0A/iR/oizAfL+yPsB/ElAxHug/Fh7ofxGzZU
Os3JR+gvmJ9h2J2EMH/Gwa7gtREI+0Hmn/dDuA9snifC/TA+zH8wPsz/MP2w
8IGZDws/mP2w8IW5D1f4g8NnZgCcv+LS7JR9KwPg5gXUuvG/3BYAtw+k/teB
ALh7QPZxnw6Au/eH+sedwhcC4P6B8WH+hfFh4QHTDwsvmPmw8ITZDwtvmPtg
fJj7UeKrMwAlPrhrAlDiQ7cIYT84/jMCUNNLcgBqekoOQE1vyQj/w/QjxwfI
fOT4ANmPkt47AzDCHwCQfFAZ
     "]], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGINIIaxWZDYzHRiM0D5DDQyfyTYRYwbAKERAuM=
     "], CompressedData["
1:eJxtVWtIFFEYXTUVn6uNbpomq65ZVJCIRARxkRAKoZk1sbDArMQoyH5YzkRg
/hBLsUJDLSQhMTOLDJYe9rRcohSxCCvSlsxyrbRVqVzpMXO/005JF+bH4X73
fOd7Tnz+PusuH4PB4KV++9XP20Anb1hmj6Zvl+fdFVmBeuzvZWbeILy2XRVZ
tnqej8ls1ORoLTsvst6enp6qCZmtzLV8tjeKbJ12pmVWdLYwJahWZBfb2trG
ZmRWf/9Y1orjItP4Sw2KB9/q7Oyc9dGxxp/mr7C86hyz+wTxLw9U2Pdk142a
WuK3hMC+nuxtRoWFrfZ+Ymkkfkc4vVfOiWxifHw8NEJh14fbi/suiCxBPV2R
CunvENnphoaGGRP4b4osXD0pUcTX/ID896hYPJxhdPbqmOfnpY5bn57ZuXYE
+lRcekVOj/0islT1PDMhnhnKZ3kk+HwkdrSioqJQgN5gieuRwyi+S4LE9VeH
kD/HQonn83EA/Jslyo8v8mGRuL8aA/wlE99LN9XTsVTi+TFM/x/nWel9qlvH
mt6CXzJje9N+5mwivga1Xlq9MzZLPF/9ar20/kjbKvH8pgcRtm0nfZ9CyN5e
KLGD6qlT49P4BvZR/BXz8b6E9NwTEO8RifpDrZ/WT5WV8B+J+1NzcJOOub2N
9HUIqH838TuMyG8/xSsEw36Q4vVD/ynDxHfDoGNN7+is7MGavtxvmIc34JuS
qZ8GUK9xzE8f6XGNIb/d5K/8A+yvo/4O1OcV5bPrncxe+PbVuZykv8kp83g2
foW/CdLj/gW+afgLsHJ/J93gD7VSfb0UD9b6dZ6fjrV4DgWin4KtlM9Q9Ju/
ldfv2nzYe1t5fTNNyOcs6d8SDTyJ/oml+bjjJGyPQ38MIV4z+PrRzwmYz4eo
R6LC499v0zHX06xjvm/QHzNm9OcB1DuW+IUC+I8iPlc2zddlAf7Xo39CMD/s
X6yspXq8DQNeg/mJwLyvonpMmaAvhfy9j0a8y+h9WSzis+j54PMRQ3pC48En
0LwMIB/eAeTPbIH/H7R/9ibhfpL2jbAY8Y/MwQM65v3eLbKhwcHBRUl/8kv3
qYmIv4X4M+ORn3rC7XGIr4rss2KAy4jvxwLwlYhc/4I/+7eI9nOTEfr3iHye
lgRhfxfQfs73w/0O+PfSMe/P77IHa/WJdmE/7ab9uvgj9btQjHhGaF76Sknf
NnW+uL9qsm95DXv8P/7+//0G5fsUqA==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNv0qscDKJV3rr1BjiA+VkIvgsQHMmtcjjx
ZW9bQn+AgzEQFBdUOfxQ/7hz8uQAByUQKK5ycMgx/Xd9eoDD+3fv3uWVVjkE
1Lrxv5wb4DBr5syZkeUQ844tDXDo7Ojo8KisclDwEr6zdS1E/bmqKoeGDZVO
Mtuh9ldXOST0hSv8OhjgsHrVqlVctVDzz0DMm1kLsV/4JoI/42BX8NpnCP6O
x2tKzzMFgvk7geatuDQ7xU4Cwv9ZDjVfDcK3LIG6xzQQ7L/LeVDzbQMd0oDg
WDqCHwoEW5MRfJB7c+Kh/rWA8N9EQcPHACofBrVfI9Bhz+7du38HQvVLQeyf
6Qvls0HU9/hBzMu8BwkPn0CI/8MPQPx3MxQSHw9WB4DdlxYF8U/VdIj6nAS0
+ESKXwABRvND
      "], CompressedData["
1:eJxdVGFIk1EUHYsksrIQgn4IFkIRSYlI1J+upaNitu85mpVKY+lcpTkZNnxZ
rbHmZuEfg1oGFRSImSQSZGqkxBAzhBQqyRgZEZSV0I9aFH179+QXXRjjcN+7
59xz7/vWuupLq80mk0nTf6n/Z+N6BCSNfhsKO0cErUvFGUkfVic6g+OC3Hqk
nZLkve7JuzAl6GosFmvyS3K2lWXLaUGr9Jj3AScE6SVN5AWe5fvuWgOn+Kwe
A7+ZmZmprJKknbZkHE1w/ZhT0pbynDnLNONXFZJWbjM/zZni+xcPSvq+fr4/
c0xQvh59DuBBnLcD9wi609XV1SoYt3ewnrgNOMT9mvdx/Vt1rD+7RBLVFvwu
Ewa+Mtxqv7uZ+80T7Fdih6AiPZ7sZ71xK/gPwU+HoC+f9TjM/qU7Wc/Satyv
4n42HTNwii9x4r+87m/23szXBS7uN9OPfAX790tKCtxr2nmtTNDgwMBAuT6/
zucdVY9suH8Ofhaj35CkB7PdjRPbuV5+GP3nMv/jFvSTxf2KKM8ruZz7W9MK
vp/aAlb+vDew8n9So2gkEtkQBf+wpvy3oL6ll/Oe88A3NaX3UxD7164pfZNn
wd/C9fubJb1cPHG5oVlT/Wc1YZ98mtJvagR/nab6feuFPjfzh//u4xHw1Rg4
dd3pMrBfj62V2Jca1uM7AH/qGffZoc+vqXm32TD/EPOlWZG/xHqCu1HvNuOR
YvT/kM/Hdxn+pfZlrBDz/sh6xwl4iVjA6vxGA6v3aud5/SjEvE/yvO1FuN/O
57st7Le5l/OTe3jf7o/ivZRA/zTv25DgerY57IcD/iZ5fwLl0LOoVPnR44Se
dMYr3PAvo1Sdv3HcwGoeDQZW3w8//Ern/LJm5svV6yv/A/xeXyShL4T5fcX+
R6DnHfz553v3B1mzRB0=
      "]}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{368.25, 
     93.65600000000006}, {445.25, 93.65600000000006}, {445.25, 
     61.65600000000006}, {368.25, 61.65600000000006}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{365.25, 
     211.73000000000002`}, {449.25, 211.73000000000002`}, {449.25, 
     178.73000000000002`}, {365.25, 178.73000000000002`}}}]}, 
   {Thickness[0.0016666666666666668`], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGINIIaxWZDYzHRiM0D5DDQyfyTYRYwbAKERAuM=
     "], CompressedData["
1:eJxtVWlIVFEYnbSsTETTtIUydUqzKJe00myuOo5aQ5lbq1FC9h7ZTj2ylYSc
FqUNagqjIPsxhqVUElNUBq1TtBDVj6mojIiwzfb1vXcOvIouzI/Dve985zvf
uXciyxYVzPU1mUyd1N8S9edjwpodoojxHYmbB0XJolxdF8MU0bHfO/JmP1kU
q+tuX0XM7GLdlxImi+sej2drhCLWxpSfmRosC6u2zIo4kOd4VBkgiwaXy/Vy
iCKOTXe+6eEvC41/fbyBT7vd7m9JBtb4k0cpIuz8r5J3/uAflqqIZzWe6LMB
4Den4/yWQJw/YVFERVjxka7B4H+cge8TQ2Xxur29PdCqiNb5rk6l4bKIUldr
NvWr/ex1Op1fbOSPkEWwuhJywZdjRn2PimtHKzfkIQbW/Rlh4NFPI1eGJlOf
imNvB0lVqbJIUtcdG/QstcDPjdnks8pik8PhkLKw35wLPSsF+ptgh/7adNRr
mwQ/r44Bri+gP8n0owj1dsazXgn4HsTh/Nwp8Mdk/j+un4/vk+IMrOktH6EI
v2Pt2QcrwOdMwrz3LIRft0YhH9sWw9/MNOD8ZdD3Kh3n76+QhaKu3QJ8cyrR
vyOT36+FnnNZ1FfFfFiRp1QH62dzv+Zv3LbDwPr5OuhryuL865kPC/1tQL8h
Y3m+Cf36MX+Jx8F3Kt7Amt4XQw2s6ZsRwzw1ky8aebI0cl4D6IcLet72ZX7q
mYdw5m8/5x/Efo4yr6GKuL3a3XNhC/Qf6IN+6s6wXgTn3Uo+M+tdQr3tceS/
wvkmGFjLa+cUA2v9rEplni7Tz3HUexHza8nk+QuYr91GP8/h/LQ84Gtu5seO
+1HUwvdkIt+TJvabT78amOcC+HnyEOdRiP6H1xlYz+cuA2vz+1rN+5zPfK7h
vO3gX7ec9XPp5wLcr8Ys1p/HftP5/pT9jZvnYB5PBOc/m/fHivvuOwv+vrfR
rxmo9zyP85iK7zfY2V+R4Yf+fubzvZpMPjv8vkc/PtpQb2AR62fAr4pi7K9I
Yx5KwNc7+R883MB63gfJ4qHX6+1fTH/7Mx+F7L8X5zuZ8w4EPjKR/nfD+cIJ
xL7g+5EDvsafkq4/nO+v96uE/Fqo/7Ok36fYNLy31R8k3Z+yFO53SKifYGA9
n7EG1ubTJxLvSeQnSfdzcD/o/fVdQj+9WN8H+kqDWK87/D8cwPNB8PfP/7/f
nEf+hA==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIHJpc7iB38H2b0JcPh3t27d2M7EPyzZ86cyakv
d1jg2XG/6i+E/6ai3GFD1MwP3AKZDoJAUFhU7uD1xahrqVKmgzEI5Jc7HMpe
xShri+CDzCuKR/BB5v1qROjXuCSQ4TwnE8V873WZcPtB5sUeyHQAuTehA2Jf
6slMhzQgODYZwe/s6OjQmI/glwOB+AqEfpD1k9chzAfxhbci7Afxg3cg3Afj
I7sfxEf2H0g/sv9h5oPCB2Y/LPxA7lWbjwhf9PAHALbZqvo=
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIHJpc7iB38H2a0JdMBxHeYgOArAQFTb7mDxWPF
yimbMh3SgICtq9yhTj1tb8T6TIf3796942svdziUvYpRdk2mw57du3dXt5Q7
POk9o/x/WabD2TNnzvg0QfnzMx3u3b17V7ah3CFHLHQN+8xMB0EgKKwrd1jg
2XHfagLEfLdaiPkzWiHmSdeUO8Swusz+VgWRb6uGmGefh+CD3FsUj+CDzPvl
mOnQ2dHRcQJonsYlgQxnHYR7NkTN/OAtB7H/YhvE/bECmQ4uQLCkp9zB64tR
VyonxLxjkxF8kPyTWQh+KBBsXYDQP2vmzJmWSxHmg/y7dyXCfnCAr0G4D8aH
uR/Gh/lv9apVq7JWI/wPjp9ViPAB2S+6EhF+IP9mLEeEL8w9sPAHmce1GBE/
IP2lCxDxB1JfORcRv6D4b5qFiH+Q/12mo6YX5PQDACDW/X4=
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQffbMmTNrJpc7eH0x6lrqk+mgBARMExH89+/evVvX
V+6gcUkgo9kv08EYCDb3lDs86T2jbB+U6bBnNxB0QeSZwzIdgEYyHOgsd7B4
rFgZEo3gix38H2aUhCp/JQNNfx6q+fsL0ewvRXVfanmmA7L7QfxyIAifhuB3
dnR0rJiB0A+yf8EshPkg+2fPQdg/ayYQzEW4D8aHuR9ZHuQ/FP1hqOaDwgfF
fj9U94HCFz38AR6fsd0=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{391.125, 
     202.18270750000005`}, {389.615625, 201.77333250000004`}, {390.5875, 
     200.55145750000003`}, {390.1578125, 200.22958250000005`}, {389.284375, 
     201.52802000000003`}, {388.415625, 200.22958250000005`}, {387.9859375, 
     200.55145750000003`}, {388.95625, 201.77333250000004`}, {387.4484375, 
     202.18270750000005`}, {387.6140625, 202.69989500000003`}, {389.05, 
     202.16395750000004`}, {389.05, 203.73114500000003`}, {389.51875, 
     203.73114500000003`}, {389.51875, 202.16395750000004`}, {390.9546875, 
     202.69989500000003`}, {391.125, 202.18270750000005`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvxCsd6tTT9kpwZjqA+VIIvgsQHJGtdPD6
YtSlypXpYAwExQqVDk96zyjb82Q6KIGAcqUD24Z3rol8mQ7v3717l6da6dBn
UX4uUzDTYdbMmTMj1SHmRYhmOnR2dHR4aFY6fJl31yRAEqL+nFalg8YlgQxm
Oaj92pUOYgf/hxUpZzqsXrVqFZcuxPyHGhDzZupC7P+vh+BviJr54bQpgn8o
exXjXWcIfyfQPIvHipVT/CD8n+oQ8z+FQviWKlD3xEL8d1kOan5CpkMaEBwT
R/BDgWCrMIIPcm8OP8S/L+Og7ueCyO+PgsqzQe0Py3TYs3v37t+MEPl6f6h7
/1ZA+K4Q9T3/KsDmrTSE8H0YIf5fqARRf5MVEh+pEhD3pXFB/GPEB7VPAC0+
keIXAMZH56Y=
      "], CompressedData["
1:eJxdVFtIVFEUndEcSqeaNM0yy0liLKXyPfrjgUyx+sjeWVEII/emPdDAe6IX
ETWJiZ+NQQhR2TQ4ohHoJJZJiFmE/dTH9PYvTGsUDR+de9auG20YhsU+Z++1
11l328tP7nSFmUymHeKn/78cFLGJs62hjLo7t1W2Ro8NnB2KKLz5qEVlFSIs
qZw1l7g/dPlU1uTxeLiDs7inc3vb/SpbImIsmXC7ykRJE0sCzniI+xUrDaz3
2x5v4PfBYPDwUs4anLWv7rejvsfG2XlHRfcNP/A7K2dVcXt8V324X7+As6/X
B5Mv3FNZpogOC+FmOh9O2KOyB16vt84MXNAIPs/nNIl7LmPesFlN1i/m4J80
ozFL28gWe6WB28o8o9vKMG+6GXq5ylVWKKIvAnzfKtQ/kvQ8rrLvIyIWQ78z
1eATGYv88GnMk7bCwHq/j6v+ywt9Q7eCWY01mDfGQflT0G9mPWcpQzZl8wmV
PQ4EAgfF+zm/2PnuY3Q/HfziXTRvFme9lV5z8AjqZeZA3+ID6P8kF+f3l2Le
0jy8V3UJ5lueT/2YgXV9XmQbWNd3LlVl19xud0oe9U+G/kVUPz4BeSWbcAz4
fsuA/3Ks4PdmI/W3oH5nGmdDZwPRrSbMn7iO/DStSP6mtdR/UpHzfk4ifuOK
7H/ljx9DCvotM7B+/Wi0gWtF5C4k/0wokk/NfNLnF3BHOPGbVeR7Nwh/yfef
R9/PtCbzP6zQ/9Ik/FcQC9w7rsHvq8mfP7W/+ul+GRhDPZcT+gyOAg8XGVj6
fZ+Bdb/lV0GvKXFfvvc56LkrRPXqcd43oUm9J5pI7ylN+u31XeIzQ/z90Lvb
DP8kdpI/LKRvD/xzMYr0fwb/t9rg//x+4EVxpN8AzjcnGFi+h93Acn84SP9+
5K1p6BfVR9+/2F/69/qph/hl0T7qIv87aR/Q/vl33/0Gg+5AOw==
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{415.2484375, 
     202.66083250000003`}, {411.25, 202.66083250000003`}, {411.25, 
     203.03114500000004`}, {415.2484375, 203.03114500000004`}, {415.2484375, 
     202.66083250000003`}}, {{415.2484375, 200.83114500000005`}, {411.25, 
     200.83114500000005`}, {411.25, 201.2014575}, {415.2484375, 
     201.2014575}, {415.2484375, 200.83114500000005`}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{427.55, 200.41395750000004`}, {427.55, 199.73114500000003`}, {
     423.25, 199.73114500000003`}, {423.25, 200.41395750000004`}, {425.05, 
     200.41395750000004`}, {425.05, 205.131145}, {423.6890625, 205.131145}, {
     423.6890625, 205.66395750000004`}, {424.0296875, 205.7181241666667}, {
     424.3265625, 205.78374916666667`}, {424.5796875, 205.86083250000001`}, {
     424.8328125, 205.93791583333336`}, {425.059375, 206.0301033333334}, {
     425.259375, 206.13739500000003`}, {425.86875, 206.13739500000003`}, {
     425.86875, 200.41395750000004`}, {427.55, 200.41395750000004`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQbQwCt6scnvSeUd6vl+mAzLdXznQAKmFouFvlwLbh
netDyUyHWTNnzpR8VOXg9cWoa6kQRP3mZ1UOfRbl5zK5Mx06Ozo6XrypctgQ
NfPDaXaI+p1fEHyQ+uA/CL4SCDBVO9Spp+2VAOpPAwI1tmoHsYP/wzYJZjqs
XrVqlRZXNVi9t0Smw9kzZ87o8FQ7XKrZLfROAcEH6Z+hjcY3ynS4d/fu3Vju
arB/6i0g/jnACTXPFmofB9R+J4j7PrNCzNdzg8ozQ9R3e0L8E8kAcd8nn0yH
9+/eveP7W+WwwLPj/i9/iHq3n9DwCYLYX/u1Cmx+RCjEfTkfqyDmR0DsE34L
Ua8anekgCAQfn1c5HMpexTgXqn7NY0j4J8LMf1AFtr/II9PBBQie3Kly0Lgk
kNHsiIg/sPssUOMTFL8AZYbaVg==
      "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQZ/qxye9J5Rtk/PdLh3FwhYqh0OZa9inFuc6XD2
DBBwVEPkGxF8ry9GXaoTEPw69bS9EbMyHQRBgB0i/3RRpsOsmUDAXO2wIWrm
h9MrMx2UQICh2mGBZ8f9XRsyHcqBQPx3lYPYwf9hRlsg6iu/IPjGQHD5HYLv
AgKvqhxiWF1mm22E2v8M6v7VmQ6hIPC4yiFHLHSN+1Ko/Q+rwPZ7z0XjT0bw
2Ta8c1XshZjn86gK7P+77RD7Nz+GmF/fDAkf2adQ9fVQ/z6H2l8N0d/zsgoc
HjfKMx06Ozo6ON5Ugf1bVZLpsHrVqlWv3kHcX1YIMd/4E8Q9p/MyHUDR0fAV
an4OxH2SPyHumZsJkUeOLwDA+NJk
      "], CompressedData["
1:eJxVVGtIlEEU3TRfJet7NUpI7Y1/0gIjqsG2h1pUipphVIbLTi+hH0rfBxoU
uSUFYYEmhEVWWJhZRFEiZuiPtjI1H9X6KIuE2EQ2SAVtvjlXBy8sy+G799xz
75mZmLyC9Hwvk8mULX7Gf6IRHzRWvNLWGBXP2Qy+klT0fnUiZ0UiegTO9bFW
FW7gTJSYln7U2PBlZ9z0Zs4uOhwOe4fGTlgyH5ZaOfvjdrvNXYRTwBfWTfm7
wRfZC1ySTvWfNZbqSbiUn8WZTYSvS2OW5umshhzOrCLuDFB9Lvqf/QZ9I4c4
u1Ep4gfyT+cpbOQ3HUX9/CGNJX2PORPOaT7B71vv3narAP1WzPQv4qzf5XJF
99D8JcT3ifQ6FJb55Qqv6gi2b61C/cFu8B+5Df6fPaTnPvZzqg/1yx9R/Rfg
mqfIt/Ujf8sL0jsEf3obaf5h6OPNnL1zOp27fmH+sRbwLfoNPedaMb91VGP1
BypH37Yh3+lR2Pj8Znzu9/gp8ruV/PDS8b0F/Qd9dDlfTDPqlwXo2Ecj9HYu
1KXeiueov2Cm+iecZYq4HqzL8+FXBz5TKL6n3aP9hFF9NfkTrjPPTde6vZUK
S7+vKiz3Uwp8V/AZfncVEw4ifYWcPagVEajjPJ3kLETEvgDwt9vIDx/iOzwX
V4jz9uqlCD/iz8X59V9A+TnkTyD61WQhf9JMejNoXyHUbw/4x0OhpymN9ifm
Mfb/bAdnsSKSLTqrTnEMTCRjnu2R2FfZJsyTGqWz18dr50Unkb8CG/63rFVY
nt81Ckv9sdQ/EvoaFqN/hgXzREVgP4/D4VepGfc3OxS4zZ/0BNH83vB3fSD4
xqbsUt8xf9I3acd98Eb+/n/Atmncz2t/7XJfGydwnhM89N2jsHE+6twKG/s8
P6LqJf+wNstv+LNzUJvtb+wz7yu9J0KfvF99hL3Jz268X34B2Ed5J90vM/lD
719TBL1v7bg/ZUvU+yn54hSeeV//A0J2bpM=
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIHgqsdxA7+DzP6kuFw7+7du7EeCP7ZM2fO5NhX
Oyzw7Lhf9RfCf2NR7bAhauYHboFMB0EgKDSqdvD6YtS1VCnTwRgE9KsdDmWv
YpS1RfBB5hXFI/gg8341IvRrXBLIcJ6TiWK+97pMuP0g82IPZDqA3JvgAbEv
9WSmQxoQHAtG8Ds7Ojo04hH8ciAQz0DoB1k/OQ9hPogvXIqwH8QPrkC4D8ZH
dj+Ij+w/kH5k/8PMB4UPzH5Y+IHcqxaPCF/08AcAEMWlHg==
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIHgqsdxA7+DzPakukA4jsEIPhKQMDkW+1g8Vix
csqmTIc0IGDzqnaoU0/bG7E+0+H9u3fv+NyrHQ5lr2KUXZPpsGf37t3VLtUO
T3rPKP9flulw9syZMz5OUP78TId7d+/elXWodsgRC13DPjPTQRAICu2qHRZ4
dty3mgAx380WYv6MVoh50jbVDjGsLrO/VUHk26wh5tnnIfgg9xbFI/gg8345
Zjp0dnR0nACap3FJIMNZB+GeDVEzP3jLQey/6AZxf6xApoMLECzxqXbw+mLU
lcoJMe9YMIIPkn8SheCHAsHWBIT+WTNnzrRMRZgP8u/eTIT94ADPQbgPxoe5
H8aH+W/1qlWrsrIR/gfHTxYifED2i2Yiwg/k34x0RPjC3AMLf5B5XMmI+AHp
L01AxB9IfWUsIn5B8d8UhYh/kP9dwlHTC3L6AQD+ufTS
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQffbMmTNrgqsdvL4YdS31yXRQAgKmQAT//bt379b5
VTtoXBLIaPbLdDAGgs0+1Q5Pes8o2wdlOuzZDQReEHnmsEwHoJEMBzyrHSwe
K1aGRCP4Ygf/hxklocpfyUDTn4dq/v5CNPtLUd2XWp7pgOx+EL8cCMLDEPzO
jo6OFREI/SD7F0QhzAfZPzsGYf+smUAQi3AfjA9zP7I8yH8o+sNQzQeFD4r9
fqjuA4UvevgDAHh8rAE=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4rNnzpzJKSx38Ppi1PX0TroDUIhBYSYm/0nv
GeV6LQT/Us1uoXdy6Q57du/eXT2r3IFtwzvXhWLpDsYgMLfcoU49be8MwXSH
1atWrXo1v9zhy7y7JhN4IPoXLC532BA18wM3F0R98AoEvxwIpq9B8O/dvXu3
dmO5g8YlgYxmoP40IGDbXu4gdvB/WJEghJ+2C+q+v2kOSkDwaBvUfb/SwOZP
3gyR3/8jzWHWzJkzKzdA9H/6lgZ2T8LacodD2asYZb+mOQgCwcaVEHmjL2kO
4PBZiuCD/Cs9F8EH+e/UtHKHPovycy9h5k+C+D+CKd2hs6OjQ6Ov3CFHLHTN
cW6I/xl6IOFxQRLBB/tHB8EHhX/q8XQH5PhB54PiBwA+FMaX
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGBwBWIQbQwC58sdnvSeUa53TXeA8TdEzfzgHZTu8P7du3d+
F8odNC4JZByOTXdIA4K2S+UOXl+Mup6mpzvcu3v37t4r5Q45YqFr2IvSHc6e
OXNmzfVyh0PZqxjnVkHMC74NUb+0EaL+771yh0s1u4XWdUDM13tc7vBl3l0T
gT6I+c+eQ+w/PTHdQQkIFr2BmN8+Nd1hz+7du6s/QsxLnQ4xv/gbgl8OBN9/
I/hg8xgqHPosys+tBOoHepnBgbXCQezg/zCjSekOs2YCAWcFxH9A+zs7Ojo8
eCsg/uuE+MdHoMKhTj1t74zmdAdBIAgUrnCweKxYGVIL8c9c0QqIe0uh4Sde
AQ7P/zkQ/WckoPalQO2ThPCLohB8kPr9/gg+yDxuXwSfbcM710QvNPXuCD7I
vaquEPfUQvlPnSD+d4Oq/+8Adc+dcgw+KD7yLCD+m3gXIr/fAGK+5P1ysHs/
aULMW/YAEr6qyhD5nY/KIeEhC43vp9D0JAEx/81ziP5NwpD4ZHpd7rDAs+P+
L36I+snvysHhG8Gb7uACBCqfyh1iWF1mb+OC6OeBxS8nND5+Ifgg/979h+CD
4o+DuQJF/xm2Crj5oUAwlasCbv/qVatWefFB41cY6l5BaHxB3d8jBgm/ejZI
+touVAFOrxMYIekxGqgflD7d/6aBw6OSExL+S3+mgeVns0DSF/O3NIj7/kPC
w+hLGjg9HviB4IP8z/IZVX7BW2j+AOoHh9cLaP4Amg9yf9djaP74C9Gvch8S
njeYIOk94TY0Pjkh7p19HZr/BKD5C5h/QflDUxKany5B7VeG5gdo/nfWRZQP
4Pi0QPBh5QcAXkb8Nw==
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmEPBWOIgd/B/2KTjdAYWflO4QCgRTuSscYlhd
ZpflpTucPXPmTA97hcOT3jPK9WXpDp0dQMBc4ZAjFrqmvQ4i/+ZvucOGqJkf
upsg5u38huCvXrVqVddnBP/e3bt3az+UO2hcEshobkx3MAaCyW/LwfYX1UPM
W/Oq3IFtwzvXxNp0h/fv3r3je1HuYPFYsTKkCmr+U4h53kD3uABBymMovwii
P+dhucOlmt1CebkQ8y/fh5i/KR1iv+29crD/viVCzNe7C7UvOt0hDQiW3SnH
Hj5APgCKL6QN
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4lkzZ878WVPhsCFq5gfuI+kOaUBwrLLCweKx
YqXI8XSH9+/evTtXBuWfTHcwBgLhEqj6U+kOe3bv3h1dWOGgcUkgg/l0usPq
VatWeeVVODzpPaNcD+QDrWB4kIXglwPB9WQE/+wZIIircGDb8M714XGI+gPR
FQ5eX4y6lh6AqN8eUeHQZ1F+LnMnxH7j8AqHOvW0vRHrEXyxg//Dihah8o2m
pDuA/HezHDt/Ux2qemQ+yH/eP9LA7nHwwuSD3VcPcS+DCSYfZh9MPTZ+0cJ0
VPO2pDt0dnR0nPCpcMgRC13DfgTq3kCIf2ech4TvqzCoebfTHUKB4GocJDz/
P4Con5mJ4IPM8yhE8MHhWwHl34W6twHKvw7Rj5weACPc7Ro=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4jQgcFta4bAhauaH07XpDsYg0I/Jr1NP2xsx
CcKfvAyT/6T3jPL/A+kOIPPSNmHyxQ7+DzOaku4wa+bMmZU3sPM31aGqR+cX
mSD4bBveuSbqpjuUA8F2ID+G1WW2mTrEvMjNEPWfFNMdGEBgC0R+m0y6gyAI
bK1wyBELXeMuke5w9syZMz3bKhy8vhh1LRVJd+js6Ojg2FHhoHFJIINZECLP
swuqng9i/sw9UPfwQNyjtr/C4VD2Ksa5XBD9Hoeg7ueE2n8MwQe79ySC//7d
u3d8ZyscLB4rVoZwQcxjuwAJ3xnc6Q5KQMB0GeK+pzwQ8x5chcrzQfgLYOEn
AOE33IaEf/3fNIj9QPlLNbuF3v1Kc7h39+5d2SsQ+f0/0sD+uXkeGl7fIPyZ
pyH+kf0K4Uceh8bXFwhf8jCCD/JP+V4Ef89uIACG3wLPjvu7gPpB/nm2BZqe
gPaFAoHoRqh/fqdBwnsdNHwZIO4/sBrqHlZIeJWvhIYvNyT+Li6Hxr8QJH7O
QNOfvRQk/E8shZivqgQJT1D6Bql/qIXgI6cn5PQPACyUXUs=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKG0MAuyVDl5fjLpSm9IdYPwcsdA17V0QfjFHpcOh
7FWMshMh/M9cEPWq06DyvJUOl2p2C+nNTndwAYIWgUoHsYP/wzbNTXdIAwI1
EQS/s6Oj44Q4gj9r5syZN6UQ+kH8SFmE+WB5eYT9IL6kIsJ9MD7M/TC+xiWB
DOcqhP4Fnh33dxUjzN8QNfPD6TyE/SDz72Yi3Ac2Lx3hfhgf5j8YH+Z/mH5Y
+MDMh4UfzH5Y+MLchyv8QeFjxI/gWzxWrAwRR5jXZ1F+7qUswj6Q+k9KCPeA
7PuljnDvk94zyvVaCP/A+DD/wviw8IDph4UXzHxYeMLsh4U3zH0wPsz9yPHF
zo4aH1UMqPHR/TsNbj8oPJZ+S0NJL0Zf0lDSE4iPnN5AfJj/YfqR4wNkPnJ8
gOxHTu8g96GHPwCsgEQq
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{415.55, 184.41395750000004`}, {415.55, 183.73114500000003`}, {
     411.25, 183.73114500000003`}, {411.25, 184.41395750000004`}, {413.05, 
     184.41395750000004`}, {413.05, 189.131145}, {411.6890625, 189.131145}, {
     411.6890625, 189.66395750000004`}, {412.0296875, 189.7181241666667}, {
     412.3265625, 189.78374916666667`}, {412.5796875, 189.86083250000001`}, {
     412.8328125, 189.93791583333336`}, {413.059375, 190.0301033333334}, {
     413.259375, 190.13739500000003`}, {413.86875, 190.13739500000003`}, {
     413.86875, 184.41395750000004`}, {415.55, 184.41395750000004`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQbQwC0lUOT3rPKO/XS3dA5tsrpzsAlTA0yFY5sG14
5/pQMt1h1syZMyWVqhy8vhh1LRWCqN+sVuXQZ1F+LpM73aGzo6PjhU6Vw4ao
mR9Os0PU7zRB8EHqg20QfCUQcKpyqFNP2ysB1J8GBGpuVQ5iB/+HbRJMd1i9
atUqLS+Iem+JdIezZ86c0fGpcrhUs1vonQKCD9I/QxuNb5TucO/u3bux3hD/
1FtA/HPAE2qeLdQ+D6j9ThD3fXaFmK/nBpV3hqjv9oT4J9IB4r5PPukO79+9
e8dnW+WwwLPj/i9/iHo3S2j4BEHsrzWFmB8RCnFfjiHU/AiIfcK6EPWq0ekO
gkDwUb3K4VD2Ksa5UPVrlCHhnwgzXwFif5FHuoMLEDyRqXLQuCSQ0eyIiD+w
+yxQ4xMUvwA1vM7M
      "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQa2VQ5Pes8o26enO9y7CwQuVQ6Hslcxzi1Odzh7
Bgg8oPKNCL7XF6Mu1QkIfp162t6IWekOgiDgDpF/uijdYdZMIHCuctgQNfPD
6ZXpDkog4FDlsMCz4/6uDekO5UAgbl3lIHbwf5jRFoj6ShME3xgILush+C4g
oFXlEMPqMttsI9R+Naj7Vqc7hIKAcpVDjljoGvelUPsVIfZ7z0XjT0bw2Ta8
c1XshZjnowTx/912iP2blSHm1zdDwkdWFaq+Hupfdaj91RD9PZqQ8LhRnu7Q
2dHRwaED8W9VSbrD6lWrVr3Sg7i/rBBivrERNHzy0h1A0dFgCjU/B+I+SUto
fGRC5JHjCwBEesQl
      "], CompressedData["
1:eJxVVFtIVFEUnbLMfkxTR00tx0dpSJQaaJEedExHJx+jzmgYleFc7SX0oXQ/
NChyKgrCAk0Ii15YmD2IokTM0I+miArqZyoogn6mCINKyM69a8nBDZfL4uzH
2nvtc2zN7a6WhRaLxSM/459j2DJddK3xjsZlaWIOn8nrfJmZo4lOae8kblps
H+jI14QMsSRH6uLLaX/qbIEmTvh8vtbluthvrb/VY9fE92AwGB5N7EC+KCv9
tyFfbBxwt4vxK3RRPp19ssWtCa+00CRdWMdn3XcbNWGXdmUV45tQ/0gK+H3b
qYkL/dLS4X+oWWHDf2wP4hfZdJH32XY4uo39yfyhI8GSS+2ot3qufqcmPgQC
gaRY9t/NfDHk61PY9O9VOON1RGvxAOJ3WJF/92Xk/xpLPjcwn4PxiE+/zfgE
4Kv34e9dCf/CR+Rrgz7vR9l/Gvi1jWvihd/vd2ag/58TyBefBT5HJ9G/fb0u
Rrb3/3g+BX9/rsLG8bP8+edZBdR7knoU8XwC9T+VoD/bOOLTHJzHKPi+qQDf
voeIP17J+HuaqJd2vhr7sWQY+SwunFdc53xqGT9Ifep0MX0xkFvdr7Cp91mF
zfn0AF9zQe+3XcRV5NehiZtD0pzcpwOaiJRW40D+V17qUcJ8u+bjPrlvTx5L
K2X+JuxvWDn9G6mPk3q64T9TSb61nFcN61Uh/x8X96OC86vD/B+UaiJFWpFb
F4MO38e/RehnqwfzOrUF/ZQ36OLpvqEFSXnUtwH6T2xQ2NzftQqb/FNY38P7
loD6tW6+BzGYz5063udw3F+PC3gqjHyq2H8I9N3o5D7+85r89paR34wX96EY
/g2/gb2F4HPul9ec1+ZNiM+e5nmuwsZ+DK9T2JjnsUwVb+ZPU/kNfcqSVX1j
ns2J1F/yM+9XPHEI9bRyP5diHr1R7Cec+vD9G4vh+xZBPRLV+2nmS1V47n39
Dx7hUn8=
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIHJlc5iB38H2b0Jc3h3t27d2M7EPyzZ86cyamv
cljg2XG/6i+E/6aiymFD1MwP3ALpDoJAUFhU5eD1xahrqVK6gzEI5Fc5HMpe
xShri+CDzCuKR/BB5v1qROjXuCSQ4TwnHcV873XpcPtB5sUeSHcAuTehA2Jf
6sl0hzQgODYZwe/s6OjQmI/glwOB+AqEfpD1k9chzAfxhbci7Afxg3cg3Afj
I7sfxEf2H0g/sv9h5oPCB2Y/LPxA7lWbjwhf9PAHAMwjqxM=
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIHJlc5iB38H2a0Jd0BxHeYgOArAQFTb5WDxWPF
yimb0h3SgICtq8qhTj1tb8T6dIf3796942uvcjiUvYpRdk26w57du3dXt1Q5
POk9o/x/WbrD2TNnzvg0Qfnz0x3u3b17V7ahyiFHLHQN+8x0B0EgKKyrcljg
2XHfagLEfLdaiPkzWiHmSddUOcSwusz+VgWRb6uGmGefh+CD3FsUj+CDzPvl
mO7Q2dHRcQJonsYlgQxnHYR7NkTN/OAtB7H/YhvE/bEC6Q4uQLCkp8rB64tR
VyonxLxjkxF8kPyTWQh+KBBsXYDQP2vmzJmWSxHmg/y7dyXCfnCAr0G4D8aH
uR/Gh/lv9apVq7JWI/wPjp9ViPAB2S+6EhF+IP9mLEeEL8w9sPAHmce1GBE/
IP2lCxDxB1JfORcRv6D4b5qFiH+Q/12mo6YX5PQDAE44/aM=
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQffbMmTNrJlc5eH0x6lrqk+6gBARMExH89+/evVvX
V+WgcUkgo9kv3cEYCDb3VDk86T2jbB+U7rBnNxB0QeSZw9IdgEYyHOiscrB4
rFgZEo3gix38H2aUhCp/JQNNfx6q+fsL0ewvRXVfanm6A7L7QfxyIAifhuB3
dnR0rJiB0A+yf8EshPkg+2fPQdg/ayYQzEW4D8aHuR9ZHuQ/FP1hqOaDwgfF
fj9U94HCFz38ATPpsfY=
      "]}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{365.25, 
     211.73000000000002`}, {448.25, 211.73000000000002`}, {448.25, 
     179.73000000000002`}, {365.25, 179.73000000000002`}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[0.960784, 0.988235, 0.976471], Opacity[1.]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGZigIKQcofc579XfpxT4tDhmPD0gh2C/8C/d3qe
VrnDRaXbP+umlDjYcl1fXCBd7qB/V4WtsbXE4T5IngcqX1biADaPpdzh8dLZ
RxSSEHyweT5o/DtFcL7HwyqRdceL4Ob5mHc6Jmwugtv3rsbeNG5JEdw93iD5
qUWo7u2BmheCxp9SDeeX75svpb8SwVfcUJQxcW813LxDXzVi+s9Uw+1TAMnf
roa7B2zek2q4e2F8FP/A+DD/Avmw8ICZBwsvmH2w8IS5BxbeKO6dU4LqHyAf
AMnfw8g=
     "]]}, 
   {Thickness[0.0016666666666666668`], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGINIIaxWZDYzHRiM0D5DDQyfyTYRYwbAKERAuM=
     "], CompressedData["
1:eJxtVWtIFGEUXdMys6Q0MO2BSS/sYbUovsCvNKWyp4ovrFVxNV9rfqOjKGWa
tj0pKmLrjwQVmQUhFmVFiCjUGohIlq0ulq+yFRMplayZORcmoQ/mx2HunHvv
uee7szrVcDjdXqPR2EnPcemZo8HRhYnMQ6zM3PeDM710WiJElmfueuk9ylms
dDr3iOz2H+ex2BHO2sxm84UDIqtfvHLO4DBn4fKJEVnz6i1uxYOcPaitrf2a
ILKo2ie32ABnMn+5TsUvGhsbp9NULPP7ZYjspGX4Xf0A+DdliWwg7KDfzUHw
r8lFfPkQ4hsMIvMxXit5NQx+63F8H/2Ns1GbzeYiiKxze+iaYaleb+k0FaL+
ThtnN00m02QR+D3HOFsinW3F4DsyjvxmCQeb7pwbnVCxrE/bLxVftk31Nk9T
fRKery+IK5vhTCudjiLUM64RFD2rC8FnsBfYWaPRmMnx/upcQamnJB/96RwF
pf5Luci32UlQ9HxzDPjiAgH6pJMezoKS76oOfHwh+D4kIv67hJUBx/wfL3LH
99pEFcv16o+K7GdMSsR5d/CZ0jDvM8sERa/2DPijwkNQ9N2ZDdznifpGchF/
b4XAROncyAdf9ir0byyg771Qz2tO9XkL8IcAP8WvpfyF9H79bPzQR8VyfJcv
6nvMaf5a8FsN0Mvqj37dcig+EP3OI/9FB4PvmU7Fcr1DSSqW60uKo/sQRHzR
8FNiAM1rP/pL9Uc9Y3vIP1ryQyT5eyvNn9G8A6FnU7jIkhtb68ZCUH/NbvTj
xCjfAZr3TuKLIf3Dke9KIvk7guabomLZrw56Fcv9lGaRn3aRnnm0D8Ixv6cF
FB+G+UYVkV93ID6hBNgrlPxThvvxJQS45QTtkyDqtxx8H/3JzxXQ8zrpM68S
/bf7qljx/0YVy/MLIH9MlsNvjuQnaxn4p5ZT/mLS0x336xGn/Eup31zaP66z
sZsr5tGXT/NfQvdHwH0PWQx9x4tovi7IN1BC81+E7yvKqD9nVQ+53gwn1ONy
ivgcofd70qPBAfm8TiN/hx30yqnC+wnaN27V4Gudno0jf6lY8bu033osFsvK
KtJ3FO+1leDX0n6POkX+HAKuO0H69yM+upT2xWfw/RbBd8XKlfrdaf/e78F+
rjGQfhau3KcN2di3M93Yz6l6et9N+VNUrPgzXsXyfDwOYZ+8/YT/1bq9qPd5
L/Wzi/L3ob5kRvn6EX83hOLp//Hv/+8vdIMc0w==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIHDpc71N99eS74drHDvbt378buQPDPnjlzJmd9
ucMRRT3hH/ch/Dcryh18Vm2b7fCy2EEQCAoXlTtIljdn9H4qdjAGgfnlDleN
7FVO/kfwQeZ9FiiB80HmWSiVwPVzpBWFx+iXoJifYFECtx9kXqZjiQPIvQk7
IPa9dS1xSAOCY4cR/M6Ojg6N8wh+ORCI30DoB1k/+R7CfBBf+CnCfhA/+AXC
fTA+svtBfGT/gfQj+x9mPih8YPbDwg/kXrXziPBFD38AtV2uxg==
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIHDpc71N99eS7YusQBxHc4gOArAQHT3nKHCe9+
3W+xKnFIAwK2XeUOmwVkmZ5blDi8f/fuHd/2coerRvYqnuYlDnt2795dvaXc
4ZlzgOkukxKHs2fOnPHZBOFbGZY43Lt7967shnIHrY4plft0SxwEgaBwXbnD
EUU94QhNiPluayHms6tAzJNeU+6w6D/3x61yEPm21RDzoiQQfJB7Pwsg+CDz
LJhKHDo7OjpOAM3jSCsKj/leDHePz6ptsxM+FIPtv7gN4v7Ml8UOLkCwZE+5
g2R5c8bbp8Vg844dRvBB8k9OIfihQLD1AkL/rJkzZ1peRZgP8u/emwj7wQF+
B+E+GB/mfhgf5r/Vq1atyrqN8D84fm4hwgdkv+hNRPiB/JtxHRG+MPfAwh9k
HtdlRPyA9JdeQMQfSH3lWUT8guK/6RQi/kH+dzmOml6Q0w8A6Wj+5Q==
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQffbMmTNrDpc7SJY3Z/SylzgoAQHTQQT//bt379bt
K3fgSCsKr+EocTAGgs17yh2eOQeYRnGVOOzZDQS7IPI2PCUOQCMZDuwsd5jw
7tf9J3wIfv3dl+eChVDll4ii6ZdANV9KCtX+P9Ko7nsrU+KA7H4QvxwIwo8h
+J0dHR0rTiD0g+xfcAphPsj+2WcQ9s+aCQRnEe6D8WHuR5YH+Q9FPw+q+aDw
QbYfFH7I7gOFL3r4AwAhXrMI
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     394.2484375, 319.80796100000003`}, {390.25, 319.80796100000003`}, {
     390.25, 320.17358600000006`}, {394.2484375, 320.17358600000006`}, {
     394.2484375, 319.80796100000003`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNv3CsdNgvIMh1/WuwA5nsh+C5AcMS30kGy
vDnD91mxgzEQFAdUOjxzDjCNel7soAQCwZUO30MS3bJfFDu8f/fuXV5opYP1
zKVd718WO8yaOXNmZDjEvOevix06Ozo6PCIrHfLO3Nj76C1E/bmoSgeOtKJw
mw9Q+6MrHervvjz3+VOxw+pVq1ZxxULMX/0VYt7MWIj9u34g+D6rts1W+IPg
XzWyV9FkLgHzdwLNm/Du1/0WDgj/ZzjEfGMeCN8yBOoe/hKw/y77Qc0XLHFI
A4Jj7gh+KBBsdUbwQe7NsYf4d70AhP/GCiI/iw8qbwa1H2jfnt27d/82hMj/
grpnpi6UzwxR36MHMY//FyQ8fAwh/u/+BPHfTVNIfOQCww/kvjQriH+CX0DU
5zigxSdS/AIAupr15A==
      "], CompressedData["
1:eJxdVGtIk2EUXqPsppKNLBNhSystp6x5aTPzmLqiJGYmKy81ZU4NKuj7wN5+
VBTEkq5U0OyPCBEs688oqCVEiFJZfyTo4tQuJF1YWD8kSer7vufkFx0Y4+G8
73mec87zvZamgzuajQaDwa381P9ng0p4BaW0n2xNsMu0Qo09grp/L5y4ki+T
X4m4OkF9lhzT1UKZOoPBoPAIOhb99NzkkClJiYlq4EtOmZSSBnIDVxfhvr9S
xypf5RYdj0Sj0YZyQUXB6x3nnagfJEHhRWnGuQ7gVxsErQlcFkcLcf+MQ9DH
Mnf+VJ5MdiXCBcBHbHzeznmrTDdDoVCHDbg2C3r6c4E709GvMQf1R9Kg32wV
NLmz0fU0WceVobvXvIno12bDvPYvlqlcib586L2xhPmdPM9lMn2LKVGC+R1e
Dj0LKpC/lYp+srfqWOUb2/5fXpnvgcGXvcZU9GvycD4F85uuFTTPf8hTr/A9
iEQidcr+LsSmRn3JfL8R+gZM3K9P0It1JRlZSahn93P/CeB/2ILz4/PRb1Ub
9vVjDvpL2cd8s3Sszsf8S5rB6nydkxKdDgQCmW3M/13S5u/i+gMx5FubGX+W
NL1fm+C/mnFJ0ze0F/zSB9S/Vy+oITLQc/GtpPWftpv9NCpp+g014L8flbR+
37lZ3zD4T/314xvm26xj9bp3k47blSgsZv8MQ4+0HnpbRoDDdtY3Jmn7PpeL
/Zx9D764bOTD49BzIhP1Xn8BfrSS/T6B8/3p+vxUvzyxsN+moXfQzPufLc9g
ze/xOlb9tmsp9vPTwvs2Y9/VGVxvNc73rMK87+QgP5QFv3Xn8fdihX67A37r
taHe42L2RwHPtxT+OV7E+svg/9vEeiqAE108PxfOd23TsbaPKh1r74eH51+B
fHw9+KiMv38vvte1pazPx+/RRvZ/K78P/P78+979AQHXIxE=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{418.2484375, 
     320.73764850000003`}, {414.25, 320.73764850000003`}, {414.25, 
     321.10796100000005`}, {418.2484375, 321.10796100000005`}, {418.2484375, 
     320.73764850000003`}}, {{418.2484375, 318.90796100000006`}, {414.25, 
     318.90796100000006`}, {414.25, 319.2782735}, {418.2484375, 
     319.2782735}, {418.2484375, 318.90796100000006`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVF1IlEEU3bYfTPuT7aEl9kGJDUox2xSzH2+6BJUPFUlQBBYk9aLUNyBO
QUJBaxQE1sMaFfSjta0UhqVoWuIabbtbWotlru5DZIZuhIRYlM18Z2KwLszD
Ye537rnnzv3SDlXsPjzbYrHMEqdQHKs4LhnXOdkrTx8JfzSovU1EA6eksuN7
T44ZdM/n822/zym6tmDF0QmDxCeWeDOnU7HRSO2UQXVer7eqnVN56N2TrmmD
0kVYuzht8N4+VzGX4b6H06einTl1yYxKRHwPcrqY+DHcvZiZ9fZHON2YTvl2
eSmjcCgU8r+GnoV2RkOxWOxXH+rXOBiViXC+BR5N01jmZzo1ntxzcGtKhuLv
A390De57Isi/sI5Rqojsl+DblsfMfn0BTg+XOKwr8xmZ/nTMxEarxjI/Wfkx
kYd+px4o/lz0M+ZX+aKeW8ZdTsW+R1com5l+Wurhz0Am+GuvAe/Lgf7lN5Uf
+cA/xXwOtD33925S+hrB30CMviYSifIm8FcXod/6Fnw/7oa+950aS/1fujWW
/CdeoB+XG/rPh8H3tBDzuNqL+ru2oL4tCr93FKh++8HXuFH5PQA+m9BfKWJy
UM0vF/1XD6n5uRjVeDyepDj4j2WBLxTH/EpWa2z65dRY5qem4/s7w5xWeS5V
bXaAvzQG/aXLlJ8f4NdZG/I/9+M9nlmk9L5R/s/HvG69wnvOmgP9j4NqX35j
HywB5ZfYB6mnuFO9d7Evkm9eq5rXOO4zmpT+EezP+maNzffaorH5Hto0lvMK
dmhs+vlsJp89oLGst2Dkf2zOexD8f/f/Xyz/B38AHKHxhA==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
      1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
      0}}}, {{{434.95, 320.207961}, {434.95, 322.24546100000003`}, {434.95, 
      322.42358600000006`}, {434.95, 322.617336}, {434.95, 
      322.82671100000005`}, {434.95, 323.036086}, {434.95, 
      323.22983600000003`}, {434.95, 323.40796100000006`}, {434.85, 
      323.25066933333335`}, {434.7427083333333, 323.0912943333334}, {
      434.628125, 322.929836}, {434.51458333333335`, 322.7683776666667}, {
      434.4046875, 322.6090026666667}, {434.2984375, 322.45171100000005`}, {
      432.5625, 320.207961}, {434.95, 320.207961}}, {{436.709375, 
      319.54546100000005`}, {435.7296875, 319.54546100000005`}, {435.7296875, 
      317.80796100000003`}, {434.95, 317.80796100000003`}, {434.95, 
      319.54546100000005`}, {431.65, 319.54546100000005`}, {431.65, 
      320.09702350000003`}, {434.85, 324.21421100000003`}, {435.709375, 
      324.21421100000003`}, {435.709375, 320.207961}, {436.709375, 
      320.207961}, {436.709375, 319.54546100000005`}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4rNnzpzJWVjuIFnenLHWv9gBKMSgcBKT/8w5
wLTqWxGcH7v7+JqNH4oc9uzevbv6VLnD95BEt+43RQ7GIHC23GGzgCwT+6si
h9WrVq16db7cIe/Mjb1NzyH6F1wud/BZtW22wzOI+uAbCH45EEy/g+Dfu3v3
bu3DcgeOtKLwGqD+NCBge17uUH/35bnPLyH8tFcQ9/26X+SgBASPnkHddw9i
/uTHEPlZd4scZs2cObPyAUT/5jsQ9yTcLXe4amSvcvJ2kYMgEGy8CZEPBvLB
4XMVwQf5V/osgg/y36lj5Q7WM5d2rYeZfwji//RHRQ6dHR0dGvvKHbQ6plTK
Qf3PsAcSHkrvEHyQecXfEXxQ+L91KXZAjh90Pih+AA0J1C8=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGBwBWIQbQwC/8sdnjkHmP5iLnaA8X1WbZudwFXs8P7du3d+
DBUOHGlF4TICxQ5pQNDGVOEgWd6coSta7HDv7t27e1kqHLQ6plTaSRU7nD1z
5swa9gqHq0b2Kp1yEPOCuSHqeZUg6v/yVTjE7j6+ZqIqxHw94QqHvDM39jpp
QMx/Jl4Btl9Bq9hBCQgWyUDM/6dd7LBn9+7d1YoQ897qQMwvVkPwy4HguzaC
DzbPoMLBeubSLn4gH+hlBgfTCof6uy/PBQPNnzUTCCwh/psDtL+zo6PDwxbq
PzWIf3wcKhw2C8gysSsXOwgCQaBzhcOEd7/uP5GH+GeuK9S9MtDwc68Ah+cu
cYj+Mx5Q+4Sh9nlC+MV8CD5IvRQngg8y7wA7gv89JNEtmw1NPSuCD3LvWWaI
e2qh/LVMEP+7QdXvYoS6hweTD4qPwr9FYP9N5IXIz/pZBDZfkh/iXuNvRWDz
lglA7fsEkd8pBA2P90WQ+BaF6K96WwQ2/404RL/w6yJwfDJJVzgcUdQTtngJ
UT9ZDhK+z58XObgAgYpShcOi/9wfpz6D6OeBxe9TCN9HC8EH+feuHoIPij8O
Y1T9Z8wQ5ocCwVQrhP2rV61a5WUHjd/XUPc6QuML6v4eN6h/nhSB09d2J0h6
ZXpUBE6P0XaQ9HnvPiQ8Ki2h6f0eRH62CSR92dyBuk8fav7tInB6PKCB4IP8
z6KMKr9AFpo/7kDDSwKa3u5B3N8lDM0f96Hhxw/xz/JHEP0J3ND08gzqHnZo
/nsJiY9FLJD8cf4txPxiJoj9lz9B3OsBzf93vhfByweQ/OS/CD6s/AAAbvnq
0g==
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmENhWONTffXnOmLvYAZm/WajYIRQIplpXOCz6
z/2xVKLY4eyZM2d6zCscnjkHmFbJFDt0dgCBcYWDVseUyjoFiPwb3QoHn1Xb
ZjcoQczbqYbgr161alWXMoJ/7+7du7UKFQ4caUXhfxSLHYyBYLIsxP7PUPPW
SFU4fA9JdHstX+zw/t27d3wSFQ4T3v26nyIHNV8UYl4C0D0uQJAiDOVLQfTn
CFY4xO4+vuajOMT8y/wQ84VFIfbb8kH8ZyoEMV+PF2ofX7FDGhAs48EePiA+
APlsmuA=
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4lkzZ878uabCwWfVttkOzsUOaUBwbGWFw4R3
v+4fcSl2eP/u3btzy6B812IHYyAQXgJV71bssGf37t3RCyscONKKwvcA+atX
rVrlNa/C4ZlzgOkvIB9oBcODWQh+ORBcn4zgnz0DBH0VDt9DEt20XSHqD3RX
OEiWN2f0OkLUb++ocLCeubTrvS3EfuP2CofNArJMzy0Q/Pq7L88VG6Hyg7WL
HUD+u7kcO3+yAqp6ZD7Ifwl3i8DucajC5IPcx6sIcS9DCiYfZh9MPTb+Z8Ni
FPN6rYsdOjs6Ok7UVDhodUyptHOGurcR4l92T0j4vmqD6L/sV+wQCgRX+yDh
uSsQon7mTAQfZJ7HQgQfHL4rIHyrAKh7N0D5vhD9yOkBALu66BM=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4jQgcLta4eCzattsBYViB2MQ2I/J3ywgy5Su
BeFPvobJf+YcYLrLsdgBZF7aI0x+/d2X54K1ix1mzZw5s5KjEit/sgKqenR+
8e8iOP97SKLb6+9FDuVAsB3IX/Sf++PVL0Vg8yIfQ9QbfypyYACBJxD5qe+L
HARB4GmFg1bHlMq4t0UOZ8+cOdPzrMJBsrw5o/d1kUNnR0cHx4sKB460ovA9
LyHyPK+g6l9AzJ/5Buqe5xD3qL2vcLhqZK/S+Qyi3+MTRF74GdT+bwg+2L0/
Efz379694/tb4TDh3a/7Kc8g5rExVILDlx1ovhIQMDFXgt239jnEvAesEPn2
FxD+Alj4vYTwG7grweH/6z7UfqB87O7jazbeK3K4d/fuXVkWiPysuxD/3PwP
cc/mO1D//Yb45+RtaHh+h8YflC/5GcEH+af8LYK/ZzcQAMPviKKesMQdiH+e
PYGkpwVA+0KBQPQhJLx170PD+x40fB9C3HvgNjT+nkDNvwlxD+dzSPxdvA6J
/+xXkPg5A01/Ue8g5p24CjHf9xPEflD6Bqlf/Q3BR05PyOkfACEcctk=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKG0MAuaVDpLlzRm5SsUOML5Wx5TKOjUIv9ii0uGq
kb3KSU0I/7MVRL2vDlTettIhdvfxNRf1ih1cgKDFodKh/u7Lc8IGxQ5pQKDm
guB3dnR0nHBH8GfNnDnzphdCP4gf6YswHyzvj7AfxJcMRLgPxoe5H8bnSCsK
j5FD6D+iqCcsIY0w32fVttkLJBD2g8zXFEO4D2TeWxGE+2F8mP9gfJj/Yfph
4QMzHxZ+MPth4QtzH67wB4XP5RdFcP6Ed7/uP3lTBDfPeubSLv0PRXD7QOo3
fyqCuwdkn8XXIrh7nzkHmFZ9K4L7B8aH+RfGh4UHTD8svGDmw8ITZj8svGHu
g/Fh7keOr31PilDio+JhEUp8MNxH2A8Kj947RSjpJfh2EUp6AvGR0xuID/M/
TD9yfIDMR44PkP3I6R3kPvTwBwA1I1If
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVF9Ik1EU/1xOdGvTOcOWrVRiQilmSzH740lHUPlQkQRGYEFSL0rffZDv
FiQUNCMhsB626CX6x5c9BfVgQUQUyCb0IFQ0DQptsc1Shi5r6957bl2sA/fh
xz3f7/zO+d3zVZ3oO3RyhaZpeey0sWNhx89jygBP/4VT0c86PB1lMWNAYY9+
5FxChwemae6bNWBiS+uG0/M6sE+0j2kDzsfi48MZHcKhUMj4aUBv5O2zFzkd
qllYLBS2h+5c7rMSvC+gMN1+oDFsI9DJIm2jcDX1Y+plMRH1jjop3MrZv18v
IxCNRCIjJVTocXgITMZisV+lVNQf9BLoYeErQxyvUpjn1/kUXjh8fI+9VvKX
Iv/EZrx/5cT8oa0EXCwa7Mi3t5mIfk0rhUclXktNCwExn6yxDJOMwjzfJucx
34z9Zr7hPIeasJ9EQuazegEecQM6zMc3oIGIeWrThpjP+zrkH55E3NWI+is+
IZ+jBfES8+fY6OuRNzulviTy3wMCs6lUqncO+Qfasd+7i/h9MoD63uUU5vq/
5tO/mPOfLaKiH38A9V9xUMH3vA39uOmiov7B3VjfvQrnvb9V9luOfA93yHmv
QT4309/PYmGt9K8J+x9YJ/3zExgMBoOFlch/ph75IpXoX+cmhcW8fArzfFc1
fn9/PYWNwWvGLi/yd3tRf/dqOc8K9PeSG/O/lON7vOiUet3I31WEft0uxvdc
n4/6n9hQbzSL+6BZ5bzYPnA9HTn0L8z2hfMVZKRfSbyvnZN+z+D+bEsrLN7r
osLiPSwpzP0ayyos5plHl/F5rArzeitr/sfC7w/I/2f//8X8f/Ab/sHbpg==

     "]], 
    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
      1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
      0}}}, {{{422.95, 304.207961}, {422.95, 306.24546100000003`}, {422.95, 
      306.42358600000006`}, {422.95, 306.617336}, {422.95, 
      306.82671100000005`}, {422.95, 307.036086}, {422.95, 
      307.22983600000003`}, {422.95, 307.40796100000006`}, {422.85, 
      307.25066933333335`}, {422.7427083333333, 307.0912943333334}, {
      422.628125, 306.929836}, {422.51458333333335`, 306.7683776666667}, {
      422.4046875, 306.6090026666667}, {422.2984375, 306.45171100000005`}, {
      420.5625, 304.207961}, {422.95, 304.207961}}, {{424.709375, 
      303.54546100000005`}, {423.7296875, 303.54546100000005`}, {423.7296875, 
      301.80796100000003`}, {422.95, 301.80796100000003`}, {422.95, 
      303.54546100000005`}, {419.65, 303.54546100000005`}, {419.65, 
      304.09702350000003`}, {422.85, 308.21421100000003`}, {423.709375, 
      308.21421100000003`}, {423.709375, 304.207961}, {424.709375, 
      304.207961}, {424.709375, 303.54546100000005`}}}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], 
    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGZigAKfcofc579XfpxS4hC3y5OHyRrBn5En1HxA
q9zhasVLNcO+EofpIL4clN8ElReC8stKHMDm8ZQ7yEalWN9PRfDB5oWg8a8U
wfl8upvmvj9cBDfP42GVyLrNRXD7wPzlRXD3gPmzi9DcCzXPB40/pxrOX+S6
7fPfNQh+xsS3NfZ7q+Hmgfknq+H2gflXq+HuAZt3pxruXhgfxT8wPsy/QD4s
PGDmwcILZh8sPGHugYU3qntL0PxT4gAARSTDzA==
     "],
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[0.880003, 1., 0.880003], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{455., 321.809}, {
     599., 321.809}, {599., 304.809}, {455., 304.809}}}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], FaceForm[RGBColor[0., 0., 0.]], 
    FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVGtIk1EYXhZRSZCI0IVAQwykghKhC9Ghwh9WEJUF6byhm5dy5QnscipQ
qiViphLMpYgU1tREl3mZo+WVwRRLrEw3zdZKimlKBP2p8+154Ut64fvx8L3n
ed/3Oc97ItINJzKXazSaZfI7Lb8g+VWZTKbxZsFuumeHQ/M5G3K5XCUtgu0z
PS6+d4GzbpvNlmgVTGsbbAwxcKaTEdcmmO/Q8diq85yFyNjZLph13eagrec4
a7BYLPGdguW53ttncjiLkVFhE2xDQVHWUDb4JuyCrdLln+nO4uyu0WjMcgh2
1PLCPK3nTOlnTy/49+rBt2YA/VXoUD/KiXymo35dKlbyo0eW4uJR9P+a8hvf
gm9R8s/5/f7hccHq/gT/CMsmvkn025SDej4P+umS80nJNOwj5h3M4yxBRtgn
zHvwIvJ1Xpzffgnz2j4L1hexI3R9Af33oV7CVRUrfF+uq7jM/3tqxS3ODsuI
9NL8xahfO0W4FPybJgiX4/zKMcKVyE8dWorDnSreIqOwX7CxXQciV1fi/O0e
0qec9HspWLSx8ornPmcet9u9vxvzHSujfjpI71Lcd4yV7rtcxcp8d3pxv53+
/7FyPrwD2ORQscI/bYf+Z6vIPw7oXWdG/z294Kt/SH4bANZXQ78MJ/mzBvMN
uKh+DdUfUXFgnjEVB/r/QP6sBuYe0k/WK5DRPiPYr1NpcUfM0CvHh/8nTeSn
WfLTA/jt2XfkB5PeUXPwQ1sZ+BfnKb8E/fctwA+PjOTfRfCPFqk4sC83VKz0
W3sZ+tQtoF4Dp37mSU8D9LzmR721udjnlm/Iz9Ujf9tX1OMZxO/F/oo07O+T
afh7dwr5a5LuQwt+8zvU25hE+/SG9ElEvmZYxQH9nEtxfD/tH+XXvqL7ScL+
/bRTvpb66YJfk5Ppful9qk+hfX9O/k4l/Vvx3hnSwe9opn4z4HdtE/Tvy0S9
2Ab4r1BP7+FTqp+Nev++p38B7HmT0A==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{474.875, 
     312.25952350000006`}, {473.365625, 311.85014850000005`}, {474.3375, 
     310.62827350000003`}, {473.9078125, 310.30639850000006`}, {473.034375, 
     311.60483600000003`}, {472.165625, 310.30639850000006`}, {471.7359375, 
     310.62827350000003`}, {472.70625, 311.85014850000005`}, {471.1984375, 
     312.25952350000006`}, {471.3640625, 312.77671100000003`}, {472.8, 
     312.24077350000005`}, {472.8, 313.80796100000003`}, {473.26875, 
     313.80796100000003`}, {473.26875, 312.24077350000005`}, {474.7046875, 
     312.77671100000003`}, {474.875, 312.25952350000006`}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{487.3, 310.49077350000005`}, {487.3, 309.80796100000003`}, {
     483., 309.80796100000003`}, {483., 310.49077350000005`}, {484.8, 
     310.49077350000005`}, {484.8, 315.207961}, {483.4390625, 315.207961}, {
     483.4390625, 315.74077350000005`}, {483.7796875, 315.7949401666667}, {
     484.0765625, 315.8605651666667}, {484.3296875, 315.9376485}, {
     484.5828125, 316.01473183333337`}, {484.809375, 316.1069193333334}, {
     485.009375, 316.21421100000003`}, {485.61875, 316.21421100000003`}, {
     485.61875, 310.49077350000005`}, {487.3, 310.49077350000005`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIH1tc51N99eS44utjh3t27d2OXIPhnz5w5kzO7
zuGIop7wj3gI/82UOgefVdtmO2QWOwgCQWFfnYNkeXNGb1GxgzEIdNc5XDWy
VzlZj+CDzPs8AcEHmWexCKGfI60oPGY9qvkJOxD2g8zLPFjsAHJvwhKIfW+P
FjukAcGx9Qh+Z0dHh8ZuBL8cCMSPIPSDrJ98CmE+iC98EWE/iB98BeE+GB/Z
/SA+sv9A+pH9DzMfFD4w+2HhB3Kv2m5E+KKHPwAKna30
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIH1tc51N99eS54d7EDiO+wBsFXAgKmlXUOE979
ut+yq9ghDQjYltU5bBaQZXq+o9jh/bt37/gW1zlcNbJX8dxe7LBn9+7d1Qvq
HJ45B5ju2lLscPbMmTM+8yB8q43FDvfu3r0rO6fOQatjSuW+tcUOgkBQOKvO
4YiinnDESoj5bjMh5rMvgZgnPaPOYdF/7o9b50Hk26ZDzIuageCD3Pt5AoIP
Ms+iqdihs6Oj4wTQPI60ovCYcoR7fFZtm51QALH/4iKI+zMzix1cgGDJijoH
yfLmjLepEPOOrUfwQfJPtiH4oUCwdQ9C/6yZM2daHkSYD/Lv3qMI+8EBfgLh
Phgf5n4YH+a/1atWrco6jvA/OH6OIcIHZL/oUUT4gfybcRgRvjD3wMIfZB7X
fkT8gPSX7kHEH0h95U5E/ILiv2kbIv5B/nfZjJpekNMPAGPpBnc=
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQffbMmTNr1tc5SJY3Z/S2FzsoAQHTWgT//bt379at
qnPgSCsKr+kodjAGgs0r6hyeOQeYRnUVO+zZDQTLIPI2PcUOQCMZDiytc5jw
7tf9J30Ifv3dl+eCJ6HKL5mKpn8GqvlSs1Dt/zMb1X1v5xQ7ILsfxC8HgvBN
CH5nR0fHii0I/SD7F2xDmA+yf/YOhP2zZgLBToT7YHyY+5HlQf5D0d+Daj4o
fJDtB4UfsvtA4Yse/gCR/r4q
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     504.9984375, 311.80796100000003`}, {501., 311.80796100000003`}, {501., 
     312.17358600000006`}, {504.9984375, 312.17358600000006`}, {504.9984375, 
     311.80796100000003`}}}], 
    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
      1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
      0}}}, {{{515.7, 312.207961}, {515.7, 314.24546100000003`}, {515.7, 
      314.42358600000006`}, {515.7, 314.617336}, {515.7, 
      314.82671100000005`}, {515.7, 315.036086}, {515.7, 
      315.22983600000003`}, {515.7, 315.40796100000006`}, {515.6, 
      315.25066933333335`}, {515.4927083333333, 315.0912943333334}, {
      515.378125, 314.929836}, {515.2645833333333, 314.7683776666667}, {
      515.1546875, 314.6090026666667}, {515.0484375, 314.45171100000005`}, {
      513.3125, 312.207961}, {515.7, 312.207961}}, {{517.459375, 
      311.54546100000005`}, {516.4796875, 311.54546100000005`}, {516.4796875, 
      309.80796100000003`}, {515.7, 309.80796100000003`}, {515.7, 
      311.54546100000005`}, {512.4, 311.54546100000005`}, {512.4, 
      312.09702350000003`}, {515.6, 316.21421100000003`}, {516.459375, 
      316.21421100000003`}, {516.459375, 312.207961}, {517.459375, 
      312.207961}, {517.459375, 311.54546100000005`}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     528.9884375, 311.80796100000003`}, {524.99, 311.80796100000003`}, {
     524.99, 312.17358600000006`}, {528.9884375, 312.17358600000006`}, {
     528.9884375, 311.80796100000003`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQvUOu9fXDmw0OmwVkmY6nFjuA+Im3EfySWw7Lz95p
cJAsb87wTSt2eBO4Q071XoPDM+cA06j0Yofkk/rTau43OHwPSXTLzih2AHL/
LHrQ4GA9c2nX+8xiB/nW14EzHkLMe55d7DDtT9LJ/kcNDnlnbux9lAtRH/S4
wYEjrSjcpgBi/0Mgv/7uy3Ofi4odlvOW3Cp4AjF/dSnEvB1PIPbvqkDwfVZt
m61Qg+BfNbJX0WyG8E8AzZvw7tf9lg4I/8VDiPnGPRA+xwOoe/oh/gu9CzV/
YrEDyLhzNxH8v0kn9Y9dR/BB7l14FeLf9ROg4XcZIj+rD8JXvAi1H2ifATAA
Xp6DyP+CumfHGSi/GaLe8CzEPP4qCH/iOYj/u4sg6m9cgMRHbi7EfXKXIf4J
zoDadw01PpHjFwBjqPoh
      "], CompressedData["
1:eJxVVFtIVFEUnYQoEKOwPiyyhProgUURRH10LIqIPtSKJMdy1DKUrLyGZQ+v
pPQgLVMndeiBEdNrIlNTRwzEnHEejm+bZnJsfMzoJIL1UYhQ57p2nPoYhnX3
OXutvfa6NyLpbOzJIJVKFc1/yn9DeMG3GJ/MwrKvnw6pkViyZZN2dlRmVb+D
p8vqJMarDRkjMvsYERlaXi+xVfzBc6/McgcnHKGNEnMzfcjoEHCJUWKxvGGw
B/hQE+6HfxFY4VviEjhKH5K13CmznRXPbt81ov/2AZnVLF4ZtKAROK5PZutv
ll66Vo/71T0y8+2J3jZTK7FJ3n5vN3BONc47O6lukLi6LNdbB/CxF9Dj6ACu
fIp5J+3o73kI/Zc5/nlYs8+mFfjgy/e6xCLMm++AX2fuSyzLxfQdXdCrLyO9
veRnucQUO4f74d/FSug550TdoMM889wCK3zxg//X87i/GXZnc5AO817wUr0C
/qXx/Sw8lXlUzfk2a2eTwsZkdm9qZihFS/d90GcuoXn9MuvfsmvNumL0mz9B
8xeC3zaB8/5bmLc0gH39KMB8vwLElyew4s/qKwIr/u7IlhiXY8kNEH8m/C+i
/uYM1B+PE06DXo0f+TuSCn39Y+CXUtB/P89nQpP5dbEG8+cMU55OQH/6V/Ab
EzCv2kP61OCP/JvHePB5Pwus3F/xSeBFfME3+ig/auhZ2wO9qceB2zpJXyL2
/a4D+ylMBt+UDfWaVOjZaEU/VzqwvZ3yfp7yaRb+KXnpMlHerkJvDGFDvsBz
eb8jsJK3uAfwa9xE+34CvcvaqZ8e56Ms8LvuDfltRd6qakmPHfq3NsJvqwP9
LM3Ix9Ju8rcF/r3qJf2t8GP3AOlpA/7uJP9MON/kFnhuHx6BFf5HXvK/DfXp
EfCxVnr/fXhfN7RA34Fx+h59oPeL8phD359/v3d/AOOoc6A=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{552.9884375, 
     312.73764850000003`}, {548.99, 312.73764850000003`}, {548.99, 
     313.10796100000005`}, {552.9884375, 313.10796100000005`}, {552.9884375, 
     312.73764850000003`}}, {{552.9884375, 310.90796100000006`}, {548.99, 
     310.90796100000006`}, {548.99, 311.2782735}, {552.9884375, 
     311.2782735}, {552.9884375, 310.90796100000006`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxtVF1Ik1EYnkYQiFF05UVFERRFLAqvAnstKKIIJ0UQBbpK7U+zY9Qgso/2
4TaaW/tjc801dRuWUmKOsRouE2JQQheCTEK6KcasiC6CsJ9z9hw4SF2ci4fz
nud93ud5v2+TuaPx/AqDwVDBz35+KvlZNKU36LpGNTfutr09x2hXYMmct2u0
quXayVuXGSWruwpup0azu/dtucAYNfLyebdG3e+LM14Lo416ybTNp1H7m7ns
VDejs3ljYDGg0d5Q3NGhy/uQRh8PNNT2ORj9MueNLWGN3F9+Lky70K8motHA
n6pvfh8jTl+q74ee6hCjei7gYhT97RFGnC79W+JiTGFRvzOh8I/jzQerRiR/
FPyzT3F/LIJ65zNG83xCaxh8h9OYNxfUaHzN+sqtGUbCn5X+5TjuUVjUX5V+
fE9j3rZeyZ/CPM33ZD3v11WgpNOh0dFHqTCNwc+SDf4URsFfqwOfmoB+S4/0
IwNc5Pmcef565F0W9brkT+YYcfuXNrvAf+cV5q3z4P3naeib8yss9DcFFRb8
w32YZ8809I89AF9uCnlk+tHf9BL9rz+E30cmUf8hBr7RF9LvQfCt4/pXcwNa
h2R+Kcy/Iy7zG2ck1u9rHPydT8BnSiC/E48VLvuVUFjUrx3A+0n+frvNZ6mL
gD88BP1NQennIPzq8aJ+IYZ9tPZC70xU+m9HXtkI9tlohf5DYfm93Ab/paD0
ywI99/1y3xn42j0yryu4r3BJ/a3Iw+ZWuLyvHoWFvxNehUVeDX6FhZ5PgeV8
N4MKi36dw//ict6n5f7o/8fif/AXqfP9TQ==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
      1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
      0}}}, {{{569.69, 312.207961}, {569.69, 314.24546100000003`}, {569.69, 
      314.42358600000006`}, {569.69, 314.617336}, {569.69, 
      314.82671100000005`}, {569.69, 315.036086}, {569.69, 
      315.22983600000003`}, {569.69, 315.40796100000006`}, {569.59, 
      315.25066933333335`}, {569.4827083333333, 315.0912943333334}, {
      569.368125, 314.929836}, {569.2545833333334, 314.7683776666667}, {
      569.1446875, 314.6090026666667}, {569.0384375, 314.45171100000005`}, {
      567.3025, 312.207961}, {569.69, 312.207961}}, {{571.449375, 
      311.54546100000005`}, {570.4696875, 311.54546100000005`}, {570.4696875, 
      309.80796100000003`}, {569.69, 309.80796100000003`}, {569.69, 
      311.54546100000005`}, {566.39, 311.54546100000005`}, {566.39, 
      312.09702350000003`}, {569.59, 316.21421100000003`}, {570.449375, 
      316.21421100000003`}, {570.449375, 312.207961}, {571.449375, 
      312.207961}, {571.449375, 311.54546100000005`}}}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{455., 321.809}, {
     598., 321.809}, {598., 305.809}, {455., 305.809}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{371.25, 
     447.88700000000006`}, {443.25, 447.88700000000006`}, {443.25, 
     414.88700000000006`}, {371.25, 414.88700000000006`}}}]}, 
   {Thickness[0.0016666666666666668`], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGINIIaxWZDYzHRiM0D5DDQyfyTYRYwbAKERAuM=
     "], CompressedData["
1:eJxtVWlIVGEUHdMiJKLFiJAo25CwKGwhSPtKSSuzcqGsJLEUMzOX8qmvMk1s
1DInNR3H0dFZNDXLXCKsqCCJmBapkH4YVhASYYv9GSLqPc+Bl9AH78fh3Xfu
veee7z6f+BMRCe46nc5NedKVZ5IOJy5TElc83nvqI2WRqJz+LEmMxKyLi90t
i2jlvMmVhPeloxXlO2XxzOl0XsyThF99rs1nhyyC1VMoiYAbpT23QmXR1tra
+rlYEv3rvQLlEFmo/OfKNXy3r6/vV4WGVf611ZJwJYekj4aA369WEnED1wdf
h4J/iRnxfdsQ39MgCducH96u7eAfbsT3ZWGy+Do6OjrdJonwB3X9i8NlsUg5
j+yof4bST63RaHQ5wB8VIYuZylndAj5jFPI7Fdy9zH3F8r0aVvWZul/Dnqf3
Ffw5yPoUXDD2wtV7SBb+ynnlQD0r46FnkR18rUdkUazX65OseP88EfXkWNCf
KQn1l5mRLykZej41Aj85Rn2qqEcK8lWUg6/jOPjeliDeNxX66Ar/j0Oz8b1/
iYbVehMvSyLtw/2Rx9ngM1Zg3g9zoNdANfxxLxf6bjEBzz+N+r6YEf/+jCwk
5VRbwGfPQ//6Jn6fj3oeWFlfIf1hg5+uFDG/ne+LJ+KRUg2r8bMMqK/TyvlX
0R8N0Mu7Bv3OrmO8Cf1Oof/K6sB3p1zDar0jpRpW6ztwgffBRL7z8FOlkfM6
i/7M1ajney79U0U/SPS3gfNP47xr6deTkhgMXbrLrx71W3LQT1Aj8+Vx3lby
FVJ/B/IZSujvZs7XoGHVrx5XNaz2I9fSTw7qWc99YMf8bjcx3ob5hjno1ybE
x1wDPmChf9pxPxbUc590cJ+Y2O9N8HnV0M+3oOfLSs6jC/1PM2h43P8XNazO
L4P+cN2E3zbTT8Pt4F9zhvlbqGcO7leHlfmz2K+Z+ydzIg7PxDw+WDj/DN4f
G+57Vjr0HXNwvmnI9+ka55+K7wva2V+Kpodab2My91Un+ZKg9yD1+JaAfAu7
kX/6YeiV0oP3q+Loh17wucVOxPkxGh73e7Qs3g0NDc3vob576I8u8Kdyv4d1
0p/bgNs7qP9WxEe2cV8Eg+93M/icm1H/XO7fj5vo3wbqF4j75GvCvt0QAH3i
r/L9RuY3aHjcn3oNq/OZl499MjkQei6TUe9PwX5OMX8Q6otNY74QxDtSGM//
x7//v79oSiQ1
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIHPpc7/MxyL+yzqXa4d/fu3dgXCP7ZM2fO5Nwv
d7Bd373VyBHCf3Oj3OGYuYhdtVe1gyAQFF4qd5jE8pDrRHC1gzEInC938Dsw
5xhzIoIPMk+vCMEHmVfUjNDf9Pn8z2kTUM2fPRNhP8i8xYuqHUDuTXgBsU9j
ebVDGhAc+4zgd3Z0dGj8R/DLgUCcowKuH2T9ZL4KuPkgvrBoBdx+ED9YogLu
Phgf2f0gPrL/QPqR/Q8zHxQ+MPth4Qdyr9p/RPiihz8A6BCoHw==
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIHPpc7/MxyL+ybU+0A4jt8QPCVgIDpbbkDV01E
0/7Z1Q5pQMD2qtxBZ17VEsVZ1Q7v3717x/e83MHvwJxjzTOqHfbs3r27+km5
Q8LFtde/TK12OHvmzBmfRxB+yaRqh3t3796VfVDusET0k/TPvmoHQSAovFfu
YLu+e+ukLoj5bnch5ju2QsyTvlPuIN2bOflDPUS+7TbEvCmVCD7IvXpFCD7I
vKLkaofOjo6OE0Dzmj6f/zktAuGeY+YidrMDIfZffAZx/2KvagcXIFjyptxh
EstDLg13iHnHPiP4IPknvxD8UCDYylAB1z9r5syZlqwVcPNB/t3LWQG3Hxzg
PBVw98H4MPfD+DD/rV61alUWdwXc/+D44aqAhw/IflHOCnj4gfybwV4BD1+Y
e2DhDzKPi7kCHj8g/aVQ94PiD6S+8i8ifkHx3/QLEf8g/7t8R00vyOkHADm4
CXo=
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQffbMmTNrPpc7TGJ5yHUio9pBCQiYPiL479+9e7fu
XblD0+fzP7dlVjsYA8HmN+UOCRfXXp+SXe2wZzcQvILIl+VWOwCNZDjwstyB
qyaiSb4Awf+Z5V7YV4wqf78MTX8lqvkh1aj2m9Wiuk+jrtoB2f0gfjkQhH9D
8Ds7OjpW/EDoB9m/4BfCfJD9s/8g7J81Ewj+ItwH48PcjywP8h+K/lxU80Hh
g2w/KPyQ3QcKX/TwBwDkbctI
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     397.0015625, 442.03790100000003`}, {393.8078125, 435.08321350000006`}, {
     393.5, 435.22540100000003`}, {396.6890625, 442.1738385}, {397.0015625, 
     442.03790100000003`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvyisddOZVLWF0r3YA86sQfBcgOFJb6TCJ
5SFXB5BvDATFDZUOCRfXXp/iUe2gBALNlQ4Fj/a9WOpZ7fD+3bt3ea2VDlvU
mHW1vKsdZs2cOTOyHWKeom+1Q2dHR4dHZ6XDi0izBFl/iPpzXZUOTZ/P/ywL
hNrfXenwM8u9UC+k2mH1qlWruHoh5j8Ng5g3sxdi/5dIBP+YuYhddCyC73dg
zrHkFAh/J9A8rpqIpv2ZEP7Pdoj5ebkQvmUL1D2FEP9droOaX1TtkAYEx8oR
/FAg2FqM4IPcm5MP8e+rQqj7syDyV/Kh8mlQ+4H27dm9e/fvRIi8SRbUvbFQ
fipEfU8cxDyvaAjfJxHi/6PBEPU3UyHxscIP4r60LIh/+jyh9hWgxSdS/AIA
byL4VA==
      "], CompressedData["
1:eJxdVF1Ik1EYnlpdSASRXYgEGRRdWBBG3jQ7htUuzPwrJjZ1ypY/5Zb/x2/U
tB/ntG2tufZt0kqGhpVB2YWsQiIkxP4D6WKRXnkR9nvjRdD59rxxohfGeHjP
ed/nfd7nO9l1tjJLqk6nKxE/7f/lvAgfZ/41i+mGgMK2aeHhLOtK47U3QYVZ
Rawb5Ex/f/DRu5DCwqqq8n7OVpuOnC0OK2yjiO8XgF9FFCZK6pgT2DOC+1aH
xFq/om6JPyUSCVM7Z1M70nbNRVBftXOWc6MnVhAG/nias9jmH1nTIdwfauSs
9u29hb2CX66Ih1bgKT+dr6e8V2F3JiYm3GbggBt8ZmuAP1zEvKnVqJ95Hvy3
mjizLz1dXtst8WxeRn7Ehnn3mKHX7TaFFYp4bgHfxU7q30R6coV9XRFhg34P
FPBJ70B+2YF5cnok1vp9PvdfXui7XLmvVu/AvJv6Kd8D/X67Oev7+Xo1KPo9
jsfjVWJ/6Q5jX7SL7l8Fv5QOmjfAWfHMyGx9K+rlBml+G/rPXMf57GbMW6pi
X7tPYb7MMPWrk1jTp8oksaZvu1FhAy6Xa6dK/Sug/2Gqn1KCfMMw4SLw/eKH
/3wG8HvvRf/JQ6g/PcTZgmH7sfmDmH/LAPmJgb/uEvr/yse8S07ip0f/y3/9
uJ/6dUmsXa9tlbhLRN4Z8o8efNoawPfWAfJfPfErwL49NdjPi0L6fk4iv2IA
nz4j6mUcBX52nPxeRv4sl/ppfpkrJb9Vg+98Ce3fInHS7y0Sa37zd0Ov1VLa
dy/4lldQPRfO3z0Bvb95Se9K+C0xTHxM4N8Sht5PzKiXFiV/WEnfUejnbCb+
MegxaSc+Y8AbOkm/cZy/qUic3EevxMn3o5/0H0N+/RD6KTHS34fv1TJK/AL0
HkXJ/yF6H+j9+fe9+wM2IUwn
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{421.2484375, 438.8144635}, {
     417.25, 438.8144635}, {417.25, 439.18477600000006`}, {421.2484375, 
     439.18477600000006`}, {421.2484375, 438.8144635}}, {{421.2484375, 
     436.984776}, {417.25, 436.984776}, {417.25, 437.3550885}, {421.2484375, 
     437.3550885}, {421.2484375, 436.984776}}}], 
    FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVFtIVFEUvT4yG+xlasQQZJQfYUFIRdDoQVOn0cxMQ5HQIkWNMNMQztEE
oZheEunPVISFQUxlBD2IqbAIP8IHYjWJjXrLN4yZTsYUZefeteEmHbgfi7vP
2mvvvfaJPlKeVRSkKEqA/A7KL1B+Vx0OR18vZ/6y1IqMA4J1dnR0XHzP2aOY
oM1v9wv23OVy5bs5c1s37kvPFKxYnpQ+zgp77rvfZQi2Up6t/ZzF3uAth/cK
dtfpdNo8nI3nbS9cmy5YnDyNg5xdCVZNoWng61c5q5/t9s/tEeyc3W4vGeas
fUdEvFliTc/OMfBXWcFnmoS+rlTkj/EiXqSS3mkDa/GbfAvx+R/QH2ZF/L2f
4Nsi832dmprq+s2Z+VJpY6aN+BSh6x1PQ77RQKHr8cn6ZMsUtkjo9QbIfuTI
E7lY6PXWZiG+OBT3S3JQr2uJYJYHFx5n5dJ/k9DzXc43sMYXXWBgU01ufUKx
YLvl2SD59PqPIX9zEOFy8JvnqT+VuB/iJ3wK8YXfFuJ1XgOvl6d+grOMtuvt
Sadw/+wo9aeK+veFs5bIGfMayT/g8XgsQ5invYL0fKJ+l2PecW6ad5WBtfpe
tWC+z8LFf1i7n+8AdpAfNKzxD6nwQ5Mg/wzDX54a6H89Bn61lvw2CXzzNPp3
1Ev+rEN97dOkp47y+wys1+M3sK7/D/mTcGUg9V/mq5bnaYhgJz6/HD9Tg36V
mfC/gZOflpKfquG31hWIT6Z+x6yCH6YrwD8bQfHHof9NFPwwWEr+XQ3+ZUUG
1velwMCa3v489OdWFPKNZJOeCMQ3ZaKfIhz5rOnY54fLEX+b9iU2DPlak4lf
+lHb3yeJ2N87wfD3SUb+UjBfNR78135hftkW2qc5+KthF+KVGQPr/fMuxLYJ
3PdRfPMIzceC/fuuUnw86RmAXx0JNF96n1RG+/6R/J1I/f+A986ZBP62XtKb
DL8f6uF6/+dTkG9bN/z3wkrvYSfltyHfv+/pX44Nc8Y=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4rNnzpzJuVjuMInlIdeLDVUOQCEGhZ+Y/ISL
a69vCUfwr3uo+r8JrHLYs3v37upf5Q4Fj/a9OOpb5WAMAn/LHXTmVS1x9K5y
WL1q1apX/8sdXkSaJez1gOhfwFzhcMxcxK7aHaI+mAPBLweC6TwI/r27d+/W
ClY4NH0+/3MbUH8aELCJVzj8zHIv1POG8NOkKsDuM3GsclACgkdiFRD32UPM
nywMkb9iV+Uwa+bMmZUCEP3vbCHuSeCtcPA7MOcYM5AvCAQbOSHyfTZVDuDw
YUXwQf6VBvoPxgf579S3coctasy6r2Dmf4L4f6FzlUNnR0eHxrtyhyWin6Qj
of5neAMJj1h/BB9k3roIBB8U/hrLoPZfxM4HxQ8Av/6/Kg==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGBwBWIQbQwC+hUOCRfXXjdJrXKA8Y+Zi9jNzq5yeP/u3Ts/
gwqHps/nf4YVVjmkAUGbUYXDJJaHXBllVQ737t69u9ekwmGJ6Cfpyuoqh7Nn
zpxZY17h4HdgzrHD9RDzgq0h6j2aIer/2lU4XPdQ9T/TBjFfz7nC4UWkWUJt
J8T8Z+4Q+6O7qxyUgGCRD8R8y94qhz27d++uDoSYp9EHMb84DMEvB4Lv0Qg+
2LyECoctasy6XkD9QC8zOKRWOPzMci/sA5o/ayYQZEL8dw1of2dHR4dHLtR/
7RD/+BRUOOjMq1ri2FLlIAgEgcUVDlw1EU3yjRD/zC2FurcWGn7lkPD8UgHR
f6YCal8J1L5KCH9dPoIPUh+SheCDzPudgeAXPNr3Ymk6mvo0BB/kXo5UiHtq
ofwXyRD/u0HVf0mCuscGkw+KjzVxEP9NtIXIX4mCmC9pD3FvXjjEvGUOUPtC
IPI7naDhEQiNb1eI/i1+EPPfuEP0+/lA4pPJu8LBdn331iIviPrJfpDwVfSs
cnABApWgCgfp3szJF9wh+nlg8Qvl+0Qh+CD/3o1D8EHxx5GMqv9MGsL8UCCY
moWwf/WqVau88qDx6wN1byE0vqDu7ymD+scVkr62F0HSq60zJD1G50HSp6Qj
JDwqM6Hp3R4iPzsFkr7KbKHui4eabwNJjwciEHyQ/1mCUeUX+ELzhy00vDyg
6c0e4v4uZ2j+cISGnz3EPw+dIfoTrKHpxR3qHnNo/vOC5i8TSP7g8ofmJyOI
/Xwh0PwAzf9ikYjyASR/Lg7Bh5UfAGCa57g=
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmEORWOPzMci/My6lyQOa/K65yCAWCqdkVDtK9
mZM3VFY5nD1z5kxPeoVDwsW117fUVjl0dgBBcoXDEtFP0jsbIfJvYiscjpmL
2O1uhpi3MwzBX71q1aquYAT/3t27d2sDKhyaPp//aQbkGwPBZF+I/XpNEPPW
eFU4FDza90IVaP77d+/e8XlUOHDVRDTNr4ea7woxbzbQPS5AkOIM5VdD9Oc4
Vjhc91D116mEmH/ZHmK+XxnEfls7iP8KiiHm69lC7SuockgDgmU22MMHxAcA
0xSb9A==
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4lkzZ878eafC4Zi5iF31kiqHNCA4drPCgasm
oun/0iqH9+/evTt3DcpfVuVgDATCV6Dql1c57Nm9e3f0xQqHps/nf34D8lev
WrXK61yFQ8LFtddNVlQ5AK1geHAKwS8HguuHEfyzZ4BgX4VDwaN9L1KXQdQf
2F3hMInlIdeJRRD123dUOGxRY9bVmg+x33h7hYPOvKolirMQ/J9Z7oXrJqPy
+3qqHED+u3kdO/9cI6p6ZD7If7PtIO5xWIXJB7nPownCZ5iCyYfZB1OPja83
GdW8E3OqHDo7OjpOrKlwWCL6SbpyCdS9GyH+dVwFCd9X2yD6+TZUOYQCwdV9
kPD8sgmifuZJBB9knsdFBB8cvjcg/JKNUPc+gPLXQfQjpwcAle72Dg==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4jQgcGOtdDhmLmIX3VjlYAwC7ysw+DrzqpYs
7IbwJ7NVYvATLq69/mVRlQPIvDQhTP7PLPfCvp4qh1kzZ86stMDOP9eIqh6d
vy4GwS94tO+FamSVQzkQbAfypXszJwuEQcyLFIaozwuucmAAARGI/IWAKgdB
EBCtdFgi+kl6pl+Vw9kzZ870iFU6TGJ5yHXCp8qhs6Ojg0Oi0qHp8/mf37wg
8jxSUPWeEPNnykDd4wFxj5p8pYPfgTnHDrtD9HsoQeT93KH2qyH4YPdqIvjv
3717x6db6cBVE9E03x1iHpsBJHwdgeYrAQGTMcR9Lzwg5j0whcgf9ITwF8DC
zwvCb7CGhL+JI9R+oPx1D1X/N/ZVDvfu3r0rawKRv2IH8c9NfYj+d7ZQ/2lD
/MMM5UeqQ+PLBsKXVEbwQf4pl0Xw9+wGAmD42a7v3hpkC/HPMxFI+roNtC8U
CEQFIf7JcICGNx80fJ0g7j3ADY0/V6j5nBD3OHtA4u8iOyT+l3pD4ucMNP1N
8YeYd4IVYn5HMMR+UPoGqX8ajuAjpyfk9A8A3clE2g==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKG0MAumVDpNYHnKtaK5ygPGXiH6S3tkO4RdnVDr4
HZhzjLkbwv+cBVHf0QuVz610uO6h6s8zocrBBQhaCiodfma5F/pNrHJIAwK1
EgS/s6Oj40Q5gj9r5syZN6sQ+kH8yFqE+WD5eoT9IL5kI8J9MD7M/TB+0+fz
P6fVI/Tbru/eGlSDMP+YuYjd7UqE/SDzk8sR7gOZp1GGcD+MD/MfjA/zP0w/
LHxg5sPCD2Y/LHxh7sMV/qDw4fNC8LlqIprk/RDmbVFj1s0KRNgHUv8uGOEe
kH1FYQj3Jlxce31LOMI/MD7MvzA+LDxg+mHhBTMfFp4w+2HhDXMfjA9zP3J8
/XRFjY9NTqjxYe2AsB8UHidsUdNLnw1qegLxkdMbiA/zP0w/cnyAzEeOD5D9
yOkd5D708AcAtjtRyA==
     "]], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVG1Ik1EUnhkR0gdiZrIsV3OiuNA0xWrzMJ17m1PXnKZIaJFDjVimIlw1
QSjWJ5H9WUWYGMQqI+iDWIVF+CPMCAIJWWVQ7NeKrMBfdd89B96kA++Ph/fc
85zz3Odcw0G/py1Rp9MlyK9BfsvkdzkYDL5PEbTY6eiqqRP0enp6+myqoPum
RPOrvYKehMPh5jRBs0pWrcstyCejMl1Q69s7s+9qBCXLKNALyrsmxg9UC7oV
CoWcGYKiTcWtGS5BhTJGNgu6uHw+aWUV6s0ZBA0vvFn8vUfQqUAg0G4UNFWy
zqqXWO2nNBv1exTUS8pFfzMO8JvMyO93cL/5Glbzc4uW4tMl6H+VgvzbO1Fv
m+T7FovFZiyC9Oc6RtxOrkfoN1oFvq829PNTzicl05Ed8yZIPeplpDow76AH
+T4F59vrMW9Y8ljunnngaeT/TvBdaNawWs/QouGkgcbhMp+gChlGhec/DP7R
csZ+1NeXMe7G+RWljHuR31qwFGeaNbxFxnCOoJrJq1PlvTh/0sT69LB+WwWN
p/7Qp8v6HyKRiCUT8wW6uJ+NrLcf912Yxvfdo2F1vufjuN/Hnv+xer45CBw0
alit/8kA/S/1s3+M0DsygP5fZKPe/CD7LRf4+nHod8jM/hzCfFP5zD/E/EUa
js9TquF4/1b2J+NuG+sn+fpkPKoUdPTzs+iJAejV6cT/84L9VM1+6oPfJtzI
t7Pepjr44XsX6i94Of8I+n/ZAD987GD/7kP9NW0aju9Li4bVfueaoM9YA/i+
eLkfL+vphp79HvApLuzzvVrk3+B9yXOBb8LO9RXs70Mb9vdmBfx9jNhfxPdh
Rf0ru8DntfA+FbM+u5Gv267huH7mpdiZw/vH+aNZfD8W7N8vA+dbuZ9N8Guw
jO+X36d54n3fwP62sf7r8d6FylF/MoX7tcPv+5Oh/59K8O1YC/89Vfg9XM38
TvD9+57+BUnwUtA=
     "]]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{371.25, 
     447.88700000000006`}, {442.25, 447.88700000000006`}, {442.25, 
     415.88700000000006`}, {371.25, 415.88700000000006`}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{248.5, 
     388.84799999999996`}, {326.5, 388.84799999999996`}, {326.5, 
     355.84799999999996`}, {248.5, 355.84799999999996`}}}]}, 
   {Thickness[0.0016666666666666668`], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVFtIVFEUHZ+NmsKAlg/MR8NkNoli+ArhFH7EIH0YFRFRmElIeE8U3A+R
LCqsRvNR6WhmmpRNMWQqIpOVzlhk4wTR40MmpMBEQhEfvehx7l0bbtKG+7G4
+6y99zprn6RiqehIgE6n8xPfHvH5iy9TRO+cxE4da0jo6ZRZi81mi1mQWF7K
zglzh8xkEQPLEjtg4b8c7TIb93g81h8Sm3r97Vz2DZkliyj+LbGH7aNF7usy
u2e32y1+nJXvPx1R1Sozhb8xgLPoYPNgWYvMHjmdzokgzvRLsd37bDK7UF1d
fVTPWWHuwS+VzaifG8ZV/vdN4AuN4Gp/GQKXijAZkO+7Rv1EaljJT41eiS/G
cbX/8ibk318HvnpRb252dtabxFlHbd+2XhvxGdGvpRX1pkzoZ2+bzIRkOraR
q/OWCD12i4jahHknO5Bfasb5sS7M69zMmevBu8P9d+h/Guot2DWs8J11aLiu
8lZ6Z7/MCkQYzTS/E/VvbiD8BPxx6wm7cD44nvAo8g9FrcSJBg0r93cmnLM3
w59P3nbj/PlQ0sdF+q3iLHVt/ljFiMw++Hy+/EDMN/OU+tGR3o+pf+EX9b5d
GlbmMy7ifgez+H9YOT80DWzTa1jhnwyC/l/HyD966M086H8kDHwF4+S3COBA
L/QrMQC7vejnWSTVf0X1ozWszhOvYYUvM5n86QU+YSL9xmk/Ujlb/hTSNP0S
epWl4f/8C/JTBvnpOfzm2IL8btLblA0/7BoG/0IO5Q+hf3ce/LB9kPy7FfzH
+zSs7otDw0q/+XehT2ce6u3oon5ySM926FmRhXp24XeDiJ5M5OubkW9ORz3D
VeI3Y39jGrC/3Snw99vL5C8j3Uct+FsTUG/ASvsUS/pcQr5ujYZV/QwrsSWc
9s9K9xNC91OD/VsKovwa6scffv1ZS/f1B/4rqIN/277jvauvxzyFi3jvVjeC
v2oO79vAFdrfGUnVv5jek7IpSfVfIulj/Qi+eRvq/fue/gUXUGwA
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{271.4984375, 378.88074300000005`}, {269.6703125, 
     378.88074300000005`}, {269.6703125, 377.04636800000003`}, {269.3, 
     377.04636800000003`}, {269.3, 378.88074300000005`}, {267.5, 
     378.88074300000005`}, {267.5, 379.246368}, {269.3, 379.246368}, {269.3, 
     381.04636800000003`}, {269.6703125, 381.04636800000003`}, {269.6703125, 
     379.246368}, {271.4984375, 379.246368}, {271.4984375, 
     378.88074300000005`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvZhc6bJp/NChlWrkDmD8PwXcBgiMLCx0k
2HR2vgLyjYGgeEmhw7NLP1q/Ty93UAKB5YUO3x5zTueYWe7w/t27d3krCx2s
NPxu98wqd5g1c+bMyNUQ81rmlDt0dnR0eKwtdMiLbuRrmAdRf25doQPHV6kV
NxdA7V9f6FCfM0l+4uJyh9WrVq3i2ggx32MZxLyZGyH2h69E8H0s49/sXYPg
Xzn4vOTYZgh/J9C8CbWLDZR2Qvg/V0PMv7gHwrdcAXXPAYj/Li+Cmn+o3CEN
CI7NRvBDgWDrdAQf5N6cyRD/+hyEur8PIm++HyrfBbV/b7nDnt27d/9uhchP
h7pnZiOUvwWivqcJYt6aVRC+TyvE/xqLIepvdkLig2sexH1pfRD/fJwBtW8K
WnwixS8AcJQIcQ==
      "], CompressedData["
1:eJxdVG1Ik1EUHiOkJASJsA+ij18iEskIMQhuIP0QidQf/RApyoY/onpJuVlJ
frSctqazlU4lZy6szdb8xDknmbbJXNGHVBKzUDTFoQxZ5g+h991z4kYHxng4
957znOc87z14/kruRbVKpTot/5T/t0E5+iS2Ky7VbZ/j7JASPRJrN/ad0Cxw
ppUj7qXExlyfLxxd5KzZYrGUOiR2+1LD/u4lzhLliHQCpy1zJpdUMRtwZBn3
tVaBlX7ZrQLPhEKhgiaJHUs+9S11GfUtZon1tL3JtS0BT9dLLCXpeGDvIu4b
7kts4eNvXeM8Zxo5emuBk2bpfDXlZzhz2O32Wh3w+jT4+KqA06cwr7oS9W++
A/8DFRL7NbetscgvcHbG2fDmCOZN00Gv+DHOMuUYrwHfTB/1N5KeE5ytrsjx
APrtnASfeAvyWUHMk/pYYKXfjyf/5WV9L+dXJFgnMe8OB+UD0G/TKbGt0T3P
NuR+wx6PJ1/eX31ZxxG1n+73g1/hOM07KLGp0Z/FvlHU0wzR/CPo/8qD83eG
MG+OF/syDWC+3SPUr1tgRR9vl8CKvl86OavR6/XJXurfAf1PUv3CNuSL3IRb
wDc8AP+tNYLfp170T3yI+m6XxAqyrm4ebsD8+16Qn+rAX/Uc/c8YMe+sjfgZ
0P/uXz/eo34tAivXzz0SmMuRbiL/GMDnmgF8t9SR/6qJnwn7NlZhPylm+n7K
kc9pAp/KW6jHW4Ffl5Lf28mfXOin+CVQQn5zgm+wmPbfL3DM716BFb9F/dBr
o4T2/R58865Tva8433UDeud9J73L4Dc2T3wqwP/DEvT26lBPu0L+qCV9I9Cv
vI74r0EPp5n4RIETmkm/dZy3tgkc28dTgWPvh4P0jyK/3YV+oTXSvw/f60SE
+A3Se7RK/h+m9yFM+vzz3v0BQL1tjQ==
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{295.4984375, 379.7760555}, {
     291.5, 379.7760555}, {291.5, 380.14636800000005`}, {295.4984375, 
     380.14636800000005`}, {295.4984375, 379.7760555}}, {{295.4984375, 
     377.946368}, {291.5, 377.946368}, {291.5, 378.3166805}, {295.4984375, 
     378.3166805}, {295.4984375, 377.946368}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{307.8, 377.52918050000005`}, {307.8, 376.846368}, {303.5, 
     376.846368}, {303.5, 377.52918050000005`}, {305.3, 
     377.52918050000005`}, {305.3, 382.246368}, {303.9390625, 382.246368}, {
     303.9390625, 382.77918050000005`}, {304.2796875, 382.83334716666667`}, {
     304.5765625, 382.8989721666667}, {304.8296875, 382.97605550000003`}, {
     305.0828125, 383.0531388333334}, {305.309375, 383.14532633333334`}, {
     305.509375, 383.252618}, {306.11875, 383.252618}, {306.11875, 
     377.52918050000005`}, {307.8, 377.52918050000005`}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{313.8, 377.52918050000005`}, {313.8, 376.846368}, {309.5, 
     376.846368}, {309.5, 377.52918050000005`}, {311.3, 
     377.52918050000005`}, {311.3, 382.246368}, {309.9390625, 382.246368}, {
     309.9390625, 382.77918050000005`}, {310.2796875, 382.83334716666667`}, {
     310.5765625, 382.8989721666667}, {310.8296875, 382.97605550000003`}, {
     311.0828125, 383.0531388333334}, {311.309375, 383.14532633333334`}, {
     311.509375, 383.252618}, {312.11875, 383.252618}, {312.11875, 
     377.52918050000005`}, {313.8, 377.52918050000005`}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4lkzZ8682ZXvIMGms9OLodwBKMTgcAuT//TS
j1bx5WVwfoxXwV+/hWUO5UDw/U6+w7fHnNM15pY5pIHAo3yHTfOPBi2ZVeYQ
CgRXn+c75EY38inMgOp/n+/gbRn/5u40iPplPxB8kHnTGQrg/Ht3796tZS1w
YP8qtUJyBkQ9G3eBQ13OJPmJs6D28RWA3Td9QpmDEhA84iqAuK+/zMEYCCaz
Q+TN+8ocQP6tZIHoD+yFuCeBscDhysHnJWk9EP1Jv/PB8h+7IepvfkLwQe4z
f4Tgg/w39Wq+g5WG322fPoh9n89A/M8yucxBEAgCj+Q7aIrbnto9HWIfwwFI
eByYh+CDzBNcgeCDwr/rK9T+Lux8UPwAAEN1t2w=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxlVF1Ik2EUHhJlEIJXVjdRyVgY/rRoLIuOoRZLFs1ila2flUY26Y3iCxGD
omLZWKbo0qGtFiJLxGyx1pIMEWIsKquR2SKI6kYWXfRzM+j7es54sQ6M8fCe
85zznJ9vufOErT5Hp9NVqT/t36jZSkGfp35f9IUVyuJt5gOzmYcKfUun09ZC
QQt+LB2MjivUoNolvaDF81dH45MKfUilUmMGQasKNsZn4go9SyQSQ0WCXj/5
elr/HHy1JfAPTcE/s0bQPovIFCfBX2wS1FR3Lu/jW/B/KUf+sXcKrVDtFoHf
/16hR7FYrKUKfG0p8J+ySHxGtV/bJf7Lt1PQeoN1ZkiNVyXraI+gs66OZd9V
/t4e1RzQZ55W6LLb7d56iPUloafmiKDRG5O2268Uyldtx1FBV1uDpedfQE/f
Ma43wf07jn7anyI+4eJ8E5yvCTj/scSafyQqscbneCDxz08LfbmRf/zvS6zV
2xhGPa2MLfegv5r97aNcT+n/WJtH3jD0XSvDuykE/iVG1PtyAHwDazlfEO/R
ddyPAM/bjPiCfvDPliP+rh/zzNkkaGIkefhND/w7N6O/F64rVKlaYbWgm95w
hdGH+EXZ+XbzPKwSa3pTNom1+eXa58Yn9kr+Xap17Zf574RCIYuT5+vneut5
Xn3AnkbW04X9ijRgXwMd2Mc6J/azpR39aHbwvnvx7t+N/Zr2cH21zH8F+zhe
I7Gmf96Wue+BCr4PD/drA++bF/W3mfg+2rl/Ruip7ET8wRLel26up4jvr5fv
y4D7cPXzPemR/2SQ74Hvv3lQfh+097JhibPfjz94gPjK
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmECQWONTlTJK/uLvMAZkfeLjMIRQIpsYXOCzs
2+IofLLM4eyZM2d6ogscnl760Sp+tsyhswMIwgscNMVtT0lfhMi/CSxw8LaM
fyN7GWLeTi8Ef/WqVau63BH8e3fv3q11KXBg/yq1YualMgdjIJjsCLF/ItS8
NXYFDt8ec07vuFDm8P7du3d8NgUO/bWLDZjOQ823hJj390yZgwsQpJhD+acg
+nNMCxxivAr+9p2AmH/ZGGL+xqMQ+22NIP67fAhivp4h1L79ZQ5pQLDMAHv4
gPgAjdae/w==
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4lkzZ878eaHAwdsy/s3dz2UOaUBw7GyBQ3/t
YoOkr2UO79+9e3fuFJT/rczBGAiET0DVA/l7du/eHX20wIH9q9SKyO9lDqtX
rVrldajA4emlH63TgXygFQwP9iH45UBwfTuCf/YMEGwqcPj2mHP6ia8Q9QfW
FzhIsOns1PoEUb99TYGDlYbf7Z53EPuNVxc4bJp/NKjlJYJflzNJXvAxKv/j
7TIHkP9unsbON7yIqh6ZD/Lf316IexzmYfJB7lt1EcJn6MDkw+yDqcfGn/gI
1TytN2UOnR0dHScWFDhoitueuv0Z6t6lEP8u+QkJ31erIPoL/5c5hALB1U2Q
8AxnKgern7kXwQeZ53EUwQeH7xkI/zoDhM9wBcr/C7EPOT0AAHKh+4g=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4jQgcPtZ4OBtGf9m74UyB2MQeIzJ3zT/aBDL
bQh/8i9M/tNLP1rDP5U5gMxLYyvE4NflTJL/CFQ/a+bMmZU62PmGF1HVo/MF
1yD43x5zTu9YUeZQDgTbgfyFfVsci5dCzItkh6i/uKjMgQEEOCDyxgvKHARB
gLPQQVPc9tTvuWUOZ8+cOdPDVeggwaazU2tOmUNnR0cHB0+hA/tXqRWRsyDy
PHxQ9TMg5s8UgLpnBsQ9asKFDlcOPi9Rmw7R7yEGkd84DWq/FIIPdq8sgv/+
3bt3fIqFDv21iw2YpkPMY1MpBIfvEiBfCQiY1CHu85oBMe+BJkReZSaEvwAW
frMg/AZ9SPhPnwC1Hygf41Xw16+/zOHe3bt3ZTUg8uZ9EP/cVIboD+yF+k8e
4p+0Hmh4SkPjqxvClxRH8EH+KRdE8PfsBgJg+B3ecC15aw/EP8+A4Q9KT7ZA
+0KBQJQV4p9T/dDwZoKG70SIew/8L4DE3xSo+X8LwO5ZNh0Sfxd/F4Djn2M2
JH7OQNPf93kQ804A0zPI/FeLIPaD0jdIvcdyBB85PSGnfwD0mVHd
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKG0MAtGFDhJsOju5Lpc5wPia4ranpK9D+MUxhQ5X
Dj4vSbsF4X+Og6h/dQcqn1joEONV8DfvfpmDCxC0pBQ61OVMkt/4oMwhDQjU
MhD8zo6OjhPZCP6smTNn3sxD6AfxIwsR5oPlixH2g/iSpQj3wfgw98P47F+l
Vvw8h9B/eMO15K2nEeZ7W8a/sT2JsB9k/rFjCPeBzOs6inA/jA/zH4wP8z9M
Pyx8YObDwg9mPyx8Ye7DFf6g8CmcieD31y42aJqLMM9Kw+/2mQUI+0DqAxcj
3AOy7+pShHufXvrRKr4c4R8YH+ZfGB8WHjD9sPCCmQ8LT5j9sPCGuQ/Gh7kf
Ob6ip6LGh+gk1PiY24+wHxQeWr2o6eVjN2p6AvGR0xuID/M/TD9yfIDMR44P
kP3I6R3kPvTwBwCGWFnv
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvtIscNs0/GpQyrcwBzNdD8F2A4IhhkYME
m87OV0C+MRAUmxQ5PL30o/X79DIHJRAwL3L49phzOsfMMof37969y7MscrDS
8LvdM6vMYdbMmTMjrSHmtcwpc+js6OjwsC1yyI1u5GuYB1F/zq7Igf2r1Iqb
C6D22xc51OVMkp+4uMxh9apVq7gcIeZ7LIOYN9MRYn/4SgTf2zL+zd41CP6V
g89Ljm2G8HcCzeuvXWygtBPC/2kNMf/iHgjf0gLqngMQ/102gpp/qMwhDQiO
aSP4oUCwVR3BB7k3RxniX5+DUPfLQeTN90PlpaD27y1z2LN79+7fohD56VD3
zBSE8rdA1PcIQcxbswrC9xGF+F9jMUT9TUlIfHDNg7gvTQ7in48zoPapoMUn
UvwCABTh+sE=
      "], CompressedData["
1:eJxdVG1IU2EUHsOPFJOWjOXK1JKYNkxTGSbWqZaYX6T+6IdFUTb8URS3uBJR
VFSsEkUpbBWoGBRLRPsCW0qmqahFH1JJzEJZKRNljGX+GHSvz4k3OjDGw3nf
c57znOe+iYeOlx3RajSaPcpP/X8zqoRVolVh5i7nlEzr1NghUUvtk+0ZP2Sy
KRG2TaK+jk+Hs6Zluu1wOE7nSHTuaEN854xMOiV8FuB0r0xKSQ1lAvu8uG9L
E1jtV2QWeMLtdu83SbTFVPLV7EV9R5JEj5pel92bAR5PkCjZkDu8ehr3a+Ik
8nz4fbnRI1OGEo+NwIZJPm/g/IRMD51O5zU98MI4+AzEAFvGMK92JeqfeQv+
CTqJfk1FNFYNClyYfWA22IN50/XQK7JPJqsS/bHgax3g/mtZzyGZ5ueUWA/9
9CPgE5mMfMEo5jGnCqz2+775v7yi77GKC9HNI5g3Jofzw9AvuFWi8IDxwaLS
74XL5apQ9ld3tjVNO8j3d4FfZT/Pmy/RWO/PUwO9qJdRwPP3oP/LQpy/9Bzz
lhZjX/XPMF9sCffrFFjVp7tNYFXfz/dlumq3203F3L8V+udx/com5Kt2M74D
vrN58J+/Efw+7kR/3U3U7yKJ9hWcCKY2YP64XPZTHfhrstF/by3mncxkfjXo
f+WvH69zv40Cq9cPbhC4WglLIvunBnxOrgHfkDr2n4H51WPftTHYT8oN/n5W
IF96C3wuRqFe9V3gVxHs9xb2Z7jQT/XLcCj7rR18R0N4/08FXvJ7t8Cq3wKD
0GsxlPf9DnzLl3G9LzjfFgm9y7+x3svhN/IwHx34v5+B3t161LPNsT+MrK8P
+p2PZ/5+6NGexHwCwNEprN8CzjdvEnhpH1kCL70fOax/APkoQj+3n/W34nsd
8jG/fH6P5tn/Rfw+zLI+/7x3fwDmzkpi
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{304.8, 361.5291805}, {304.8, 360.846368}, {300.5, 360.846368}, {
     300.5, 361.5291805}, {302.3, 361.5291805}, {302.3, 
     366.24636799999996`}, {300.9390625, 366.24636799999996`}, {300.9390625, 
     366.7791805}, {301.2796875, 366.83334716666667`}, {301.5765625, 
     366.8989721666666}, {301.8296875, 366.9760555}, {302.0828125, 
     367.0531388333333}, {302.309375, 367.14532633333334`}, {302.509375, 
     367.252618}, {303.11875, 367.252618}, {303.11875, 361.5291805}, {304.8, 
     361.5291805}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{310.8, 361.5291805}, {310.8, 360.846368}, {306.5, 360.846368}, {
     306.5, 361.5291805}, {308.3, 361.5291805}, {308.3, 
     366.24636799999996`}, {306.9390625, 366.24636799999996`}, {306.9390625, 
     366.7791805}, {307.2796875, 366.83334716666667`}, {307.5765625, 
     366.8989721666666}, {307.8296875, 366.9760555}, {308.0828125, 
     367.0531388333333}, {308.309375, 367.14532633333334`}, {308.509375, 
     367.252618}, {309.11875, 367.252618}, {309.11875, 361.5291805}, {310.8, 
     361.5291805}}}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{248.5, 
     388.84799999999996`}, {325.5, 388.84799999999996`}, {325.5, 
     356.84799999999996`}, {248.5, 356.84799999999996`}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{251.5, 506.922}, {
     323.5, 506.922}, {323.5, 473.922}, {251.5, 473.922}}}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], FaceForm[RGBColor[0., 0., 0.]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvvAscls3R/zbve50DmO+H4LsAwZHAAgce
5mkxqj/qHIyBoDikwOHm+SRNo591DkogEF7g8OpBsZXzrzqH9+/evcuLLHDQ
U91Rd/x3ncOsmTNnRkZDzNv3t86hs6OjwyO2wCEp4vXGXf8h6s/FFTj8/tji
LcJUD7E/vsChKPPPodMs9Q6rV61axZUIMb+ZvR5s3sxEiP2TuBB8e7OT/T94
EfwT+wIlGEUh/J1A81qqeK/ESEH4P6Mh5nPLQfiWEQUOiSD3KNaD/Xc5CGq+
cr1DGhAc80bwQ4FgqzuCD3JvjjPEv+1KUPfbQeSLFKDyVlD7gfbt2b17929T
iPwlqHtmGkL5ohD1PUYQ855zQ/g+phD/J7NA1N+0hMSHKzD8QO5Ls4P4R/sX
JP5yXNDiEyl+AR979iA=
      "], CompressedData["
1:eJxdVFtIVFEUnTSMSosyygjNHoMzOuZjmkwz3eE0pjPlOGoak2WmptnUQT8i
P+6NsLDsARHBRIgRFNgDSuiBJSERPYwg+1FQJPAnU7NIkhS6964dJ9owDIt9
zt5rr73uWVN5zFcdYjKZvNpP/3/fq0WVoPDQq3tHnCqt1aNS0JXWmJFArko1
WoTtF/T4Hs0TeSpdCwaDJ/yCGupmekbzVVqixWQpcL1HJa2kiYqBE3bifo1X
Yr2fxyPx0ODgYPkOQRvMT5RDHtQPOgXdup40NZQP3E+CopfdDuzOw/3zWwX1
f6i0fnSpZNeiMwPYl8Pn0zifrdKdjo6Ocw7g1C3g88oO3ODAvCGpqP8oCfxj
UwR9GW7MuGmROHvTm0ubYzFvigN6bV+vklOLl+ngq8Rx/yzW06rSxLgWOdDP
awOfBXnIn07EPLZdEuv9hn3/5TV9D5SNPhiwYd5IP+cToN/sPkG/J5vdG+NV
etbV1eXX9tfcFPEp08L3q8Gvzczz1gp63V0YNWcd6tkP8/yr0f9FPc53r8K8
hQHs690KzLfyKPeLlFjX51eExLq+S+erdLalpcUS4P5zob+L67eZkK+tYzyj
GHy/1sB/idOKwa/vIPq7pxSj/tMKQd7cgfa6H4oxf3Q5+2lSMfib9qD/5QnF
mPdzMfMbU4z+Z/76cYz7uSXWr1e4JD6uRdo29s84+DRmgm/WN+DONOb3XTH2
fdGO/VT/RL+wZORbp8HnlA31Hs4C91jZ7yHszzipn+6Xt2b222Lss3c973+5
xIbfYyTW/ZZsxT6mzbzvVOy7yML10nH+bjz0vkDI9yXCb00u5pMC/gvd8Ntz
B+rdKGB/ZLC+PvjnZDbzL4H/7zuZTynwonzWrwzn2wskNvZRIrHxfvhZ/1Lk
wyvQL6qEv/8qfK+hRcyvlt8jL/v/CL8P/P78+979AX5OLLo=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     274.4984375, 496.923184}, {270.5, 496.923184}, {270.5, 497.288809}, {
     274.4984375, 497.288809}, {274.4984375, 496.923184}}}], 
    FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVFtIVFEUHR20ECOLDLES80XlYypJKKgOFEr6U5ERvSgpexFx9aOwuBfK
wl4EKcGUhBVmzqhlNTo6OTRiYvmiEkudEcU0UxxfaY5O1rl3bbhJG+7H4u6z
19rr7H1WppzbfVyr0Wg8+LeXf578u6/X69sKBJZ2yl09qJVYY0NDw61CgcWE
m8UTnhJ7Y7FYDhgFtjOhPe+HRmKpPOKLBdbWnLI67Y/IFvFY91xgT3N1k7O/
RWY0GAyJpQJL2TdYWukWWSyP7FcC89XeO5g/Iyr1OkwCmxnNTMqZFtn1rKys
k2aBbY17f8fsEpmsZ6MF9Re7UM/HCn1npkSFP8KG/ACOFb01Kpbz19TNxTfq
ob+Q8ouaUK+e1x92Op1NHwWWczOod2ia6rVA71U3+PpaoefurMi4ZRrWhn4f
cj+Sefh3oN9ALfxJteO8lzf8szgEVlbM5o3Mp/+d4Iv2VbFcz7pQxZkZC1rs
SyW2nUeYnfpfLin8eV8IB6P+ss+Ew3Deu5FwBPKPvJuLg20qDuFxuUpgddZd
Ad3hOH+tkvzh9RT/ygW2YknB2bJQiXU6HI7Nr9FfeAjpeUF+cz3yfcca6b7D
VCz3dzhZUu63ou9/LJ+f2gGsN6tYrt9lgv/ro9BvB/9/lPudEQ391RbUE2PA
l20F3qKDf8dsNJ869FdbQ/xrib9OxUo/jSpW9H+i+dQBp7eSf5zvPI/ydoEN
dKVvCo2GX6c78T8ykvapm+ZplaTMW8k35PeQ3xHfMQ+3Q1B/vJ/yg6C/ZgDz
cCkQ9YoGUd/or2JlX/xULOu94AN/Hg+A74oX6eknPz3g58U+8PW6sc+lPcjf
5sI+RHWBL2mS9seO/d0zjv199hXz7TeK/QhuofsYxr4/aAbf2BDt0wfyZwj5
mloVK/7Z5uLEKto/ys+roPtxisr+TZgof5j0vMS8xo3gPamg90kcpX0vovke
o/fEgPcu4Sfqvy0gvROiMu+H8uF/7i/wbXiCfd/vwvn4R8Q/A75/39O/fUOW
tg==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{298.4984375, 497.8528715}, {
     294.5, 497.8528715}, {294.5, 498.223184}, {298.4984375, 498.223184}, {
     298.4984375, 497.8528715}}, {{298.4984375, 496.023184}, {294.5, 
     496.023184}, {294.5, 496.39349649999997`}, {298.4984375, 
     496.39349649999997`}, {298.4984375, 496.023184}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{310.8, 495.6059965}, {310.8, 494.923184}, {306.5, 494.923184}, {
     306.5, 495.6059965}, {308.3, 495.6059965}, {308.3, 
     500.32318399999997`}, {306.9390625, 500.32318399999997`}, {306.9390625, 
     500.8559965}, {307.2796875, 500.9101631666667}, {307.5765625, 
     500.9757881666667}, {307.8296875, 501.0528715}, {308.0828125, 
     501.12995483333333`}, {308.309375, 501.2221423333333}, {308.509375, 
     501.329434}, {309.11875, 501.329434}, {309.11875, 495.6059965}, {310.8, 
     495.6059965}}}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4lkzZ868+SrfgYd5WkxrYp0DUIhBQbYAg3/z
fJJmEAeCH+B+a0EnU53Dnt27d1fLFTi8elBslfyv1sEYBBQLHJbN0f9273et
w+pVq1a9Ui5wSIp4vTHqZy1Y/wL1Agd7s5P9Ej8g6oN1EPxyIJhugODfu3v3
bq1pgcPvjy3eIUD9aUDAZl3gUJT559Dp3xB+mh3EfZc+1jooAcEjK6j7PkDM
n2wOkS96X+sA8m+lCUR/9zuIexIMCxxO7AuUWPi21kEQCDbqQuS1gfyzZ86c
ydFE8EH+lVZE8EH+OyVV4KCnuqOuHWa+GMT/dl9qHTo7Ojo0hAocZEWW5377
AbGPQQASHr/+I/gg87w56+B8UPgfDatzQI4fdD4ofgAYW77F
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGBwBWIQbQwCwQUON88naV4SrXOA8e3NTvZbyNQ5vH/37p1f
SIHD748t3l8U6xzSgKAtrMCBh3laDKt6ncO9u3fv7o0ocJAVWZ4rplPncPbM
mTNrogscTuwLlEg0gJgXHA9R/9QYov5vUoFDgPutBZnmEPP10gsckiJeb5Sy
gpj/LBti/w/rOgclIFhUADH/mm2dw57du3dXl0LMO2oHMb+4CsEvB4Lv9Qg+
2LyWAgc91R11z4H6gV5mcOgscCjK/HNI26bOYdZMIOiF+K8EaH9nR0eHx0So
/ywg/vGZUuCwbI7+t3smdQ6CQBA4vcChpYr3yh5DiH/mzoS6VxcafrMh4TlJ
E6L/zByofapQ++ZC+N4KCD5I/ScpBB9k3gxJBP/Vg2IrZwk09WIIPsi9S0Uh
7qmF8ltFIP53g6qfJAx1TwImHxQfnvwQ/01MhMgXcUPMl0yGuJebA2LeshSo
fSwQ+Z1p0PBghMZ3JkR/0P9asPlvsiH6X/+pBccnU36Bw7a1DuwCv2vB6icX
QcJ3389aBxcgUCkrcJjSLfc09wdEPw8sfr9D+D51CD7Iv3ebEHxQ/HG0o+o/
04UwPxQIpvYh7F+9atUqr0nQ+P0Dde9UaHxB3d8zC+qfb7Xg9LV9GiS93vpc
C06P0ZMg6XPbx1pweFT2QtP7e4j87A5I+hJ5B3VfM9T8t7Xg9HigBsEH+Z+l
HFV+QSE0f7yDhlcONL29h7i/Kx2aPz5Cwy8Z4p+6LxD9CfHQ9PId6p5oaP77
DYmPRRGQ/LH8P8T84jCI/atZoPkBmv+3cCLKB5B8Nj+CDys/AFPC/FU=
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmEEwscCjK/HOIW7bOAZnfrVLnEAoEU/sLHKZ0
yz311apzOHvmzJme7gKHm+eTNIP06hw6O4CgvcBBVmR5bpgRRP5NY4GDvdnJ
/ggTiHk7qxD81atWreoqR/Dv3b17t7akwOH3xxbvK8Z1DsZAMLkQYv9pqHlr
8gocXj0otjpsWOfw/t27d3w5BQ4tVbxXbAyg5mdCzLMAuscFCFLSoXwdiP6c
1AKHAPdbC05qQsy/nAwx/7UaxH7bJIj/eFUg5uslQu1TqHNIA4JlCdjDB8QH
ADrum2Y=
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYC4lkzZ878yVDoYG92sl8itM4hDQiO/S1waKni
vTInrM7h/bt37879gvLD6xyMgUD4RwFEfUSdw57du3dHfy1w+P2xxXsKkL96
1apVXp8KHG6eT9K8BOQDrWB48A7BLweC688R/LNngOBRgcOrB8VWzOEQ9Qfu
FzjwME+LSQ2GqN9+p8BBT3VH3XF/iP3Gtwscls3R/7bPC8EvyvxzyNsFla9t
W+cA8t/N39j52Uao6pH5IP9ZvK8Fu8fhHCYf5L6nRhD3MuzA5MPsg6nHxj/t
XIdiXqpvnUNnR0fHiQsFDrIiy3PFQqHuvQrx770oSPi+ugXRvzqhziEUCK4+
goTnpGSI+plvEXyQeR5fEXxw+P6B8IWSoO5lKYTw4yH6kdMDAP2z7XY=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4jQgcNMsdLA3O9n/w7DOwRgEhDH5y+bof7Oz
gfAna2Hyb55P0pwUXOcAMi/NDJNflPnnkLZtncOsmTNnVsZg52cboapH53vz
IvivHhRbHeascygHgu1A/pRuuadr2SDmRZpD1HOz1DkwgIAFRD6Xsc5BEAQs
Cx1kRZbnmv2vdTh75syZHqtCBx7maTGpf2sdOjs6OjhsCh1+f2zxnvIbIs9j
B1X/qxZs/kwHqHt+1oLdo+Zc6HBiX6BE4g+Ifg83iPzr77UQ+70QfLB7fRH8
9+/eveMLLHRoqeK9YvMDYh5bCCR87wH5SkDAFA5xX+tPiHkPIiHycb8g/AWw
8PsN4TfEQ8L/0keo/UD5APdbCzo/1Drcu3v3rmwERL7oPcQ/N4Mh+rvfQf3n
D/HPwrcQfqQ3NL6gfEl3BB/kn3JHBH/PbiAAht+2tQ7sH95C/PPMApKeKoD2
hQKBqCnEP6wfoeFtBA3fzxD3HtCHxt83qPm6EPc8BIYHKPouakPi3/kPJH7O
QNOfEUMd2LwTmhDzVVkg6QWUvkHqmzkQfOT0hJz+ARGfVQE=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKG0MAt2FDjzM02JcTeocYHxZkeW5YRYQfnFPocOJ
fYESC60h/M99EPWqdlD5iYUOAe63Fqx0qHNwAYKWKYUORZl/Dr12rHNIAwK1
GQh+Z0dHx4nZCP6smTNn3pyH0A/iRy5EmA+WX4ywH8SXXIpwH4wPcz+M//tj
i7eJAUL/trUO7B90EObbm53sr9BC2A8yn1ED4T6QeUfVEO6H8WH+g/Fh/ofp
h4UPzHxY+MHsh4UvzH24wh8UPqt/1cL5LVW8V/b8q4Wbp6e6o46dCWEfSH03
C8I9IPsE2BHuvXk+STOIA+EfGB/mXxgfFh4w/bDwgpkPC0+Y/bDwhrkPxoe5
Hzm+pn2rRYmPgM+1KPFx40Mt3H5QeKS+q0VJL9pva1HSE4iPnN5AfJj/YfqR
4wNkPnJ8gOxHTu8g96GHPwDzDFPs
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{295.8, 479.6059965}, {295.8, 478.923184}, {291.5, 478.923184}, {
     291.5, 479.6059965}, {293.3, 479.6059965}, {293.3, 
     484.32318399999997`}, {291.9390625, 484.32318399999997`}, {291.9390625, 
     484.8559965}, {292.2796875, 484.9101631666666}, {292.5765625, 
     484.9757881666667}, {292.8296875, 485.0528715}, {293.0828125, 
     485.12995483333333`}, {293.309375, 485.2221423333333}, {293.509375, 
     485.329434}, {294.11875, 485.329434}, {294.11875, 479.6059965}, {295.8, 
     479.6059965}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQffbMmTNvpIsdls3R/zbve60DmC+H4LsAwRHFYgce
5mkxqj9qHYyBoFil2OHm+SRNo5+1DkogoF7s8OpBsZXzr1qH9+/evcvTLHbQ
U91Rd/x3rcOsmTNnRmpDzNv3t9ahs6Ojw0O32CEp4vXGXf8h6s/pFTv8/tji
LcJUB7Ffv9ihKPPPodMsdQ6rV61axWUIMb+ZvQ5s3kxDiP2TuBB8e7OT/T94
EfwT+wIlGEUh/J1A81qqeK/ESEH4P7Uh5nPLQfiWGlD3KNaB/XdZCWq+cp1D
GhAck0bwQ4FgqziCD3JvjjDEv+1KUPfzQeSLFKDyXFD7gfbt2b17929WiPwl
qHtmMkL5ohD1PUwQ855zQ/g+rBD/J7NA1N/khMSHKzD8QO5L44P4R/sXJP5y
RNDiEyl+Aaqd8I8=
      "], CompressedData["
1:eJxdVGlIVFEUfs6korlkI6aZS6Y407hMbrl7IRtxiUbFFCoIQUtCind/RMK7
RGhYtkBEMBFiBAW2QAlSWBIS0WIE2R8FRQL/ZGpWmlMKvXe/Uy86MAwf595z
vvOd792tzcfqWiyKonj0n/H/dlSPHM5CrFcPzJQLlmREFmdXeuJn2isEa9Uj
IJOzwXss8HilYNe8Xu9JJ2dq2+rIbJVgEXospgIfrRFML6mwZGDnHtxvTTSx
0a9mi4mnJicnD0ZzlpHySByuQX1vJGe3rmcuT1UBj2/gLC7ydvu+Stw/H8rZ
+Ltmx3u3YNl6DAQD1+2i84GULxPsTn9//zl/4Kwi8HlhBVZzMa/FgvqDmeCf
6MfZp2leeNNu4rK8V5fyEzHvDn/otTtZsHI9ngeBr0il/mGkp0OwhXk9bNDP
kwY+wTHId6VjnrR4Exv9ppP+y+v6NjfNPphIw7w2J+Wd0G8tg7Nfi53VOdsF
ezI0NLRf319nR+iHYjvdzwW/3hSaN5+zl8O10X7bUC+7kOZPQP9nRTg/HIt5
a0uwrzebMF9MKfWzmdjQZyXUxIa+G4MEO9vd3W0vof7roL+b6vcqyB8pILyq
Sb6f8+C/dJ8m+Y1lo3/1sibrP3Zx5qmY6Gv7psn549LJT4ua5K840P/ygibn
/ZhM/OY02f/MHz/OUb9YExvXD0WZ+IQeOyPIP/Pgw0PAt/QL8EAg8fuqyX1f
tGI/LUvoF6Ag3+MDn9Orqqz3cA14xKfC7xby5w/1r36GX14vqfBbOPY5+h24
K8rE0u/xJjb85nJgHz79vtx3FvZdv0L1CnD+7k9V6n2BIT+2pkq/dbiJjx/4
r6+G3576wz839pI/gknfOvjnVDjtvwH+vx8J/7sagcM2k35NON+XYGK5jxQT
y/fDSfo3Ih/iQr/oBvr+c/C9WuuJXz69Rx7yfzG9D/T+/Pve/QbZRylN
      "]}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{251.5, 506.922}, {
     322.5, 506.922}, {322.5, 474.922}, {251.5, 474.922}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{125.75, 
     388.84799999999996`}, {209.75, 388.84799999999996`}, {209.75, 
     355.84799999999996`}, {125.75, 355.84799999999996`}}}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], FaceForm[RGBColor[0., 0., 0.]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{140.05, 377.52918050000005`}, {140.05, 376.846368}, {135.75, 
     376.846368}, {135.75, 377.52918050000005`}, {137.55, 
     377.52918050000005`}, {137.55, 382.246368}, {136.1890625, 382.246368}, {
     136.1890625, 382.77918050000005`}, {136.5296875, 382.83334716666667`}, {
     136.8265625, 382.8989721666667}, {137.0796875, 382.97605550000003`}, {
     137.3328125, 383.0531388333334}, {137.559375, 383.14532633333334`}, {
     137.759375, 383.252618}, {138.36875, 383.252618}, {138.36875, 
     377.52918050000005`}, {140.05, 377.52918050000005`}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIN3xMd6nMmyX/sLnfYsxsIHiD4s2bOnHnzXKLD
4Q3XkqdOgPIPJjr4WMa/uTuz3EEJCB5tSXSQYNPZqbW43CENBNYlOlw5+Lwk
bQOCDzJv4kEEH2Te1UsI/RxfpVb8vI9q/t8XCPtB5rF9KncAuffAA4h9Xd/K
Hc6eOXOm5zuCLwgEgXxJcP77d+/e6SkkwfWDrFfTTYKbD+ZbJcHtB/GXOSTB
3QfjI7sfxEf2H0g/sv9h5oPCB2Y/LPxA7vXhS4KHL3r4AwD7Zruz
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIN3xMd6nMmyX98Xe4A5n9A8F2AgOVVosOE2sUG
SkD+2TNnzvA8SXTYNP9oUMvLcod7d+/elb2X6HDl4POSZ8/LHcqB4PuNRIdn
l360hj8td5g1EwiuQPjXH5Y77Nm9e7f1hUQHLXHbU9H3yh2UgODRmUSHwxuu
JX+9CTG/5xTE/CVXIOaZn0h0WNi3xTH4PNT+4xDzvp9A8EHunXgQwQeZd3VT
uYMgEEw8nejA8VVqxc/lCPf4WMa/+bsAYv+iuxD3s80qd+js6OjweJnoIMGm
s7NrGtQ93xF8kPwJ1iQ4f/WqVauyBJPg+o2BoFgqCW4+yL/Vyklw+8EBrpEE
dx+MD3M/jA/zXygQXFVLgvsfHD8qSfDwAdmvpZQEDz+Qfy/KJcHDF+YeWPiD
zBMVS4LHD0j/K4EkePyB1H/mSoLHLzj+gf6FxT/I/x3/0NILUvoBAF1fGeM=

      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQPWvmzJmR3xMdJNh0dmrtKHdwAQKWTwj+vbt378a+
TXTg+Cq1QnJnuUMaCLxMdHh26Ufr913lDuUg8BQif3NPuQPQSIaGx4kOE2oX
GzTtR/DrcybJfzyEKu90DE3/CVTzt59CtX/mGVT3dZ0td0B2P4j//t27d+v+
IPiCQBDImATXD7LfgTUJbj7IenPOJLj9xiDAnQR3H4wPcz+yPMh/KPr3oJoP
Ch9k+0Hhh+w+UPiihz8AAS6tpg==
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     157.5015625, 382.99949300000003`}, {154.3078125, 376.04480550000005`}, {
     154., 376.18699300000003`}, {157.1890625, 383.1354305}, {157.5015625, 
     382.99949300000003`}}}], FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVG1IFFEU3dTKSCQhMYVKS0JMKLESg6Vb7A8RCTJMJESwN/6QsKJgfohk
YLCRmlq6rmaiSdkGS/nBIqumrmZuq1ZmJrIWWSZLGFuWRkjNzrk4SQ/mx+Hd
d8955543UTnn0iR/nU63TvlOKZ+f8iUoq80m6PLZyp2Pm2SqNZvN4XZBh2OO
T8c1yiQry9YjKCvl/Iq1QaYRl8tV0i9o7tXy1cQ7Mu1SVs5TQa0Ng2kDt2VK
V1aVU1D+6SvBRXUy5Sprz5igbRviOvNqud+4oMAfES2ZZplClPXyraDUpOwv
hTUy+fRcnEH/SRP6hX6EvngT+FM9qHdXs16vhn316ctrcegf6M83oT5zvaT2
q1D4Ztxud/1miRrL2o+2mblfiKTqTakDnytUUvVk1MukWKYripDU+wrFj4cW
iyV2h6Te930j10fivLMZ95V3S+R49OZMx33ejwbfd4uGff2KrRouL7y7v6lD
pmtGozE5Enrj7eCnMMZP0D8xmLED54P8GA+ivvebWIPJo2GDsgJmBb3u+3zp
3gCfd2O/wsH+TQqKDdM7C/pl6rLb7QUvME9PL/cbZr97MO/cHp63Q8O++0Uv
8nwPSv9h3/nueeCEKbGKVf3jyMOSk/MzhXyRC/qL36G/YYTz9gk4YBT+PfNw
Pkc5v17WM8b8vzSs3sdfWsWq/iDoKxwFntvK/ip8XxcWFvK3S/RzdpNp/jn8
mojGvneY87SX8zSEvGXFo76F/U49hDyc7OP+SVzfDf1GPfJwrJPzewT9L7Rr
WH0vVg379OofwB+DHnzJzawnCfVLDfBz6QD4LHX8nvehPrCG+8WAL6SKcZSk
vt/wSrzfE+HI98QN9m8L/DOUcT43gs9WwvleQb6811GvW9Sw6p9nLa76gPln
lHD/aZ5XKd6fZ5zrS1nPCPL6u4znO8T5KOf33sf5rmD/u/C/C7rJ79sGPtst
5N3eKlT/c6rBl2dF/iJrOE8W5jeD79//6V8+gW+z
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{181.7484375, 379.7760555}, {
     177.75, 379.7760555}, {177.75, 380.14636800000005`}, {181.7484375, 
     380.14636800000005`}, {181.7484375, 379.7760555}}, {{181.7484375, 
     377.946368}, {177.75, 377.946368}, {177.75, 378.3166805}, {181.7484375, 
     378.3166805}, {181.7484375, 377.946368}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVG1IU1EYvlmOomWIiR8QI6lRw0jZD6ko3sIfIRIk+CNCikGdg8QKDM6v
iH4UFRUVSC2oiPxhN7IvMWSCFgo5prAxi1yK09zW0A3ZbKUJnXveFw7WC+fH
w33vc573ed57t3nONZ1eaxjGGnkOy1MgzxmruhiU26p7W9sFCKv6GaxfrOys
eCSgWVb7KIPIh8QFW4cA+YoxEGVw6ew9R60pwC0rm2TgPXG56NRrAfWy1uUY
7Nt5NGrvoed/GMTDv67U+QW8ME0zVcjhzsVnNZ4BvO+9ncPT292H3EMCHvp8
vuPFXOkxhwX0+f3+5VKu7neOChgJBoON5YivhjW2+gOfNf45s+F+5zfi34L8
bTF8fnMT9rtmBVTJ8tiQL57EeZuXGbx9MtQ0mBKg/JlbjePTGlvtpePox90f
NG8I/XQlcJ6vw9T/XcD1a7I+Mmjce3JuIoZ+Gn3oj5hEfudLxPlZ1F/Xg3xm
CnFe5tPScH7FmyZ9AeSvXxAwOSErgvxbc+RHDN+/sYj63mU0tvSP/dZY8Rdw
NU8oh/orNnLF15LFPPaXcHV/eoH0VqLfyQzN60B/G+bJ7x3I90bqz6Rl7aL8
EjT/bspvRkCxVTXIXzSFfL5azC8b1Vj59UVjq78rjO8f28PBVXYgEB2hfXWh
/pVP5KeTK7+2D2J/yIH7WNVPesuQP9+LeR3ZzNU+B7tRv7cQ9ba+Iv1LmH/o
OelJ0753IJ99mvJ6TPsdobwfYB5t4xqrfZ3SWPmb0Fh9j/MaKz+zq/ncSxqr
/A7y/7DK+xbtD33//2Lrf/AX55j3JA==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4lkzZ868aZTgIMGms9OLodwBKMTg0ITJf3rp
R6v48jI4P8ar4K/fwjKHciD43pLg8O0x53SNuWUOaSDQleCwaf7RoCWzyhxC
geBqf4JDbnQjn8IMqP7pCQ7elvFv7k6DqF+2AMF//+7dO72VCP6e3bt3/96U
4MD+VWqFJFD/2TNnzvDsS3Coy5kkP3EWhH/mCMR90yeUObgAwZG9UPf1Q8xX
2w6RN+8rczAGgs8bIPoDeyHuObAqweHKweclaT1lDkpAkLQYIv+xu8wBHD6z
EHyQf827EHyQ/6bWJjhYafjd9oGZXwLxP8vkMgdBIAjMSXDQFLc9tXs6xD6G
DEh4HJiH4IPME1yB4IPCv+sr1H4j7HxQ/AAAf0e5aQ==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGBwBWIQnQYC7xIcnl760Tp9S5kDjO9tGf/m764yh3t3796d
+yHBgf2r1IqdB8oczp45c4bna4KDBJvOzlNHyxz27N69u/pngoOmuO2p26fK
HGbNnDkz8n+Cw5WDz0vUzkPMW8aWCFa/6hJE/W/eRIcYr4K/etcg5seKJTrk
RjfyPbgBMf+MfCLY/r23yhxcQEAzEWz+7DtlDuVA8N0IYl7XXYj5z2wQ/Pfv
gMAdwQebF5joYKXhd3sNUD/QywwNUYkOdTmT5D8CzTcGgeREsP8sb5Y5CALB
xCyI/lPXIP6ZWZDosGn+0aAll8sclIBgUVmiQ3/tYoOmCxD/WFdD3XsGGn51
ieDwDD8B1d8Ite8w1L5mCF9wP4IPUr99J4IPMi92B4L/7THndI7taOq3Ivgg
92ZtgYZvE4TvtRni/54mqHs2Qd3DickHxQffOoj/lLgh8uaroObzQdx7cRnE
PB9BqH2LIfLFotDwWACNbymIfvF5EPNvykP0b5wNiU8WtUSHwxuuJV+dCVGv
pgsJ35YZZQ6dHR0dHiaJDgv7tjgaT4fol4TF7zSoe10QfJB/d/si+KD4EwxD
1T8zFmH+6lWrVmmlIuwPBYKpOdD4nQ11bzE0vuZC7a+F+mcqJH3llULS64JJ
kPS4PQeSPqsnQMLjcxI0vfdB5M0jIenrZg/UfX5Q87uh6dERwQf5n8MMVd5B
G5o/eqDhpQhNb30Q94uKQ/PHBGj48UH84zIZov8AGzS9TIO6B5g/wflvFjR/
AfMvKH/kzIPmpy8JYPsLF0PzAzT/V65AlA8gecN1CD6s/AAAxbXqaw==
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQbQwC2YkOdTmT5C/uLnNA5gceLnNYvWrVKq30RIeF
fVschU+WOcyaOXOmZHyiw9NLP1rFz5Y5CIJAeKKDprjtKemLEPmb3okO3pbx
b2QvQ8wrtkXwQ4FA1BzB37N79+7fBokO7F+lVsy8VOaQBgRq2hD7J0LNi1RN
dPj2mHN6x4Uyh3t3796VVUh06K9dbMB0Hmq+NMS8v2fKHDo7OjpOiEH5p6Du
EUp0iPEq+Nt3AmL+Mn6I+RuPQuyv5oH47/IhiPmxXFD79pc5nD1z5owPJ/bw
AfEBJ0uPCg==
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYCYmMg+OyZ5OBtGf/m7ucyh7NnzpzpcU5y6K9d
bJD0tczh3t27d+faQvnfyhzSgEDNAqoeyC8Hgu1GSQ7sX6VWRH4vcwgFgqk6
SQ5PL/1onQ7kA61gOKCK4L9/9+7dOnEEf9ZMIOBNcvj2mHP6ia8Q9Q3sSQ4S
bDo7tT5B1OcxJjlYafjd7nkHsT/tX6LDpvlHg1peIvh1OZPkBR+j8j/eLnMA
+W+zfRJWvuFFVPXIfJD//vZC3fMEkw9y36qLED7DDkw+zD6Yemz8iY9QzdN6
U+YgCAQTXyY6aIrbnrr9GerezxD/LvkJCd+rfyH6C/+XOaxeBQS8kPAMZyoH
qzdWRvDB5hkh+GD7HCH86wwQPkMAlP8XYh9yegAAPb7saA==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4rNnzpzpmZXk4G0Z/2bvhTKHNBDIw+Rvmn80
iOU2hK82F5P/9NKP1vBPZQ4g885sweTX5UyS/whUbwwEnxmSsfINL6KqR+cL
rkHwvz3mnN6xoszh/bt37/K2Jjks7NviWLwUYt7mbRD1FxeVOTCAwA6IvPGC
MgclENiV5KApbnvq99wyh1kzZ86U3JvkIMGms1NrTpmDIAgcSHJg/yq1InIW
VP4IVP0MiPnGJ6HumQFxj8+5JIcrB5+XqE2H6J94BSK/cRrU/jsIPti9jxH8
e3fv3pV9leTQX7vYgGk6xDyeD5DwXQLkuwAByzeI+7xmQMw78BsirzITwndg
hIbfLKh97Mng8J8+AcoHhm+MV8Ffv/4yhz27d++2/gGJH/M+aHi9h7gnsBfq
v+cQ/6T1QOXvQeOvGyp/DcEH+efdKQS/HAQOJjkc3nAteWsPNL52QtKTLdC+
1atWrdLaBPHPqX5oeK+Bhu9EiHsblkPjbwrU/EUQ9yybDom/RfMh8c8xGxI/
M6Hp7/s8aPjPhpj/ahHEflD6Bqn3WI7gI6cn5PQPAGFEaaI=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKJ0GAnHJDhJsOju5Lpc5wPia4ranpK9D+M8Skh2u
HHxeknYLyk+FqH91B8rPSnaI8Sr4m3e/zKGzo6ODozDZoS5nkvzGB2UOZ8+c
OeNTgeALAsHEegTfGAg2tyL0g/ldCPPB/H6E/SC+8SSE+2B8mPthfPavUit+
nkPoP7zhWvLW0wjzvS3j39ieRNgPMv/YMYT7QOZ1HUW4H8aH+Q/Gh/kfph8W
PjDzYeEHsx8WvjD34Qp/UPgUzkTw+2sXGzTNRZhnpeF3+8wChH0g9YGLEe4B
2Xd1KcK9Ty/9aBVfjvAPjA/zL4wPCw+Yflh4wcyHhSfMflh4w9wH48Pcjxxf
0VNR40N0Emp8zO1H2A8KD61e1PTysRs1PYH4yOkNxIf5H6YfOT5A5iPHB8h+
5PQOch96+AMAcA9UOw==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVF1Ik1EY/rJcRMuQEn8gRlIjR5GyC6ko3sKLsAgSvIiKYpzThZgFxvGq
oIuioh8KpBZURF7YF9mfGDJBC4UcU9hYhS7FaXNr6IZsttKEznfeFw7WC+fi
4Xu/5zzv87zft9lzro6vNAxjhTwH5MmT54xVHQxKbNu7G1oFtFjVy2D1fFl7
6SMB9bJahxmEP8Qv2NoEyFeMvgiDS433HFWmALesTILB2eOXC06/FlAja1WW
we5tRyL2Lnr+h0Es9OtKtU/AC9M0k/kc7lx8Vunpw/ve2zk8vd253z0g4KHX
6z1WyJUec1BAj8/nWyzi6n7nsIChQCBwuATx1ZDGVr//i8Y/p9bcb/9G/BuR
vzmKz2+uw35XTEC5LI8N+aYTOG/9IoO3Twbq+pMClD8zy/H0pMZWe9Eo+nH3
B80bRD9dcZxnZJD6vwu4fk3WRwaHdp2aGYuin0YP+tMyjvzOl4hzMdRf3YV8
ZhJxTuZzovb8UlOK9PmRv2ZOwPiYrDDyb8qSH1F8/8Y86nuX1tjS//m3xoo/
j6t5glnUX7qWK76TGcxjzwau7k/Nkd4y9DuRpnkd6G/tLPm9FfneSP3plKwK
yi9O8++g/KYEFFpVifwFE8jnrcL8MhGNlV9fNbb6O0L4/tGdHCqK9/ojQ7Sv
LtS/9In8dHLl15Z+7A86cB/Le0lvMfLnujGvg+u52udAJ+pvyke9Da9I/wLm
H3xOelK0723IZ5+kvB7Tfocp7weYR/OoxmpfJzRW/sY1Vt/jrMbKz8xyPveC
xiq/ffw/rPK+RftD3/+/2Pof/AWOIvX7
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
      1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
      0}}}, {{{180.45, 363.24636799999996`}, {180.45, 365.283868}, {180.45, 
      365.461993}, {180.45, 365.655743}, {180.45, 365.865118}, {180.45, 
      366.07449299999996`}, {180.45, 366.268243}, {180.45, 366.446368}, {
      180.35, 366.2890763333333}, {180.24270833333333`, 
      366.12970133333334`}, {180.128125, 365.968243}, {180.01458333333332`, 
      365.80678466666666`}, {179.9046875, 365.64740966666665`}, {179.7984375, 
      365.490118}, {178.0625, 363.24636799999996`}, {180.45, 
      363.24636799999996`}}, {{182.209375, 362.583868}, {181.2296875, 
      362.583868}, {181.2296875, 360.846368}, {180.45, 360.846368}, {180.45, 
      362.583868}, {177.15, 362.583868}, {177.15, 363.1354305}, {180.35, 
      367.252618}, {181.209375, 367.252618}, {181.209375, 
      363.24636799999996`}, {182.209375, 363.24636799999996`}, {182.209375, 
      362.583868}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQPWvmzJk3/6c7bJp/NChlWpkDmM+aAed3dgABd4aD
BJvOzldAfhoQPBPIcHh66Ufr9+llDi4gIJbh8O0x53SOmWUO9+4CgVSGg5WG
3+2eWWUOxkCwWQ5iXsucMgdBIJiolOGQG93I1zAPon6uaoYD+1epFTcXQO1X
z3Coy5kkP3FxmUMoEIhqQcz3WAYxz1gbYn/4SgTf2zL+zd41CP6Vg89Ljm2G
8IuB5vXXLjZQ2gnhf5aHmH9xD1ReAuqeAxD/LeOFmn+ozOHsmTNneoDhA+Ov
XrVqVdZ3BB/s3nfpYP/6HITyn0LkzfdD+XfSIfbvLXMoB4LvlyHy06HuMT4N
5W+BqJc8CzFvzSoIf+aldLD/NRZDw/N2Ojg+uOZB3HfmSTrYPx9nQO37gBaf
SPELAD4m7u4=
      "], CompressedData["
1:eJxVVG1IU2EUHjIyo6IRtjIyEhKNUZlIaV8n8ZdBpBERFYGV9/3RFxTXH1IU
GBQNRUnsC8yMColoWVnZJJk5cSvzg0xMC8fUpUzGWrMPqffe57BbB8Z4OPc9
5znPed53RdGJwiNxJpNpp/xp/9evycgQtHiW7UWDT6U8LWyC6sqfbMscVemt
1+udmyrI9ejDoaxxlTJlhJMFnT1atdwRUClFxogVOGNCJVnSdG4BcGgC572z
Daz3Mxn4VbOMaYVy0nYM2iZQPzOk0OPaN4V3AsCNAYXSrZs7l47j/BKfQv6e
6Qs1fpWKtRgCto7w9/2cH1Zpt4zEXuDoAPjYu4DX92Fesxf1S9+BP3Uq9N2X
UCPcBt6efXBypgXzFvUoul5zXCpduihjEHzz2rm/H/mGDpWGh2RMKbp+iR7m
8xP5fC/m2WsWMaz1ez1P/J9fJOjYvvPzb3kwb2oy5zuh36+VguIjSfd/yH4l
Mprk/irO1K+Nc/P5dULnd7iN590gqK917HR7K+u3SWD+Ft7fVnxf9hLz3s7F
viqf8X7yuJ/DwJo+zgcG1vTtv6eSRUZBLvevZ/23MK5FvjuH8Q3wHciC/8I1
4Hd3DfpbqlH/VLqg/fknZ1ZXYf6NKeynCvA3JaH/nnLM22Zhfnb2cwJ/f5n7
/VFiWNf/m4GngsHg8a/sHzv4jH7Bvs0VrF8/vrdUYt/LurDfVVe4XwfyBVdZ
/1bUK7kJXNbMfq9jfZqUmH6aX6ob2W8P+f442D9PDaz73WlgzW8RN99XeV7f
93vW8znX+8j+cCq63rs+c96l6H4jP/PxgH93AHqX9qJecZD98Qn3wxli/ceY
fxh6HAgxnwjr85v1i/L9ihcxrO9joYH19yMZ+4xG+P6nYZ9DYdZfvl/afe0I
Mb9sfo+meD7Ceesk6/PPe/cX/L5SSQ==
      "]}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{125.75, 
     388.84799999999996`}, {208.75, 388.84799999999996`}, {208.75, 
     356.84799999999996`}, {125.75, 356.84799999999996`}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{125.75, 506.922}, {
     209.75, 506.922}, {209.75, 473.922}, {125.75, 473.922}}}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], FaceForm[RGBColor[0., 0., 0.]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{140.05, 495.6059965}, {140.05, 494.923184}, {135.75, 
     494.923184}, {135.75, 495.6059965}, {137.55, 495.6059965}, {137.55, 
     500.32318399999997`}, {136.1890625, 500.32318399999997`}, {136.1890625, 
     500.8559965}, {136.5296875, 500.9101631666667}, {136.8265625, 
     500.9757881666667}, {137.0796875, 501.0528715}, {137.3328125, 
     501.12995483333333`}, {137.559375, 501.2221423333333}, {137.759375, 
     501.329434}, {138.36875, 501.329434}, {138.36875, 495.6059965}, {140.05, 
     495.6059965}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIN3xMdijL/HNJ+W+ewZzcQPEDwZ82cOfPmuUSH
bWsd2C98hPIPJjrYm53sl/hd56AEBI+2JDrwME+LSWWpd0gDgXWJDif2BUos
FETwQeadVkLwtwPNEzCph+v//bHF28SxHsV8C696uP0g8xyD6x1A7j3wAGLf
0fB6h7Nnzpzp+Y7gCwJBIF8SnP/+3bt3egpJcP0g69V0k+Dmg/lWSXD7Qfxl
Dklw98H4yO4H8ZH9B9KP7H+Y+aDwgdkPCz+Qe334kuDhix7+AOXDrns=
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIN3xMdijL/HNL2rXcA8z8g+C5AwPIq0aGlivdK
jE+9w9kzZ87wPEl0WDZH/9s+r3qHe3fv3pW9l+hwYl+ghKJnvUM5EHy/kehw
83yS5iS3eodZM4HgCoQv5FzvsGf37t3WFxIdZEWW506zr3dQAoJHZxIdtq91
YDewhpjfcwpi/j1TiHnmJxIdpnTLPe01gNp/HGKekRaCD3LvaSUEfxvQPAGR
egdBIJh4OtHh98cWbxNOhHvszU72WzBB7F90F+J+x991Dp0dHR0eLxMdeJin
xRz9Xgdxz3cEHyR/gjUJzl+9atWqLMEkuH5jICiWSoKbD/JvtXIS3H5wgGsk
wd0H48PcD+PD/BcKBFfVkuD+B8ePShI8fED2ayklwcMP5N+Lcknw8IW5Bxb+
IPNExZLg8QPS/0ogCR5/IPWfuZLg8QuOf6B/YfEP8n/HP7T0gpR+AC8B+Ts=

      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQPWvmzJmR3xMdeJinxaRK1ju4AAHLJwT/3t27d2Pf
Jjr8/tjiHSJV75AGAi8THW6eT9I0kql3KAeBpxB5Ebl6B6CRDA2PEx1aqniv
7FFA8Isy/xzSVkGVr1FH06+Fav4nbVT7r+iiuu+oXr0DsvtB/Pfv3r1b9wfB
FwSCQMYkuH6Q/Q6sSXDzQdabcybB7TcGAe4kuPtgfJj7keVB/kPRL4dqPih8
kO0HhR+y+0Dhix7+AJH0omw=
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     157.5015625, 501.076309}, {154.3078125, 494.1216215}, {154., 
     494.263809}, {157.1890625, 501.2122465}, {157.5015625, 501.076309}}}], 
    FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVG1Ik1EUni4zapWGK5UUP6ZYS1daioF5IMFCf2RkZFTQuK9RUoH+MCze
N8hgkRGIBoZFfyqaFFSg0mSUP0pzYmFRVrMPM2jidMvU5dTue8/BN+nA/fFw
zz3Pc597zk20nt4r6XU6XQhf+/kK5SuLx+M2BpXHg50jegWuNzU1xTgYZKS0
y8dCFajm0eZksKfww62fOgV6XS5XXSeDgT7rhsp5GZJ4WJ8zuNNsmZyblaGU
R+NLBtYDIw+fBGUo55Hax8Cgv3bo9oyM9foZzPhqixr+yBDJ4/V7BvnZ3Vfb
AzKoeqoGsf6aANYzfkd9FdOy4C/2YH40x0KvT8Nqfun0YmycR/33KL8sTBL1
enj9QbfbfWOFBA2X44dH/1C9SEnovRhEPpdREnrq52TglunOx0rivje5Hy12
u31jvCTuG6tHf1wJeD5sKfpXnSxB630IH19G+ybkSzdoWK3nXK3h2pqVbz6t
VeCSzWbblYB6K9Yrgh/WEU7A+jmrCJvwvCGUcCrmP/WzRRg8Gi7gsWSIQZez
JPprCp13434Pryf8e8cgLuruydZkBTocDsfZV/ieKUlUr5v85nrU9y530nub
NKze70ipgu+7TfoPq+endyPOGmALWOjvx37I3ET9yPePcr9r0lF/7WesL2cg
X+ow4h0W9K/LQ/1pof71kZ7NxB/QsLiPXlrAQr8B9bVbEP+IIn8535jX6z0V
J4HnS9X25HT0660J981mmicz9VOaIvrt8BbMHyK/i7OxH64kUf1cyo9H/bY8
7IdzsVivLB/rtxg1LOYlQsOq3jPL0Z+CPOS7EEZ6cjE/MwT9nNqKfMNBmmcL
5u8M0LykIV/RJOFESczvvl84vyUx2N8RPpwPiED/5DGc95xw5POP0jzNYn+Z
RzFfN6Fh4Z9nMW78hu9fT/nwkd7LK4v58/RT/hjp6cV+zR6n/+QF9YeP5v0Z
9bef/pMO/O8KJ2i+25DP/1sW/e54xIT/zVPId+IB/m8HA3i+zk78M8j373/6
F8fkbs0=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{181.7484375, 497.8528715}, {
     177.75, 497.8528715}, {177.75, 498.223184}, {181.7484375, 498.223184}, {
     181.7484375, 497.8528715}}, {{181.7484375, 496.023184}, {177.75, 
     496.023184}, {177.75, 496.39349649999997`}, {181.7484375, 
     496.39349649999997`}, {181.7484375, 496.023184}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGInIGYC4jQQWJfuwMM8LWbptzqHchDYn+7w+2OLd8i/
OodQIJh6Lt3hxL5ACUfWegegFoYDt9MdijL/HMrmrncwBoLPL9IdkiJeb5wl
WO/gAgQsX9Id9FR31LmLQ+X/pDvcPJ+kWSRT77B61apVr1gzHFqqeK/MUawH
27edJ8NhSrfc01y1eodZM2fOjBTMALvnqVa9w57du3f/Fs0A25+oX+9w9syZ
Mz4SEP5BYwQfpJ7VAsF/9aDY6rEt1HwRiPlrnSDyPbwQ9alu9Q5KQJDEBjFP
0ase7N/Q3+kOy+bof/vnXe8ADp83qPxnjxB8kHLRW5DwOO0F9e9FSHimekD8
c/MkVL1rvUNnBxAcSnewNzvZL+EMCU+GPZDw2WQPMV9tLYRv5A5xv/k2iHlP
vSH878D4CXC/tWClP9R9pyDm1wXVO9y7CwRXIOZHhELD4yFE/9EwiPs2v0fw
Qe6/+hPBB5vPlAH2D3cYxP2S3Blg82aEQOLDWjgDbL9mMNS9UpDwVg6E+lce
Er6tftDwVoWY9xro/vfvgEATGn8eUP/rQuMPGD6CIGAAMd/TEWLeTENI/Ona
Ivjg8LJA8EHqXxpD9AfqZzjIiizPFdOHplctiPsttKDhqZYBDq84VYj6i/KQ
9BijAHWvOMR8I2lIfHnwZ4DTM7sYxP15rBD3LhWAuv8XJP65uaHueQdN76wQ
83geQePrfx0kfV+BxvfPOnB8FN9C8MHp9QGCDw7f5wg+OD++RfDB4fkZ1Tzj
Xwg+OP7sMjD44Ph+BzEflv/R+aDyAAA43dLT
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4lkzZ868aZTgwMM8LaY1sc4BKMTg0ITJv3k+
STOIA8EPcL+1oJOpzqEcCL63JDi8elBslfyv1iENBLoSHJbN0f9273etQygQ
XO1PcEiKeL0x6mctRP/0BAd7s5P9Ej8g6pctQPDfv3v3Tm8lgr9n9+7dvzcl
OPz+2OIdAtR/9syZMzz7EhyKMv8cOv0bwj9zBOK+Sx9rHVyA4MheqPs+QMxX
2w6RL3pf62AMBJ83QPR3v4O458CqBIcT+wIlFr6tdVACgqTFEHltIB8cPrMQ
fJB/zbsQfJD/ptYmOOip7qhrh5lfAvG/3ZdaB0EgCMxJcJAVWZ777QfEPoYM
SHj8+o/gg8zz5qyD80HhfzSszgE5ftD5oPgBACOdxQ0=
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGBwBWIQnQYC7xIcbp5P0rwkWucA49ubney3kKlzuHf37t25
HxIcfn9s8f6iWOdw9syZMzxfExx4mKfFsKrXOezZvXt39c8EB1mR5bliOnUO
s2bOnBn5P8HhxL5AiUQDiHnL2BLB6p8aQ9T/5k10CHC/tSDTHGJ+rFiiQ1LE
641SVhDzz8gngu3/YV3n4AICmolg86/Z1jmUA8F3I4h5R+0g5j+zQfDfvwMC
dwQfbF5gooOe6o6650D9QC8zNEQlOhRl/jmkbVPnYAwCyYlg/5UA7RcEgolZ
EP2sFhD/zCxIdFg2R//bPZM6ByUgWFSW6NBSxXtljyHEP9bVUPfqQsOvLhEc
npM0ofobofapQu1rhvC9FRB8kPpPUgg+yLwZkgj+qwfFVs4SaOrFEHyQe5eK
QsO3CcJvFYH4v6cJ6h5hqHs4Mfmg+PDkh/hPiRsiX8QNNZ8P4l5uDoh5PoJQ
+1gg8sWi0PBghMa3FER/0P9asPk35SH6X/+pBccni1qiw7a1DuwCv2vB6tV0
IeG772etQ2dHR4eHSaLDlG65p7k/IPolYfH7HcKf6YLgg/y72xfBB8WfYBiq
/pmxCPNXr1q1SisVYX8oEEzNgcbvH6h7i6HxBXW/ZC3UP99qwekrrxSSXm99
rgWnx+05kPS57WMtODw+J0HT+3uIvHkkJH2JvIO6zw9q/ttaSHp0RPBB/ucw
Q5V30Ibmj3fQ8FKEprf3EPeLikPzx0do+PFB/FP3BaL/ABs0vXyHugeYP8H5
7zckPlyA+ReUP5b/h5j/7EsC2P7VLND8AM3/WzgR5QNIPpsfwYeVHwCTA+EG

      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQbQwC2YkORZl/DnHL1jkg87tV6hxWr1q1Sis90WFK
t9xTX606h1kzZ86UjE90uHk+STNIr85BEATCEx1kRZbnhhlB5G96JzrYm53s
jzCBmFdsi+CHAoGoOYK/Z/fu3b8NEh1+f2zxvmJc55AGBGraEPtPQ82LVE10
ePWg2OqwYZ3Dvbt378oqJDq0VPFesTGAmi8NMc8C6J7Ojo6OE2JQvg7UPUKJ
DgHutxac1ISYv4wfYv5rNYj91TwQ//GqQMyP5YLap1DncPbMmTM+nNjDB8QH
AHD2h7E=
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYCYmMg+OyZ5GBvdrJfIrTO4eyZM2d6nJMcWqp4
r8wJq3O4d/fu3bm2UH54nUMaEKhZQNVH1DmUA8F2oySH3x9bvKcA+aFAMFUn
yeHm+STNS0A+0AqGA6oI/vt3796tE0fwZ80EAt4kh1cPiq2YwyHqG9iTHHiY
p8WkBkPU5zEmOeip7qg77g+xP+1fosOyOfrf9nkh+EWZfw55u6DytW3rHED+
22yfhJWfbYSqHpkP8p/F+1qIe55g8kHue2oEcS/DDkw+zD6Yemz80851KOal
+tY5CALBxJeJDrIiy3PFQqHu/Qzx770oSPhe/QvRvzqhzmH1KiDghYTnpGSI
emNlBB9snhGCD7bPEcIXSoK6NwDKj4foR04PAC422vM=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4rNnzpzpmZXkYG92sv+HYZ1DGgjkYfKXzdH/
ZmcD4avNxeTfPJ+kOSm4zgFk3pktmPyizD+HtG3rHIyB4DNDMlZ+thGqenS+
Ny+C/+pBsdVhzjqH9+/evcvbmuQwpVvu6Vo2iHmbt0HUc7PUOTCAwA6IfC5j
nYMSCOxKcpAVWZ5r9r/WYdbMmTMl9yY58DBPi0n9W+sgCAIHkhx+f2zxnvIb
Kn8Eqv5XLdh845NQ9/ysBbvH51ySw4l9gRKJPyD6J16ByL/+Xgux/w6CD3bv
YwT/3t27d2VfJTm0VPFesfkBMY/nAyR87wH5LkDA8g3ivtafEPMO/IbIx/2C
8B0YoeH3G2ofezI4/C99hPKB4RvgfmtB54dahz27d++2/gGJn6L3EP9sfg9x
T/c7qP+eQ/yz8C1U/h40/qB842sIPsg/704h+OUgcDDJYdtaB/YPbyH+ObMT
kp4qgPatXrVqldYmiH9YP0LDew00fD9D3NuwHBp/36DmL4K45yEwPEDRt2g+
JP6d/0DiZyY0/Rkx1EHCfzbEfFUWSHoBpW+Q+mYOBB85PSGnfwDvp3CJ
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKJ0GAnHJDjzM02JcTeocYHxZkeW5YRYQ/rOEZIcT
+wIlFlpD+akQ9ap2UH5WskOA+60FKx3qHDo7Ojo4CpMdijL/HHrtWOdw9syZ
Mz4VCL4gEEysR/CNgWBzK0I/mN+FMB/M70fYD+IbT0K4D8aHuR/G//2xxdvE
AKF/21oH9g86CPPtzU72V2gh7AeZz6iBcB/IvKNqCPfD+DD/wfgw/8P0w8IH
Zj4s/GD2w8IX5j5c4Q8Kn9W/auH8lireK3v+1cLN01PdUcfOhLAPpL6bBeEe
kH0C7Aj33jyfpBnEgfAPjA/zL4wPCw+Yflh4wcyHhSfMflh4w9wH48Pcjxxf
077VosRHwOdalPi48aEWbj8oPFLf1aKkF+23tSjpCcRHTm8gPsz/MP3I8QEy
Hzk+QPYjp3eQ+9DDHwAZ0UTY
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGInIGYC4jQQWJfiwMM8LWbpt1qHchDYn+Lw+2OLd8i/
WodQIJh6LsXhxL5ACUfWOgegFoYDt1McijL/HMrmrnMwBoLPL1IckiJeb5wl
WOfgAgQsX1Ic9FR31LmLQ+X/pDjcPJ+kWSRT57B61apVr1hTHVqqeK/MUawD
27edJ9VhSrfc01y1OodZM2fOjBRMBbvnqVadw57du3f/Fk0F25+oX+dw9syZ
Mz4SEP5BYwQfpJ7VAsF/9aDY6rEt1HwRiPlrnSDyPbwQ9aludQ5KQJDEBjFP
0asO7N/Q3ykOy+bof/vnXecADp83qPxnjxB8kHLRW5DwOO0F9e9FSHimekD8
c/MkVL1rnUNnBxAcSnGwNzvZL+EMCU+GPZDw2WQPMV9tLYRv5A5xv/k2iHlP
vSH878D4CXC/tWClP9R9pyDm1wXVOdy7CwRXIOZHhELD4yFE/9EwiPs2v0fw
Qe6/+hPBB5vPlAr2D3cYxP2S3Klg82aEQOLDWjgVbL9mMNS9UpDwVg6E+lce
Er6tftDwVoWY9xro/vfvgEATGn8eUP/rQuMPGD6CIGAAMd/TEWLeTENI/Ona
Ivjg8LJA8EHqXxpD9AfqpzrIiizPFdOHplctiPsttKDhqZYKDq84VYj6i/KQ
9BijAHWvOMR8I2lIfHnwp4LTM7sYxP15rBD3LhWAuv8XJP65uaHueQdN76wQ
83geQePrfy0kfV+BxvfPWnB8FN9C8MHp9QGCDw7f5wg+OD++RfDB4fkZ1Tzj
Xwg+OP7sUjH44Ph+BzEflv/R+aDyAAAYP9HL
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
      1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
      0}}}, {{{180.45, 481.32318399999997`}, {180.45, 483.360684}, {180.45, 
      483.538809}, {180.45, 483.732559}, {180.45, 483.941934}, {180.45, 
      484.15130899999997`}, {180.45, 484.345059}, {180.45, 484.523184}, {
      180.35, 484.36589233333336`}, {180.24270833333333`, 
      484.2065173333333}, {180.128125, 484.045059}, {180.01458333333332`, 
      483.88360066666667`}, {179.9046875, 483.72422566666665`}, {179.7984375, 
      483.566934}, {178.0625, 481.32318399999997`}, {180.45, 
      481.32318399999997`}}, {{182.209375, 480.660684}, {181.2296875, 
      480.660684}, {181.2296875, 478.923184}, {180.45, 478.923184}, {180.45, 
      480.660684}, {177.15, 480.660684}, {177.15, 481.2122465}, {180.35, 
      485.329434}, {181.209375, 485.329434}, {181.209375, 
      481.32318399999997`}, {182.209375, 481.32318399999997`}, {182.209375, 
      480.660684}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQPWvmzJk3/6c7LJuj/23e91oHMJ81A87v7AAC7gwH
HuZpMao/ah3SgOCZQIbDzfNJmkY/ax1cQEAsw+HVg2Ir51+1DvfuAoFUhoOe
6o66479rHYyBYLMcxLx9f2sdBIFgolKGQ1LE6427/kPUz1XNcPj9scVbhKkO
Yr96hkNR5p9Dp1nqHEKBQFQLYn4zex3YPGNtiP2TuBB8e7OT/T94EfwT+wIl
GEUh/GKgeS1VvFdipCD8z/IQ87nloPISUPco1oH9t4wXar5yncPZM2fO9ADD
B8ZfvWrVqqzvCD7Yve/Swf5tV4Lyn0LkixSg/DvpEPuB9pUDwffLEPlLUPcY
n4byRSHqJc9CzHvODeHPvJQO9n8yC0T95tvp4PhwBYYfyH1nnqSD/aP9Cxp/
H9DiEyl+AZwK5o0=
      "], CompressedData["
1:eJxVVF1IVFEQvumCSUqZpVa4lbXm5pq1ZviHO9im6BqtG6ZBvSzoPRJW6ENg
3EMPBoVFEBUUEf3A9tSDCSpY0t+D5YakgWgpUmyR4m6bJZobde6ZaW8NXC4f
c87MNzPfnM3eE56GGEVR3OLT/zeuC9vFICH22pGAk4NTNxuDKx3mQHMFh9d+
vz8hk0H3A4g7WckhT9icmUFLU+TZTBWHDGEfUhEfq+YgQipnViHO3o/3/csN
LPMpBn7UJ2xBhR2WXq5WY/y8sAq+m7nzk1WIu76okL7mfvOhSry/7qMKY0Ne
63A5h0bdJhB79tL5UfI7ONQKWzuC2F6MfC4MIW7Jx3pNfozfnYv84ZUK01Ot
RfeyDOzY8/JSwSas1zusyn7t28rh/Dlh75Av30b5A+gPWDlMTggLqbJ/bhvx
+Yn+szlYz2ETi2I935NE9r8/hYG3fqZz3Ib1ZprJn439W7IwWAq3u3Zv53BK
WI+YX3tb4tuSLLpvZ5LfLQvVW8BgoL8mbdkW6l8Jw/o30vwceL5/A9Z7twzn
NZhK83FSvmQD6/1ZSDSw3t/V8RyShNWUUX4T9b+UsIL+N0WEI5rkO5aP+stZ
1CQ/Xy7md81rMn6rlYG7Yvx205wm6y/OID2FNclfWY/5L4c0We+LJOI3q6Ge
4+n8LOX7rUax7P93A4eCweDxadJPEPl8msJ5l35F3DiK513fNDnv9CGcb8MP
yjeA/o5F5GN6ivEe/kLc3kd6j6H+9KjR/ul6udpFeltJ+9NJ+kkxsNS72cC6
3nZaaV/FfTlvO87b10vxCkkfj1XZ74tA/ueq1FtbOfEZRP4rXKi30yMY784B
0sd73I8FD+pH+Uz8a1H/R8PEpw5xeoT6V0/7FceiWM4j2cDy/TDjPO11tP9Z
OM+0WtKveL/0fY09SPwK6T1yU32A9z1/359/3rs/OgYq7w==
      "]}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{125.75, 506.922}, {
     208.75, 506.922}, {208.75, 474.922}, {125.75, 474.922}}},
     CurveClosed->{1}]}, 
   {FaceForm[{RGBColor[1., 1., 0.8500040000000001], Opacity[1.]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{125.75, 625.}, {
     209.75, 625.}, {209.75, 592.}, {125.75, 592.}}}]}, 
   {RGBColor[0.41960800000000004`, 0.631373, 0.41960800000000004`], Opacity[
    1.], JoinForm[{"Miter", 10.}], FaceForm[RGBColor[0., 0., 0.]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, {{{140.05, 613.6828125}, {140.05, 613.}, {135.75, 613.}, {135.75, 
     613.6828125}, {137.55, 613.6828125}, {137.55, 618.4}, {136.1890625, 
     618.4}, {136.1890625, 618.9328125}, {136.5296875, 618.9869791666666}, {
     136.8265625, 619.0526041666667}, {137.0796875, 619.1296875}, {
     137.3328125, 619.2067708333333}, {137.559375, 619.2989583333333}, {
     137.759375, 619.40625}, {138.36875, 619.40625}, {138.36875, 
     613.6828125}, {140.05, 613.6828125}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQIN3xMdjEFAvdlhz24geIDgz5o5c+bNc4kOoUDQ
qgnlH0wE05p6zQ5KQPBoS6IDyJwLRs0OaSCwLtHh3t27d3MtEXyQccxOCD7I
vKVeCP3lQGAeiGr+zlCE/SDzbKOawfYceACxryGm2eHsmTNner4j+IJAEMiX
BOe/f/funZ5CElw/yHo13SS4+WC+VRLcfhB/mUMS3H0wPrL7QXxk/4H0I/sf
Zj4ofGD2w8IP5F4fviR4+KKHPwBXTp+C
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQIN3xMdjEEgvNkBzP+A4LsAAcurRIc9u3fvPh3W
7HD2zJkzPE8SwfSf0GaHe3fv3pW9lwimdYH8ciD4fiPRIQ0IngU3O8yaCQRX
IHy1oGawOdYXEh06Ozo6MgKaHZSA4NGZRIdQIDD1g5jfcwpifo83xDzzE4lg
dzzxgNp/HGLeNlcEH+RcZicEH2TeUqtmB0EgmHg6EWKOKcI9IHqnIcT+RXch
7rfVawa7y+NlIiQcdKDu+Y7gg+RPsCbB+atXrVqVJZgE1w9yR7FUEtx8kH+r
lZPg9oMDXCMJ7j4YH+Z+GB/mP5C6q2pJcP+D7VVJgocPyH4tpSR4+IH8e1Eu
CR6+MPfAwh+kTlQsCR4/IP2vBJLg8QdS/5krCR6/4PgH+hcW/yBzO/6hpRek
9AMAEuLzGQ==
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQPWvmzJmR3xMdgEyGANtmBxcgYPmE4N+7e/du7NtE
h3IgOA7kp4HAy0Qwvc2uGSxe/hQiv9y+Gayv4XGiw57du3f/dkDwjYFgsxOq
fLQLmn5XVPOnuaHa3+6O6j4Gj2YHZPeD+O/fvXu37g+CLwgEgYxJcP0gYQfW
JLj5IHFzziS4/SB3GnMnwd0H48PcjywP8h+KfntU80Hhg2w/KPyQ3QcKX/Tw
BwARv5eU
      "]}], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
     157.5015625, 619.153125}, {154.3078125, 612.1984375}, {154., 
     612.340625}, {157.1890625, 619.2890625}, {157.5015625, 619.153125}}}], 
    FilledCurveBox[CompressedData["
1:eJxTTMoPymNmYGBgBGJFIIaxWZDYzAPMZoDyGShkDwa/kOpfAJZaApk=
     "], CompressedData["
1:eJxlVF1Ik1EYXq7oQgkNRxgUWubmfr6lX1tKTo9uuBHeFEyorAs5ZxcFFXhh
UhfB18WC6iYUFgVdBS2IqGjBRLKgPyYVI2rYLMoMRqyUoB+IOt95XvwavfBx
eM55z/s85z3P+ZqGj+wWdpvNtkJ+g/Krkp8u41aGM3M8326wC6lUqiHLWZ2M
F20GG5WRmeJsk4y1Es/kcrkz9zlLyBjcaqj54YdczV/0GywuY/wpZ9fS6fQv
zVB5Lc84k1S2oxrVy3M1fvIZ4HnNFe+YxKaOkTnUb/GhnmMe+vJe8A+UkH/V
S3oXLWzmx39UYscf6F+i/D2rhKpnyPpzxWLxUrVgERn1GtWrE0rvOw18OYdQ
ehbk+cz5k+uFmv8sz2+e071RYGyn/Ebsv6zjvKObBXQEaL0ZfLeDFjbHEx0W
nsxms9VdBjudTCZjjdCb7wY/W0eYof72NYT7sL+minAY+feWeAVmJQubOlZ+
4KoPZ8O0v4h1e5j694orHcdkfVPX8ee4zxu9VO8J9ZvhvhNTWP/aZ2F1b/vo
fgPiP2zuT8WB9QJfxkp/Hn6400/+KcBfe6PQf+ot6r+Jkt8+AnfF0L/HJfJn
jPy7CJyLEf9PC6vz2MUyVvproG+M8EI99VfyfSmXy4c3CDVqUfTrZTPW9X7y
k4f8FIHf9rch/xz1eyAIP8z3Uv1Oyu+B/mQIfpgNkX97UH9kh4XNfVc6LGyO
hQD6EwmB74BOejqRH6T3/X0b+Gr99J79yO/2UT0X+B54CDcJtS/qxvvd1QB/
b2ml/tWif0Mu8udq8E04yd+/4S/diXzbNwur/pUq8fh73H+C8tks3ZcT76+U
p3wX6ZmBX++66H4fIX+old77NPnbTf2fxP9u2k3vOwO+CQ/8nr3J1XjIC76D
1+G/nT7yU5r4NfD9+z/9C0lAPBg=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{181.7484375, 615.9296875}, {
     177.75, 615.9296875}, {177.75, 616.3}, {181.7484375, 616.3}, {
     181.7484375, 615.9296875}}, {{181.7484375, 614.1}, {177.75, 614.1}, {
     177.75, 614.4703125}, {181.7484375, 614.4703125}, {181.7484375, 
     614.1}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVE1IVFEYfWm2yaihpJ+N/ZBoYmoTU2EOV62YZMJGZ0ZHXQl6LwUFBbVq
dTcFEaK0mGhRtJuwTVDECEWbqKZQmISsCXNRJvUUFCMt6N7vfHCxPni8OfPO
Pd+557vv7eo7395f7HneGnM1m6vIXAO2Hkhhfnrz1VpctvVU0v1FrRYJUzff
SvGpUCg0BjXxnn2QImiqI6TpvjAjxf1MJnPmiBbHTK1dlCJgqukoP/8thW0z
EdbEmy1RYjSbzZ5tQr/HpYrW5Vu0uJVOp1MBRX02ndDEWylT1P9URIs3uVwu
ug34SqvDln8n6vCc7/s32lh/C/QXY3h+fQP4Yx1a7DbVtw56IwnsN7EiiXc7
qcn3wPfV+Mu0w5ZeNok8ipO833HkORbHft6/ZL7pd+2qqeeS/q9qR57eKPK5
dBr6FSPAoTj8H3oEvcEk8E8zH+v7Qhf7ewX9jylN+yjkoX+yh/P4jPVeL/w9
nHPY+n/3y2HSL1LEu9cD/9vXK7p/68Y8GjYr6n+gm/3uQN77U7zfcuQ71cl5
74XesPFveX4V8v4T5/3XgL/T5GPPTaAO+s0x6KXrMb+DbQ7bvktRhy1/qBXr
Y7WKcq6M8HndB/9PjnOeFQq5tIA/Xo7z+Fqw363QD4Uxr8hGRby7DfB/rgR+
5w+z/2XMf0+I/fiYXzIIvdJpnlcdn+88z7sG87g46TCd1ymHKd+vDtP7+MNh
ynNhtV5w2WGaX1j9h8l3JZ8ffv//xfZ78BdCX68Z
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIZIGYC4lkzZ868aZTgAGQyJDxsAtMOTZj8NCA4tgXB
VwKCRxubHMqB4HtLgsP7d+/enVvfBFaX1pXgcPbMmTM965ocQoHgan+Cw+pV
q1Z5rYXqn57gALJ35RqI+mULEHyQOXorEfw9u3fv/r0pAWyPO1A/yFyefQkO
xkDQvA7CP3ME4r62lU0OLkBwZC/UfSsg5qtth8iHAfkgfZ83QPQ/Xg5xz4FV
CQ737t69mwvkg/QlLYbIGwP54PCZheCD3GHeheCD/De1NsFBEAgSYeaXQPy/
Z1UTWDwwJ8Ghs6OjQwLqf4YMSHjM2oDgg/Q5b0XwwfQdqP1G2Pmg+AEAa8G0
pA==
     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
      4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxlVE1IVFEUfkRIkglDaOjGFBIq3DRRC13cwn4WJqQkGAjvGgaJlCH+gBV2
g5iiRS00nhBEgTOOpuZ/PhsUy/7eVAtBBCdcuTShIqKF3XO/IzfrwHD55p7z
3e/8vfzaKxV12xzHOaF/dF4kW3MFHbd9JTZxt+d5LxJKfEmlUo/WXdGq7eGs
EskgCDJ+uEKHOntfKTHt+377L1fciUQisXll4qo3XBOXfAu+njRp/O+/h//v
XVIUaKsIwF+TLUVfXFsS/EGeNDzeRyVKyfZLwx/5pIyOn4fA53wG/2qJxV/X
tJ2y2PCdlSKk7YGOp787zksR1jai+ekMX5CGd1G/b/zqEf84QD5eo0TeH5TR
/aRFIu93yKe4nfW+4frdkDhfc/xNvBee4/duAc/NWEzu2QmLKe7SS4spr8T0
P/5/YdLb6HN9FfDKFPK/p1jPFOtJ/x9TXscnkV/BTtxXjTN/JvQ+HQVfWQj8
68O4b8riejznfuci/uQQ+JfyEL97EP3cXijFOW37BuBfWIT6XnumTJ9PH5bG
b6Ef8Tnc3w7GXqnF9K5/xmLqX6hqa7xXY/lpzg7U2ffp7Gzg/g6y3ibuF+vP
uY585vswX5ebMa9345jHiQbMZ1sv6vGtluc9hvuj1ZivaJT1lTN/lOfxmMXE
s+PI1ntxkPcjyvXK53mLQX/WHt6PXq5fJvJZjiN+Jg36u/pZj95Ps38DvF96
f0nW1SHep+8u8hjmfeD9bx2z3we6r5y0ePP78QdMLMlB
      "], CompressedData["
1:eJxTTMoPSmViYGAQAWIQbQwC2YkOIEp5f5MDMv/xoSaH1atWrdJKT3RwAYIj
R5scZs2cOVMyPtEhDQiOHW9yEASB8ESHzo6OjhMnIfI3vRPB9MlTEPOKbRH8
UCAQNUfw9+zevfu3QaJDORC0A/kgc9W0IfYzn4KYF6ma6PD+3bt3dUDz7929
e1dWIRGsb/cJqPnSEPN2At0DdocYlH8M6h6hRAclIGg6CjF/GT/EfOEjEPur
eSD+W3IIYn4sF8S+fweaHM6eOXPGhxN7+ID4AJ33jrc=
      "]}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
      1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIlIGYCYmMg+OyZ5DBr5syZmrebHM6eOXOmxznJYc/u
3btfA/n37t69O9cWws++0+SQBgRqFhD1K4H8ciDYbpQEpp8D+aFAMFUnCayO
7W6TA9AKhgOqCP77d+/erRNH8EHmzORNAovL3YGob2BPAtMBtyDq8xiTHASB
oPEGxP60f4lgd/65iuCD/HH4Eirf+HwTmN5sn4SVf/kkqnpkPshdliug7nmC
yQfRAqcgfIYdmHyYfTD12PjNl1DNC7jeBPbnxJeJDp0dHR0at6Hu/QzxL889
SPhe/QvR//lBk8PqVUDACwnPtEcQ9cbKCD7YPCMEH2yfI4S/7CHUvQEQvtoD
iH7k9AAAAijXbg==
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
     0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
     0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJDIGYC4rNnzpzpmZXkMGsmEJxsckgDgTxMPkjdnnMQ
vtpcTD5Y3a0msPiZLZh8YxA43wSmPzMkY+VfPomqHp3vvB3Bf//u3bu6rU1g
Om9rkoMLEHzZDDFv8zaI+sWbmhwYQGAHRD5kY5ODEgjsSnLo7OjosNjQBPan
5N4ksLqA9U0OgiBwIMmhHAjS10Hlj0DU71gLMd/4JNQ9ayHu8TmX5HDv7t27
Z9dA9E+8ApGfvAZq/x0EH+zexwg+SJ/sqySHPbuBYA3EPJ4PkPDlAZoPcjfL
N4j7EtZCzDvwGyJ/Bsp3YISEX/A6qH3syeDwb1sJ5QPDF+TtRyuawPZY/4DE
T9gKaHi9h7jn8XKo/55D/JML5W++B40/mPw1BB/kn3enEHxQuJUfTHIIBYKp
y6HxtROSniKB9q1etWqV1iaIfxRWQsN7DTQ+VkHc27AcGn+roeYvgriHdy0k
/hbNh8T/Pmj8zISmv20boOE/G2L+hk0Q+0HpG6T+3hYEHzk9Iad/AITuXis=

     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJJKJ0GAnHJDkAmw4FTTQ4wfmdHR8eJMxD+s4Rkh3t3
797NPQflp0LUbzgP5WclOygBwacLTWB9HIXJDsZAMPlik8PZM2fO+FQg+IJA
MLEewQfRm1sR+sH8LoT5YH4/wn4Q33gSwn0wPsz9MH45EGw/gdAfCgSixxHm
z5o5c+bNowj7QebPPYJwH8g8hiMI98P4MP/B+DD/w/TDwgdmPiz8YPbDwhfm
PlzhD3LX57UI/p7du3f/Xo8wD+TOhRsR9oHUP96EcA/IPtUtCPeCxI9tQfgH
xof5F8aHhQdMPyy8YObDwhNmPyy8Ye6D8WHuR46vF6tR48N1FWp8cK5E2A8K
jwvLUdOL8XLU9ATiI6c3EB/mf5h+5PgAmY8cHyD7kdM7yH3o4Q8AdJVA/w==

     "]], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
     1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
     3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
      3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
     0}}}, CompressedData["
1:eJxlVE1IVFEYfWm2yaihpGxjPyQZZD+GLaK4SYuCWlQYuJV7XRQoFNSqzV0V
iETRYqRF0SZGpoKBMZnBLKlseulMPadmxglzkRX1FJQiLeje73xwsT54vDnz
zj3fuee7721u7zqlKj3PW2auFnNVmKvD1n0pzE9vtk+LS7YeS7q/eKBFq6mb
o1J8KJfLBxOaeEMlKZpMnU5qus99lqIvFoudHdDiiKnl81JETB1O8/PfUtg2
+UFNvK9VSqRTqdS5J+jXX61oXTCsRW80Gm2LKOqz5rkm3mKNov4nRrR47fv+
8Q3AlzMOW/5t3+GZMAx7xlh/HfTnc3jevQr87FsttphqXwG9+Dj227ooiXcr
r8l3x7el+NOUw5ZeU0QelXnebw55ZgPsp/CS+abf1Sumnkr6v+EN8vTSyOdi
Fvr1ceDmAP73J6F3LQ/808zH+j7/nv1loD9R0LSPcgD9YyXO4yPWexPwl5hx
2Pof/+Uw6Vco4t0twX/tSkX3L0XM48BaRf33FtnvRuTdWOD91iHfyXec9zbo
3TD+LS9sQN5/At7/TvA3mXzsuYnshn5LDnrRPZjfvjGHbd8fvsOWfz2D9Sd3
Kcp5+wif1x3wP/CM86xXyGUY/FwdzuOrIfa7HvrNg5jX0dWKeHdS8N9ZBb+z
j9j/Aua/Ncl+QszvTAJ61VM8r4d8vgOedxzzuFB0mM7rpMOU77TD9D5+d5jy
nFuq17TgMM3vkPoPk+97fH74/f8X2+/BX5CuzxE=
     "]], 
    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
      1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
      0}}}, {{{180.45, 599.4}, {180.45, 601.4375}, {180.45, 601.615625}, {
      180.45, 601.809375}, {180.45, 602.01875}, {180.45, 602.228125}, {180.45,
       602.421875}, {180.45, 602.6}, {180.35, 602.4427083333334}, {
      180.24270833333333`, 602.2833333333333}, {180.128125, 602.121875}, {
      180.01458333333332`, 601.9604166666667}, {179.9046875, 
      601.8010416666667}, {179.7984375, 601.64375}, {178.0625, 599.4}, {
      180.45, 599.4}}, {{182.209375, 598.7375}, {181.2296875, 598.7375}, {
      181.2296875, 597.}, {180.45, 597.}, {180.45, 598.7375}, {177.15, 
      598.7375}, {177.15, 599.2890625}, {180.35, 603.40625}, {181.209375, 
      603.40625}, {181.209375, 599.4}, {182.209375, 599.4}, {182.209375, 
      598.7375}}}], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
      0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQB2IQPWvmzJk3/6c7nD1z5kzOmiYHMJ81A87v7AAC7gwH
oFKGDUB+GhA8E8gA02ZrmxxcQEAsw+H9u3fv9gH59+4CgVSGgyAQNK5rcjAG
gs1yEPNq1jeBxScqZTisXrVqVdUGiPq5qhkO5UCwfCPUfvUMsD7mzU0OoUAg
qgUxP24LxDxjbYj9z7Yi+CB9M7cj+CBzZXdD+MVA8/bs3r379F4I/7M8xPzF
+6HyElD3HIT4bxkvxPy0Q01gd/cAwwfGB6nL+o7gg937Lh3sr4cHofynEPlr
B6D8O+kQ+4H2gfz5/TJEnm0f1L2nIfy23RD1kmch5k3cBuHPvJQO9v+5TdDw
vJ0Ojg+HDRD3nXmSDhFfC7XvA1p8IsUvAGLN65I=
      "], CompressedData["
1:eJxVVEtoU0EUfUjxh0JLUYnQgBWLBUE0tn7RoZTishYVBAWpmJlFtYuCCrqQ
p0gEF25cKLhxYdqE+iuaaqLEJmmrfbWfZ5OapFL8ooil6EJU0Jl7bvP0Qph3
cmfuPffcO7Oqtb3l6DzLspr1z6zXrmrboIT+tMpdWzQaW6do3fvSFsOO4yyp
UWKfsQlbBLR98ytaK7O2qNb2ZgWwq7GJc7YcOJDDeWehhymf5eFEXNsPKSq0
jWURPzArkZdxzycpLoZCod0TOO97K0VQ23zNz6zBKeCmcd6fA74wahPvZS5w
/QvwuTQCvH8I9ZY5iH9qEPzFcylmvmpLe9jkfZhEva3jkv5P9tl0LlQA34Np
zv8e/ssZW7ye0jYjiUemn/n8hP/wAOo5UKZKmOIuVf/7lysRjUQiiwdQb42f
/f3Q79caJU5qi+l8tOr+ka5pPr9REb+2FNe7RRGvqj7Wb4dC/Unu3y7sP/ME
9d5oQL/OJbg/jci3+ZGHqa8xDxPP+zb1dU8D4n25x/rvZHwH/rFtjG+B76s6
zN+mbvC7uR75U1HE76hVxKslgvq3V/M8dYG/tRL5g52oN13B/MI8z4t4f5jz
/ZElTPp/97CZg+OfMS8PwuDzYRr9TnSyfjnsT3Wh31Uj6G9zlPMNwn+km/V/
ingnbgOfj/O8z+kTkyX9zLxc6UE80cv35y7wdNzDdB+SHjbn6jJ8X/V5w+v6
M9azl+MN83w8lsTj3Sj7U5LmLe8ynyHwX52F3qddxDs2yfNRxP3w5Vn/j8y/
AD0OzTKfIuvzm/Ur8v1aoEqY+lHpYXo//OhnPft9a9HP2gLrr98v0yd/nvlt
5fdokusTON809/788979BdtEKwg=
      "]}], 
    JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{125.75, 625.}, {
     208.75, 625.}, {208.75, 593.}, {125.75, 593.}}},
     CurveClosed->{1}]}},
  AspectRatio->Automatic,
  ImageSize->{563., 587.6953125},
  PlotRange->{{0., 600.}, {0., 626.}}]], "Input",
 CellChangeTimes->{{3.898188092708152*^9, 
  3.898188094836544*^9}},ExpressionUUID->"e0d9a510-518d-4771-a3de-\
e4286fba0685"],

Cell["\<\
Based on the repo and paper \[OpenCurlyDoubleQuote]Tree of Thoughts: \
Deliberate Problem Solving with Large Language \
Models\[CloseCurlyDoubleQuote]: https://arxiv.org/abs/2305.10601\
\>", "Text",
 CellChangeTimes->{{3.894967289864428*^9, 3.894967359380974*^9}, 
   3.8981109048610277`*^9},ExpressionUUID->"b372ee7e-37c5-42f6-8454-\
98ec1efa959f"],

Cell["\<\
Language models have proven effective problem solvers across a wide range of \
problems in many domains but are limited by a token-level decision-making \
process during inference. Because of this, initial decisions play a pivotal \
role and early mistakes can prevent success in later decision making. Tree of \
Thoughts (ToT) is a decision making framework introduced in (1) that \
generalizes Chain of Thought prompting (2), enabling language models to \
explore branching possibilities with coherent units of text (thoughts) as an \
intermediate step. ToT allows LMs to perform deliberate decision making by \
considering multiple different reasoning paths and self-evaluating choices to \
decide the next course of action, as well as looking ahead or backtracking \
when necessary to make global choices. In this project, we implement the Tree \
of Thoughts framework in Wolfram language for the first time, reproduce a \
solution for the game of 24, and begin to explore the use of this framework \
for more general problem solving in the context of coding challenges.\
\>", "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQXfFoZgsv91vHd+nPwfQmj3mTQHSKyF4Izbb7IIhW
blt0EkQXROWfA9Ee+3Mvgui4UL8nINpoRwOYfnSl4AWINldXeQmik/gM/oBo
Bd/Hf0E0yzMdLj4gveNMKZhmULsqAaLFbF1lQfQ922ZFEP3sc4ISiE7b0u8F
ornsinxA9KvvNwJA9LaDTHEg+u4blVQQbcSqkQGiZz1qzwWru3CuCMx/86wC
RG/s2FwLoj8+uf8SRMvLsb0C0f7pnZ9BtE7qgq8g2v6RzW8QPflKKis/kF6l
lcgJorecaVME0ZMfLlcD0b96wjVANABq1IZ4
  "],ExpressionUUID->"3b449413-76a4-4c62-b1af-465532cd5fe1"],

Cell[CellGroupData[{

Cell["Initialization", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.897933157212421*^9, 
  3.897933163500353*^9}},ExpressionUUID->"d6fb392b-fae2-418b-b368-\
71aa47fc5320"],

Cell[BoxData[{
 RowBox[{"PacletInstall", "[", "\"\<Wolfram/LLMFunctions\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<Wolfram`LLMFunctions`\>\"", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8979331766555967`*^9, 3.897933209603566*^9}, 
   3.89793865696784*^9, {3.897938818551841*^9, 3.897938834387312*^9}, {
   3.897993735538287*^9, 3.897993736151865*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"1dd6b514-7818-433f-851a-016838632c3b"],

Cell[BoxData[
 RowBox[{"openaiModel", " ", "=", " ", "\"\<gpt-4\>\""}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.8979334081210613`*^9, {3.897934079340356*^9, 3.897934081284836*^9}, {
   3.8979381380792227`*^9, 3.897938191823694*^9}, {3.897938604556114*^9, 
   3.897938618460763*^9}, {3.897938797065837*^9, 3.897938798023254*^9}, {
   3.897938848973507*^9, 3.897938850297433*^9}, {3.8979419394558887`*^9, 
   3.897941942192361*^9}, 3.8979938398851147`*^9, {3.897994476596942*^9, 
   3.897994480164538*^9}, 3.8979954458135443`*^9, {3.898087176463387*^9, 
   3.898087176544239*^9}},ExpressionUUID->"39565d8c-70d4-45ec-8b6f-\
75338386bdb4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getLeftNumbers", "[", "thought_String", "]"}], ":=", 
   RowBox[{"First", "@", 
    RowBox[{"StringCases", "[", 
     RowBox[{"thought", ",", 
      RowBox[{
       RowBox[{"\"\<(left: \>\"", "~~", "x__", "~~", "\"\<)\>\""}], ":>", 
       "x"}]}], "]"}]}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.898101426862254*^9},
 CellLabel->
  "In[672]:=",ExpressionUUID->"e842301c-4f4f-4b0f-91d9-3b872b2704af"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getValueHelper", "[", "evaluatedT_", "]"}], ":=", " ", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"StringQ", "[", "evaluatedT", "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"ToLowerCase", "[", 
        RowBox[{"Last", "[", 
         RowBox[{"StringSplit", "[", 
          RowBox[{"evaluatedT", ",", "\"\<\\n\>\""}], "]"}], "]"}], "]"}], 
       ",", "\"\<likely\>\"", ",", "1", ",", "\"\<sure\>\"", ",", "20", ",", 
       "\"\<impossible\>\"", ",", "0.1", ",", "_", ",", "0"}], "]"}], ",", 
     "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.898101376253841*^9, 3.898101383972622*^9}},
 CellLabel->
  "In[671]:=",ExpressionUUID->"dde0731e-99f6-4607-b945-733887b8f13f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getCurrentNumbers", "[", "y_String", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"lastLine", ",", "numbers"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"lastLine", "=", 
      RowBox[{"Last", "@", 
       RowBox[{"StringSplit", "[", 
        RowBox[{"y", ",", "\"\<\\n\>\""}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"numbers", "=", 
      RowBox[{"StringCases", "[", 
       RowBox[{"lastLine", ",", 
        RowBox[{
         RowBox[{"\"\<left: \>\"", "~~", "x__", "~~", "\"\<)\>\""}], ":>", 
         "x"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"numbers", "==", 
        RowBox[{"{", "}"}]}], ",", "lastLine", ",", 
       RowBox[{"First", "[", "numbers", "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.898092708491982*^9},
 CellLabel->
  "In[670]:=",ExpressionUUID->"98846ad4-b404-4be0-b20f-cc2c8033faac"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"given", " ", "a", " ", "proposal", " ", 
    RowBox[{"(", 
     RowBox[{"list", " ", "of", " ", "steps", " ", "so", " ", "far"}], ")"}], 
    " ", "return", " ", "a", " ", "list", " ", "of", " ", "proposals", " ", 
    "for", " ", "the", " ", "next", " ", "step"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"getProposals", " ", "[", 
    RowBox[{"proposal_String", ",", "taskInput_String"}], "]"}], " ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"proposals", ",", "currentNumbers", ",", "output"}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"currentNumbers", " ", "=", " ", 
       RowBox[{"getCurrentNumbers", "[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"proposal", "!=", "\"\<\>\""}], ",", "proposal", ",", 
          "taskInput"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"currentNumbers", " ", "==", "\"\<24\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"proposals", " ", "=", " ", 
         RowBox[{"generateAnswer", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<input\>\"", "->", " ", "taskInput"}], ",", 
            RowBox[{"\"\<steps\>\"", "->", "proposal"}]}], "|>"}], "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"proposals", " ", "=", " ", 
         RowBox[{"generateProposals", "[", 
          RowBox[{"<|", 
           RowBox[{"\"\<input\>\"", "->", " ", "currentNumbers"}], "|>"}], 
          "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"ListQ", "[", "proposals", "]"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"output", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"proposal", "<>", "\"\<\\n\>\"", "<>", "#"}], ")"}], 
           "&"}], "/@", "proposals"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"output", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"proposal", "<>", "\"\<\\n\>\"", "<>", "#"}], ")"}], 
           "&"}], "@", "proposals"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "output"}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.898092776808382*^9},
 CellLabel->
  "In[669]:=",ExpressionUUID->"e9b2900c-e2c6-46aa-9768-9de7d1796048"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"given", " ", "a", " ", "proposed", " ", "step"}], ",", " ", 
    RowBox[{"evaluate", " ", "the", " ", "correct", " ", "prompt", " ", 
     RowBox[{"(", 
      RowBox[{"final", " ", "step", " ", "or", " ", "normal", " ", "step"}], 
      ")"}], " ", "nEval", " ", "times", " ", "and", " ", "sum", " ", 
     "values"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"getValue", "[", 
    RowBox[{"proposal_String", ",", " ", "taskInput_String"}], "]"}], " ", ":=",
    "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"thoughts", ",", " ", "value", ",", " ", "isLastStep", ",", 
       RowBox[{"nEval", "=", "3"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringFreeQ", "[", 
         RowBox[{"proposal", ",", 
          RowBox[{"\"\<(left: \>\"", "~~", "__", "~~", "\"\<)\>\""}]}], "]"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"isLastStep", "=", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{"isLastStep", "=", "False"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"TrueQ", "[", "isLastStep", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"thoughts", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"evaluateAnswer", "[", 
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<input\>\"", "->", "taskInput"}], ",", 
              RowBox[{"\"\<answer\>\"", "->", "proposal"}]}], "|>"}], "]"}], 
           ",", " ", 
           RowBox[{"{", "nEval", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"thoughts", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"evaluateProposal", "[", 
            RowBox[{"<|", 
             RowBox[{"\"\<input\>\"", "->", 
              RowBox[{"getLeftNumbers", "[", "proposal", "]"}]}], "|>"}], 
            "]"}], ",", 
           RowBox[{"{", "nEval", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"value", " ", "=", " ", 
       RowBox[{"Total", "[", 
        RowBox[{"getValueHelper", " ", "/@", " ", "thoughts"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "value"}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.898092689486474*^9, {3.8980929919841547`*^9, 3.8980929941179657`*^9}},
 CellLabel->
  "In[668]:=",ExpressionUUID->"41f29cb8-dca4-486b-8055-82c2aaafabb9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "given", " ", "a", " ", "list", " ", "of", " ", "proposals", " ", "return",
     " ", "a", " ", "list", " ", "of", " ", "values"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"getValues", "[", 
     RowBox[{"proposals_List", ",", " ", "taskInput_String"}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"proposal", ",", 
        RowBox[{"values", "=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"localValueCache", "=", 
         RowBox[{"<|", "|>"}]}], ",", "value"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"KeyExistsQ", "[", 
             RowBox[{"localValueCache", ",", "proposal"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"value", "=", "0"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"value", " ", "=", " ", 
              RowBox[{"getValue", "[", 
               RowBox[{"proposal", ",", " ", "taskInput"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AssociateTo", "[", 
              RowBox[{"localValueCache", ",", 
               RowBox[{"proposal", "->", "value"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"values", ",", "value"}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"proposal", ",", "proposals"}], "}"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "values"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.898092672603266*^9, {3.898092802143906*^9, 3.8980928022941093`*^9}, {
   3.8980929857435513`*^9, 3.898092986086268*^9}},
 CellLabel->
  "In[667]:=",ExpressionUUID->"9fafce5f-b42f-4ac6-aa2d-d91147aaa556"],

Cell[BoxData[
 RowBox[{
  RowBox[{"llmParams", " ", "=", " ", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\"\<Model\>\"", "->", "\"\<gpt-4\>\""}], ",", 
     RowBox[{"\"\<Temperature\>\"", "->", "0.7"}]}], 
    "\[RightAssociation]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8981015086559668`*^9, 
  3.898101509272056*^9}},ExpressionUUID->"bb8307c2-5f43-475e-843d-\
8a88937c704e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateProposals", "=", 
   RowBox[{"LLMFunction", "[", 
    RowBox[{
    "\"\<Input: 2 8 8 14\nPossible next steps:\n2 + 8 = 10 (left: 8 10 14)\n8 \
/ 2 = 4 (left: 4 8 14)\n14 + 2 = 16 (left: 8 8 16)\n2 * 8 = 16 (left: 8 14 \
16)\n8 - 2 = 6 (left: 6 8 14)\n14 - 8 = 6 (left: 2 6 8)\n14 /  2 = 7 (left: 7 \
8 8)\n14 - 2 = 12 (left: 8 8 12)\nInput: `input`\nPossible next steps:\>\"", 
     ",", 
     RowBox[{
      RowBox[{"StringSplit", "[", 
       RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "&"}], ",", 
     RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.898101456404901*^9},ExpressionUUID->"a4909f45-f544-4fca-a8c1-\
b165de3c90e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"evaluateProposal", "=", 
   RowBox[{"LLMFunction", "[", 
    RowBox[{
    "\"\<Evaluate if given numbers can reach 24 (sure/likely/impossible)\n10 \
14\n10 + 14 = 24\nsure\n11 12\n11 + 12 = 23\n12 - 11 = 1\n11 * 12 = 132\n11 / \
12 = 0.91\nimpossible\n4 4 10\n4 + 4 + 10 = 8 + 10 = 18\n4 * 10 - 4 = 40 - 4 \
= 36\n(10 - 4) * 4 = 6 * 4 = 24\nsure\n4 9 11\n9 + 11 + 4 = 20 + 4 = 24\nsure\
\n5 7 8\n5 + 7 + 8 = 12 + 8 = 20\n(8 - 5) * 7 = 3 * 7 = 21\nI cannot obtain \
24 now, but numbers are within a reasonable range\nlikely\n5 6 6\n5 + 6 + 6 = \
17\n(6 - 5) * 6 = 1 * 6 = 6\nI cannot obtain 24 now, but numbers are within a \
reasonable range\nlikely\n10 10 11\n10 + 10 + 11 = 31\n(11 - 10) * 10 = 10\n\
10 10 10 are all too big\nimpossible\n1 3 3\n1 * 3 * 3 = 9\n(1 + 3) * 3 = 12\n\
1 3 3 are all too small\nimpossible\n`input`\>\"", ",", 
     RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.8981014888650227`*^9},ExpressionUUID->"92d667f8-524d-4c2f-8c18-\
f2b91c02ca30"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateAnswer", "=", 
   RowBox[{"LLMFunction", "[", 
    RowBox[{
    "\"\<Use numbers and basic arithmetic operations (+ - * /) to obtain 24. \
Each step, you are only allowed to choose two of the remaining numbers to \
obtain a new number.\nInput: 4 4 6 8\nSteps:\n4 + 8 = 12 (left: 4 6 12)\n6 - \
4 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (6 - 4) * (4 + 8) = 24\n\
Input: 2 9 10 12\nSteps:\n12 * 2 = 24 (left: 9 10 24)\n10 - 9 = 1 (left: 1 \
24)\n24 * 1 = 24 (left: 24)\nAnswer: (12 * 2) * (10 - 9) = 24\nInput: 4 9 10 \
13\nSteps:\n13 - 10 = 3 (left: 3 4 9)\n9 - 3 = 6 (left: 4 6)\n4 * 6 = 24 \
(left: 24)\nAnswer: 4 * (9 - (13 - 10)) = 24\nInput: 1 4 8 8\nSteps:\n8 / 4 = \
2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 \
/ 4) * 8 = 24\nInput: 5 5 5 9\nSteps:\n5 + 5 = 10 (left: 5 9 10)\n10 + 5 = 15 \
(left: 9 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((5 + 5) + 5) + 9 = 24\nInput: \
`input`\nSteps:\n`steps`\n\>\"", ",", 
     RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8981016344704723`*^9, 
  3.898101681844616*^9}},ExpressionUUID->"bff2ad84-93b1-42fa-beaf-\
58ea253e4597"],

Cell[BoxData[
 RowBox[{
  RowBox[{"evaluateAnswer", " ", "=", " ", 
   RowBox[{"LLMFunction", "[", 
    RowBox[{
    "\"\<Use numbers and basic arithmetic operations (+ - * /) to obtain 24. \
Given an input and an answer, give a judgement (sure/impossible) if the \
answer is correct, i.e. it uses each input exactly once and no other numbers, \
and reach 24.\nInput: 4 4 6 8\nAnswer: (4 + 8) * (6 - 4) = 24\nJudge: \nsure\n\
Input: 2 9 10 12\nAnswer: 2 * 12 * (10 - 9) = 24\nJudge: \nsure\nInput: 4 9 \
10 13\nAnswer: (13 - 9) * (10 - 4) = 24\nJudge: \nsure\nInput: 4 4 6 8\n\
Answer: (4 + 8) * (6 - 4) + 1 = 25\nJudge: \nimpossible\nInput: 2 9 10 12\n\
Answer: 2 * (12 - 10) = 24\nJudge: \nimpossible\nInput: 4 9 10 13\nAnswer: \
(13 - 4) * (10 - 9) = 24\nJudge: \nimpossible\nInput: `input`\nAnswer: \
`answer`\nJudge:\>\"", ",", 
     RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.898101695826213*^9, 
  3.8981017214210443`*^9}},ExpressionUUID->"fbbdf475-2c54-479f-bc6c-\
7a0ace885571"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"TODO", ":", " ", 
    RowBox[{"implement", " ", "error", " ", "handling", "\[IndentingNewLine]", 
     RowBox[{"sketchyProgram", "[", "]"}]}]}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"RandomReal", "[", "]"}], ">", "0.5"}], ",", "$Aborted"}], 
     "]"}], "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"res", "=", 
            RowBox[{"sketchyProgram", "[", "]"}]}], "}"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", "res", "]"}], "=!=", "Failure"}], ",", 
            RowBox[{"Throw", "[", "res", "]"}]}], "]"}]}], "]"}], ",", "5"}], 
       "]"}], ";", "\[IndentingNewLine]", "$Failed"}], "]"}]}]}], 
  "*)"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.898101176473289*^9},ExpressionUUID->"15c12391-85bb-4960-86df-\
d9291a4e1fe0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "loading", " ", "example", " ", "problems", " ", "from", "  ", "An", " ", 
    "Elementary", " ", "introduction", " ", "to", " ", "the", " ", "Wolfram", 
    " ", "language"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"file", " ", "=", " ", 
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\</Users/robertgiometti/code/wolfram/elementary_introduction_\
exercises.txt\>\"", ",", "\"\<Text\>\""}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"lines", "=", 
     RowBox[{"StringSplit", "[", 
      RowBox[{"file", ",", "\"\<\\n\>\""}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"lines", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"StringTrim", "[", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"#", ",", 
          RowBox[{"\"\<\[RightGuillemet]\>\"", "->", "\"\<\>\""}]}], "]"}], 
        "]"}], "&"}], "/@", "lines"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"pairs", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"StringSplit", "[", 
        RowBox[{"#", ",", 
         RowBox[{"RegularExpression", "[", "\"\<([^0-9+.]+)\>\"", "]"}], ",", 
         "2"}], "]"}], "&"}], "/@", "lines"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"line", " ", "=", " ", 
     RowBox[{
      RowBox[{"lines", "[", 
       RowBox[{"[", "79", "]"}], "]"}], "\n", 
      RowBox[{"pairs", "[", 
       RowBox[{"[", "79", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"strLength", " ", "=", " ", 
     RowBox[{"StringLength", "[", "line", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"idx", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"StringLength", "[", 
        RowBox[{
         RowBox[{"StringCases", "[", 
          RowBox[{"line", ",", 
           RowBox[{"RegularExpression", "[", "\"\<([0-9+.]+)\>\"", "]"}]}], 
          "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[IndentingNewLine]", 
       "pairs"}], " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"StringTake", "[", 
           RowBox[{"line", ",", 
            RowBox[{"StringLength", "[", 
             RowBox[{
              RowBox[{"StringCases", "[", 
               RowBox[{"line", ",", 
                RowBox[{
                "RegularExpression", "[", "\"\<([0-9+.]+)\>\"", "]"}]}], 
               "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"StringTake", "[", 
           RowBox[{"line", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"StringLength", "[", 
                RowBox[{
                 RowBox[{"StringCases", "[", 
                  RowBox[{"line", ",", 
                   RowBox[{
                   "RegularExpression", "[", "\"\<([0-9+.]+)\>\"", "]"}]}], 
                  "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}], ",", 
              RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"line", ",", "lines"}], "}"}]}], "]"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"assoc", "=", 
     RowBox[{"Association", "[", 
      RowBox[{"Rule", "@@@", "pairs"}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"getExercise", "[", "idx_", "]"}], " ", ":=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"pairs", "[", 
         RowBox[{"[", "idx", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[IndentingNewLine]", 
       RowBox[{"getRandomExercise", "[", "]"}]}], " ", ":=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"pairs", "[", 
          RowBox[{"[", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"Length", "[", "pairs", "]"}], "]"}], "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], "\[IndentingNewLine]", "exercise"}], 
       " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"getExercise", "[", "30", "]"}], "\[IndentingNewLine]", 
         "randomExercise"}], " ", "=", " ", 
        RowBox[{"getRandomExercise", "[", "]"}]}]}]}]}]}], "*)"}]}]], "Input",\

 CellChangeTimes->{
  3.898170579849721*^9, {3.898170617601856*^9, 3.898170661272973*^9}, {
   3.898170729970405*^9, 
   3.8981707548829*^9}},ExpressionUUID->"75f36b5d-377b-4dc3-bf01-\
c78619d143e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Code", " ", "to", " ", "reproduce", " ", "result", " ", "graph"}],
    "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Tree", "[", 
    RowBox[{"\"\<input: 4 5 6 10\>\"", ",", 
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{"step1Thoughts", "[", 
        RowBox[{"[", 
         RowBox[{"2", ";;"}], "]"}], "]"}], ",", 
       RowBox[{"Tree", "[", 
        RowBox[{
         RowBox[{"step1Thoughts", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"TreeLayout", "->", "Left"}]}], "]"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"firstSteps", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"StringSplit", "[", 
         RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", " ", "results"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"secondSteps", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"StringSplit", "[", 
         RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "&"}], "/@", " ", "results"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"secondSteps", " ", "=", " ", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"#1", ",", "\"\<\\n\>\"", ",", "#2"}], "]"}], ")"}], "&"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"firstSteps", ",", "secondSteps"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"thirdSteps", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"StringSplit", "[", 
         RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "[", 
        RowBox[{"[", "3", "]"}], "]"}], "&"}], "/@", " ", "results"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"thirdSteps", " ", "=", " ", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"#1", ",", "\"\<\\n\>\"", ",", "#2"}], "]"}], ")"}], "&"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"secondSteps", ",", "thirdSteps"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fourthSteps", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"StringSplit", "[", 
         RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "[", 
        RowBox[{"[", "4", "]"}], "]"}], "&"}], "/@", " ", "results"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fourthSteps", " ", "=", " ", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"#1", ",", "\"\<\\n\>\"", ",", "#2"}], "]"}], ")"}], "&"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"thirdSteps", ",", "fourthSteps"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"answer", " ", "=", " ", 
     RowBox[{"StringTake", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"StringSplit", "[", 
           RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "[", 
          RowBox[{"[", "4", "]"}], "]"}], "&"}], "@", 
        RowBox[{"results", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"9", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"answerIndex", " ", "=", " ", 
     RowBox[{"First", "[", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "results", "]"}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"StringCases", "[", 
            RowBox[{
             RowBox[{"results", "[", 
              RowBox[{"[", "#", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"\"\<Answer: \>\"", "~~", "x__", "~~", "\"\<=\>\""}], ":>",
               "x"}]}], "]"}], "]"}], " ", ">", " ", "0"}], " ", "&"}]}], " ",
        "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"proposals2", " ", "=", " ", 
     RowBox[{"getProposals", "[", 
      RowBox[{
       RowBox[{"firstSteps", "[", 
        RowBox[{"[", "answerIndex", "]"}], "]"}], ",", "taskInput"}], "]"}]}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"values2", " ", "=", " ", 
     RowBox[{"getValues", "[", 
      RowBox[{"proposals2", ",", "taskInput"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getBestProposals", "[", 
      RowBox[{"proposals_", ",", "values_"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ids", ",", "sortedIDs", ",", "selectIDs", ",", 
         RowBox[{"nSelect", "=", "5"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ids", "=", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "proposals", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"sortedIDs", "=", 
         RowBox[{"Reverse", "@", 
          RowBox[{"SortBy", "[", 
           RowBox[{"ids", ",", 
            RowBox[{
             RowBox[{"values", "[", 
              RowBox[{"[", "#", "]"}], "]"}], "&"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"selectIDs", "=", 
         RowBox[{"Take", "[", 
          RowBox[{"sortedIDs", ",", 
           RowBox[{"Min", "[", 
            RowBox[{"nSelect", ",", 
             RowBox[{"Length", "[", "values", "]"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"proposals", "[", 
           RowBox[{"[", "#", "]"}], "]"}], "&"}], "/@", "selectIDs"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bestProposals2", " ", "=", " ", 
     RowBox[{"getBestProposals", "[", 
      RowBox[{"proposals2", ",", "values2"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"proposals3", " ", "=", " ", 
     RowBox[{"getProposals", "[", 
      RowBox[{
       RowBox[{"secondSteps", "[", 
        RowBox[{"[", "answerIndex", "]"}], "]"}], ",", "taskInput"}], "]"}]}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"values3", " ", "=", " ", 
     RowBox[{"getValues", "[", 
      RowBox[{"proposals3", ",", "taskInput"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bestProposals3", " ", "=", " ", 
     RowBox[{"getBestProposals", "[", 
      RowBox[{"proposals3", ",", "values3"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bestSteps2", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringSplit", "[", 
           RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", 
         RowBox[{"\"\<(\>\"", "->", "\"\<\\n(\>\""}]}], "]"}], "&"}], "/@", 
      " ", "bestProposals2"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"treeData1", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{"#", ",", 
         RowBox[{"\"\<(\>\"", "->", "\"\<\\n(\>\""}]}], "]"}], "&"}], "/@", 
      "firstSteps"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"swapIndices", "[", 
     RowBox[{"list_", ",", "i_", ",", "j_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"temp", "=", "list"}], "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"temp", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"i", ",", "j"}], "}"}], "]"}], "]"}], "=", 
        RowBox[{"temp", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"j", ",", "i"}], "}"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "temp"}]}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bestSteps2", " ", "=", " ", 
     RowBox[{"swapIndices", "[", 
      RowBox[{"bestSteps2", ",", "1", ",", "3"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bestSteps3", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringSplit", "[", 
           RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}], ",", 
         RowBox[{"\"\<(\>\"", "->", "\"\<\\n(\>\""}]}], "]"}], "&"}], "/@", 
      " ", "bestProposals3"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bestSteps3", " ", "=", " ", 
     RowBox[{"swapIndices", "[", 
      RowBox[{"bestSteps3", ",", "1", ",", "3"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"bestSteps3", "[", 
      RowBox[{"[", "3", "]"}], "]"}], " ", "=", " ", 
     RowBox[{"Tree", "[", 
      RowBox[{
       RowBox[{"bestSteps3", "[", 
        RowBox[{"[", "3", "]"}], "]"}], ",", 
       RowBox[{"{", "answer", "}"}], ",", 
       RowBox[{"TreeElementStyle", "->", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "1", "}"}], "->", "LightGreen"}], "}"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"bestSteps2", "[", 
      RowBox[{"[", "3", "]"}], "]"}], " ", "=", " ", 
     RowBox[{"Tree", "[", 
      RowBox[{
       RowBox[{"bestSteps2", "[", 
        RowBox[{"[", "3", "]"}], "]"}], ",", "bestSteps3"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"treeData1", "[", 
      RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
     RowBox[{"Tree", "[", 
      RowBox[{
       RowBox[{"treeData1", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", "bestSteps2"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"treeStyle", " ", "=", " ", 
     RowBox[{"{", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", "1", "}"}], "->", " ", "LightYellow"}], ",", 
       RowBox[{
        RowBox[{"{", "3", "}"}], "->", " ", "LightYellow"}], ",", 
       RowBox[{
        RowBox[{"{", "4", "}"}], "->", " ", "LightYellow"}], ",", 
       RowBox[{
        RowBox[{"{", "5", "}"}], "->", " ", "LightYellow"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", "1"}], "}"}], "->", "LightYellow"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", "2"}], "}"}], "->", "LightYellow"}], " ", ",", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", "4"}], "}"}], "->", "LightYellow"}], ",", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", "5"}], "}"}], "->", "LightYellow"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"__", ",", "1"}], "}"}], "->", "LightYellow"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"__", ",", "2"}], "}"}], "->", "LightYellow"}], " ", ",", 
       " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"__", ",", "4"}], "}"}], "->", "LightYellow"}]}], 
      "\[IndentingNewLine]", "}"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.898179754308313*^9, 3.898179763673127*^9}, {
  3.898180035247662*^9, 3.898180035598893*^9}, {3.89818019187496*^9, 
  3.8981802139420443`*^9}},ExpressionUUID->"41f930f2-08cf-41e3-9cde-\
aca7998c5fee"]
}, Closed]],

Cell[CellGroupData[{

Cell["Alternate Implementation with ServiceConnect", "Section",
 CellChangeTimes->{{3.898100905332638*^9, 3.898100930507422*^9}, {
  3.898124053994363*^9, 
  3.898124076856154*^9}},ExpressionUUID->"53efa0f1-a0d6-49c5-8965-\
f0c3d63ecb4c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"openai", " ", "=", " ", 
   RowBox[{"ServiceConnect", "[", 
    RowBox[{"\"\<OpenAI\>\"", ",", "\"\<New\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"openaiModel", " ", "=", " ", "\"\<gpt-4\>\""}], ";"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"chatCompletion", "[", 
     RowBox[{"prompt_String", ",", "n_Integer", ",", "input_String"}], "]"}], 
    " ", ":="}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"chatCompletion", "[", "params_Association", "]"}], " ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "response", ",", "prompt", ",", "input", ",", "n", ",", "steps", ",", 
       "contentParams", ",", "output"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"prompt", " ", "=", " ", 
       RowBox[{"params", "[", "\"\<prompt\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"input", " ", "=", " ", 
       RowBox[{"params", "[", "\"\<input\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"IntegerQ", "[", 
         RowBox[{"params", "[", "\"\<n\>\"", "]"}], "]"}], ",", 
        RowBox[{"n", "=", 
         RowBox[{"params", "[", "\"\<n\>\"", "]"}]}], ",", 
        RowBox[{"n", "=", "1"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"KeyExistsQ", "[", 
         RowBox[{"params", ",", "\"\<steps\>\""}], "]"}], ",", 
        RowBox[{"steps", "=", 
         RowBox[{"params", "[", "\"\<steps\>\"", "]"}]}], ",", 
        RowBox[{"steps", "=", "False"}]}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringQ", "[", "steps", "]"}], ",", 
        RowBox[{"contentParams", "=", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<input\>\"", "->", "input"}], ",", 
           RowBox[{"\"\<steps\>\"", "->", "steps"}]}], "|>"}]}], ",", 
        RowBox[{"contentParams", "=", 
         RowBox[{"<|", 
          RowBox[{"\"\<input\>\"", "->", "input"}], "|>"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"response", " ", "=", " ", 
       RowBox[{"ServiceExecute", "[", 
        RowBox[{"openai", ",", " ", "\"\<Chat\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<Model\>\"", "->", "openaiModel"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "n"}], ",", 
           RowBox[{"\"\<MaxTokens\>\"", "->", "1000"}], ",", " ", 
           RowBox[{"\"\<Messages\>\"", "->", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"\"\<role\>\"", "->", "\"\<user\>\""}], ",", 
               RowBox[{"\"\<content\>\"", "->", 
                RowBox[{
                 RowBox[{"StringTemplate", "[", "prompt", "]"}], "[", 
                 "contentParams", "]"}]}]}], "|>"}], "\[IndentingNewLine]", 
             "}"}]}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"StringForm", "[", 
          RowBox[{"\"\<response is ``.\>\"", ",", "response"}], "]"}], "]"}], 
        ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"prompt", " ", "==", " ", "proposalPrompt"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"output", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"StringSplit", "[", 
            RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "&"}], "@", 
          RowBox[{
           RowBox[{
            RowBox[{"response", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<message\>\"", "]"}], 
           "[", "\"\<content\>\"", "]"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"n", "==", "1"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{"output", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"response", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<message\>\"", "]"}], 
            "[", "\"\<content\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"output", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", "[", "\"\<message\>\"", "]"}], "[", 
               "\"\<content\>\"", "]"}], ")"}], "&"}], "/@", "  ", 
            "response"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "output"}]}],
     "\[IndentingNewLine]", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateProposals", "[", "params_Association", "]"}], " ", ":=", 
   " ", 
   RowBox[{"chatCompletion", "[", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<prompt\>\"", "->", "proposalPrompt"}], ",", 
      RowBox[{"\"\<input\>\"", "->", 
       RowBox[{"params", "[", "\"\<input\>\"", "]"}]}]}], "|>"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"generateAnswer", "[", "params_Association", "]"}], " ", ":=", " ", 
   RowBox[{"chatCompletion", "[", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<prompt\>\"", "->", "answerPrompt"}], ",", 
      RowBox[{"\"\<input\>\"", "->", 
       RowBox[{"params", "[", "\"\<input\>\"", "]"}]}], ",", 
      RowBox[{"\"\<steps\>\"", "->", 
       RowBox[{"params", "[", "\"\<steps\>\"", "]"}]}]}], "|>"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"evaluateProposal", "[", "params_Association", "]"}], " ", ":=", 
   " ", 
   RowBox[{"chatCompletion", "[", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<prompt\>\"", "->", "evaluateProposalPrompt"}], ",", 
      RowBox[{"\"\<input\>\"", "->", 
       RowBox[{"params", "[", "\"\<input\>\"", "]"}]}], ",", 
      RowBox[{"\"\<n\>\"", "->", 
       RowBox[{"params", "[", "\"\<n\>\"", "]"}]}]}], "|>"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"evaluateAnswer", "[", "params_Association", "]"}], " ", ":=", " ", 
   RowBox[{"chatCompletion", "[", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<prompt\>\"", "->", "evaluateAnswerPrompt"}], ",", 
      RowBox[{"\"\<input\>\"", "->", 
       RowBox[{"params", "[", "\"\<input\>\"", "]"}]}], ",", 
      RowBox[{"\"\<answer\>\"", "->", 
       RowBox[{"params", "[", "\"\<answer\>\"", "]"}]}], ",", 
      RowBox[{"\"\<n\>\"", "->", 
       RowBox[{"params", "[", "\"\<n\>\"", "]"}]}]}], "|>"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.898100905332638*^9, 3.898100930507422*^9}, {
  3.898124053994363*^9, 3.8981240724343443`*^9}, {3.898124115249518*^9, 
  3.898124115251917*^9}},ExpressionUUID->"a5b6272c-85cc-4927-a4cd-\
75a08632c9bb"]
}, Closed]],

Cell[CellGroupData[{

Cell["Game of 24", "Section",
 CellChangeTimes->{{3.8981125446291113`*^9, 3.898112548496067*^9}, {
  3.8981126378971663`*^9, 
  3.8981126401900263`*^9}},ExpressionUUID->"f13e90d7-e38d-451a-935f-\
0f4e5a74a24b"],

Cell[TextData[{
 "Game of 24 is a mathematical reasoning challenge, where the goal is to use \
4 numbers and basic arithmetic operations (+-*/) to obtain 24. \nFor example, \
given input \[OpenCurlyDoubleQuote]4 9 10 13\[CloseCurlyDoubleQuote], a \
solution output could be \[OpenCurlyDoubleQuote](10-4)*(13-9)=24\
\[CloseCurlyDoubleQuote].\n\nIn order to approach Game of 24 within the Tree \
of Thoughts framework we must first break it down into steps. A natural way \
to do this is to take two numbers at a time and apply an arithmetic operation\
\n13 - 10 = 3\nAfter this operation we have used two of our numbers and have \
two left (4 and 9) in addition to our result (3) so we have:\nStep 1: 13 - 10 \
= 3 (left: 4 9 3)\nAfter two more steps we can reach the solution:\nStep 2: 9 \
- 3 = 6 (left: 4 6)\nStep 3: 4 * 6 = 24 (left: 24)\nNow that we have reached \
24 we can construct our solution:\nAnswer: 4 * (9 - (13 - 10)) = 24\n\nBefore \
we proceed toward our solution with Tree of Thoughts, we provide some \
motivation as to why ToT or similar frameworks are very helpful for problem \
solving with LLMs.\n\nFirst let\[CloseCurlyQuote]s look at how ChatGPT, in \
this case GPT-4 approaches solving this problem. Using the steps we provided \
above we will provide a 1-shot chain of thought (CoT) reasoning prompt using \
a handy function built into Wolfram Language as of version 13.3, LLMFunction \
(3).\n\n",
 StyleBox["Note:",
  FontWeight->"Bold"],
 " in order to run this notebook you must have an OpenAI API key (which you \
can set up here https://openai.com/blog/openai-api). After getting your API \
key you can set it in your Wolfram environment using:  ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"SystemCredentials", "[", 
    RowBox[{"OPENAI_API", "_KEY"}], "]"}], " ", "=", " ", 
   "\"\<your_key\>\""}]], "InlineCode",ExpressionUUID->
  "22a3e1c0-b589-4b77-89cb-5963940d928b"]
}], "Text",
 CellChangeTimes->{{3.898112644461948*^9, 3.898112785331401*^9}, {
  3.89811516414816*^9, 3.898115192894784*^9}, {3.898115273737068*^9, 
  3.898115308919855*^9}, {3.8981154257495613`*^9, 3.898115449890745*^9}, {
  3.898115483172125*^9, 3.898115686022831*^9}, {3.898116106326033*^9, 
  3.898116254385054*^9}, {3.898116298119647*^9, 3.898116412752203*^9}, {
  3.898116469663138*^9, 3.898116558339532*^9}, {3.898116619126111*^9, 
  3.8981166468859386`*^9}, {3.8981167091230183`*^9, 3.8981167153356247`*^9}, {
  3.898116747438675*^9, 3.898116851628131*^9}, {3.898116904352887*^9, 
  3.898116910266018*^9}},ExpressionUUID->"9380df0e-fc25-42b2-a159-\
7562aa1f26ab"],

Cell[CellGroupData[{

Cell["\<\
Attempting to Solve Game of 24 with Chain of Thought Prompting\
\>", "Subsubsection",
 CellChangeTimes->{{3.898116922571047*^9, 
  3.8981169608272953`*^9}},ExpressionUUID->"23854f4e-64c2-4afd-9462-\
0a2338fd330c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cot1Shot", "=", 
   RowBox[{"LLMFunction", "[", 
    RowBox[{
    "\"\<Use numbers and basic arithmetic operations (+ - * /) to obtain 24.\n\
Each step, you are only allowed to choose two of the remaining numbers to \
obtain a new number. You must use the four numbers in the input and only \
those numbers in your answer.\nInput: 4 4 6 8\nSteps:\n4 + 8 = 12 (left: 4 6 \
12)\n6 - 4 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (6 - 4) * (4 + \
8) = 24\nInput: `input`\>\"", ",", 
     RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.898116981101153*^9, 3.898116992187258*^9}, {
  3.898117032148367*^9, 3.898117036987749*^9}, {3.8981170670784893`*^9, 
  3.898117081802827*^9}, {3.898117614867832*^9, 3.898117662702012*^9}, {
  3.898117705361388*^9, 3.8981177109749203`*^9}, {3.89811854922964*^9, 
  3.8981186120750628`*^9}},
 CellLabel->
  "In[639]:=",ExpressionUUID->"8b7a3c5d-518c-4642-aab7-549b5903683f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cot1ShotResponse", " ", "=", " ", 
  RowBox[{"cot1Shot", "[", 
   RowBox[{"<|", 
    RowBox[{"\"\<input\>\"", "->", "\"\<4 9 10 13\>\""}], "|>"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.898117085612639*^9, 3.898117114832847*^9}},
 CellLabel->
  "In[640]:=",ExpressionUUID->"7bc893f3-4b34-4a0f-8768-e00720c81e0d"],

Cell[BoxData["\<\"Steps:\\n13 - 9 = 4 (left: 4 4 10)\\n4 * 4 = 16 (left: 16 \
10)\\n16 + 10 = 26 (left: 26)\\nAnswer: (13 - 9) * 4 + 10 = 26\\nNote: It \
seems there's no way to obtain 24 with these numbers using basic arithmetic \
operations.\"\>"], "Output",
 CellChangeTimes->{{3.898117120878395*^9, 3.898117132314123*^9}, 
   3.8981171871112022`*^9, 3.8981172628634*^9, 3.8981176752589006`*^9, 
   3.898118628503261*^9},
 CellLabel->
  "Out[640]=",ExpressionUUID->"8a718770-2404-4c2e-af04-f8d1a22d1e95"]
}, Open  ]],

Cell["\<\
With a 1-shot prompt GPT-4 gets close to a solution obtaining a result of 26 \
and recognizing its mistake, states (falsely) that there is no way to obtain \
24 with these numbers.

We can improve the performance with this approach by using more examples. \
Below we provide a 5-shot chain of thought prompt:\
\>", "Text",
 CellChangeTimes->{{3.898117203254942*^9, 3.898117250235476*^9}, {
  3.898117296642797*^9, 3.8981173446686907`*^9}, {3.898117394486685*^9, 
  3.898117395185377*^9}, {3.8981174619624243`*^9, 3.8981175383157187`*^9}, {
  3.898117601778623*^9, 3.898117610186963*^9}, {3.8981177249883423`*^9, 
  3.8981178022359667`*^9}, {3.898117850165223*^9, 3.898117906316601*^9}, {
  3.898118002640209*^9, 3.8981180348687267`*^9}, {3.898118715157577*^9, 
  3.898118825247704*^9}},ExpressionUUID->"0425907d-1f3f-4b7a-b091-\
c40ecf1d6375"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cot5Shot", "=", 
   RowBox[{"LLMFunction", "[", 
    RowBox[{
    "\"\<Use numbers and basic arithmetic operations (+ - * /) to obtain 24. \
Each step, you are only allowed to choose two of the remaining numbers to \
obtain a new number. You must use the four numbers in the input and only \
those numbers in your answer.\nInput: 4 4 6 8\nSteps:\n4 + 8 = 12 (left: 4 6 \
12)\n6 - 4 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (6 - 4) * (4 + \
8) = 24\nInput: 2 9 10 12\nSteps:\n12 * 2 = 24 (left: 9 10 24)\n10 - 9 = 1 \
(left: 1 24)\n24 * 1 = 24 (left: 24)\nAnswer: (12 * 2) * (10 - 9) = 24\n\
Input: 4 9 10 13\nSteps:\n13 - 10 = 3 (left: 3 4 9)\n9 - 3 = 6 (left: 4 6)\n4 \
* 6 = 24 (left: 24)\nAnswer: 4 * (9 - (13 - 10)) = 24\nInput: 1 4 8 8\nSteps:\
\n8 / 4 = 2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n\
Answer: (1 + 8 / 4) * 8 = 24\nInput: 5 5 5 9\nSteps:\n5 + 5 = 10 (left: 5 9 \
10)\n10 + 5 = 15 (left: 9 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((5 + 5) + 5) \
+ 9 = 24\nInput: `input`\n\>\"", ",", 
     RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8981180389999743`*^9, 3.898118042130454*^9}, 
   3.898118087045424*^9, 3.898118675019215*^9},
 CellLabel->
  "In[641]:=",ExpressionUUID->"5b1901f4-f211-428c-a9b7-2d4561e13515"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cot5ShotResponse", " ", "=", " ", 
  RowBox[{"cot5Shot", "[", 
   RowBox[{"<|", 
    RowBox[{"\"\<input\>\"", "->", "\"\<4 9 10 13\>\""}], "|>"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8981181782320633`*^9, 3.898118181526078*^9}},
 CellLabel->
  "In[642]:=",ExpressionUUID->"82a68dbf-5b42-4d73-bc5a-11f2aed57abe"],

Cell[BoxData["\<\"Steps:\\n13 - 10 = 3 (left: 3 4 9)\\n9 - 3 = 6 (left: 4 \
6)\\n4 * 6 = 24 (left: 24)\\nAnswer: 4 * (9 - (13 - 10)) = 24\"\>"], "Output",\

 CellChangeTimes->{3.898118195942824*^9, 3.898118693643084*^9},
 CellLabel->
  "Out[642]=",ExpressionUUID->"160ac1b7-6700-41a3-81b3-25623bd02260"]
}, Open  ]],

Cell["\<\
In the 5-shot chain of thought case, GPT-4 provides a valid solution to the \
problem for the given input.
With more difficult inputs, GPT-4 is unable to find a solution with the \
5-shot prompt.\
\>", "Text",
 CellChangeTimes->{{3.8981182273533573`*^9, 3.898118295181304*^9}, {
  3.898119517595751*^9, 
  3.8981195683173447`*^9}},ExpressionUUID->"630d7c6e-8b28-4033-b83f-\
b06b24873f19"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cot5ShotResponse", " ", "=", " ", 
  RowBox[{"cot5Shot", "[", 
   RowBox[{"<|", 
    RowBox[{"\"\<input\>\"", "->", "\"\<3 4 5 13\>\""}], "|>"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8981195804855433`*^9, 3.898119598045762*^9}, {
  3.89812080192558*^9, 3.898120805153696*^9}, {3.898121168993911*^9, 
  3.898121172895788*^9}, {3.898122772389125*^9, 3.898122775098506*^9}},
 CellLabel->
  "In[663]:=",ExpressionUUID->"e4378cf0-68e5-4e32-b231-c0ebf7621934"],

Cell[BoxData["\<\"Steps:\\n13 - 4 = 9 (left: 3 5 9)\\n9 - 5 = 4 (left: 3 \
4)\\n3 * 4 = 12 (left: 12)\\n12 * 2 = 24 (left: 24)\\nAnswer: 2 * (3 * (13 - \
4 - 5)) = 24\"\>"], "Output",
 CellChangeTimes->{
  3.898119611565269*^9, 3.8981208158367147`*^9, 3.898121180581555*^9, {
   3.898122782379902*^9, 3.898122806357955*^9}},
 CellLabel->
  "Out[663]=",ExpressionUUID->"b727089d-de93-4560-8547-b01a76a503ff"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Generate Thoughts with the Propose Prompt (1-shot learning example)\
\>", "Section",
 CellChangeTimes->{{3.894620251228896*^9, 3.894620256403202*^9}, {
   3.894621869004837*^9, 3.894621886563464*^9}, {3.894708761039744*^9, 
   3.8947087702435083`*^9}, {3.897937192084903*^9, 3.897937193984708*^9}, 
   3.898087462930304*^9, {3.898112517500759*^9, 
   3.898112532312174*^9}},ExpressionUUID->"846c7dbf-d144-4ef8-8bbe-\
969b9fcb6715"],

Cell["\<\
Tree of Thoughts improves language models\[CloseCurlyQuote] problem solving \
ability by enabling them to explore a branching web of possible decisions. At \
any given step in our problem solving process we consider several options, \
evaluate them, and keep the best options in our set of options. The first \
step for any given input (either the task input or numbers left after an \
operation) is to generate a list of proposed options we can consider.\
\>", "Text",
 CellChangeTimes->{{3.898123519834464*^9, 3.898123561616025*^9}, {
  3.898123616241683*^9, 
  3.8981238216576633`*^9}},ExpressionUUID->"a6d0bffa-1c22-4a52-a22c-\
e05259031d18"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateProposals", "=", 
   RowBox[{"LLMFunction", "[", 
    RowBox[{
    "\"\<Input: 2 8 8 14\nPossible next steps:\n2 + 8 = 10 (left: 8 10 14)\n8 \
/ 2 = 4 (left: 4 8 14)\n14 + 2 = 16 (left: 8 8 16)\n2 * 8 = 16 (left: 8 14 \
16)\n8 - 2 = 6 (left: 6 8 14)\n14 - 8 = 6 (left: 2 6 8)\n14 /  2 = 7 (left: 7 \
8 8)\n14 - 2 = 12 (left: 8 8 12)\nInput: `input`\nPossible next steps:\>\"", 
     ",", 
     RowBox[{
      RowBox[{"StringSplit", "[", 
       RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "&"}], ",", 
     RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.897937885330454*^9, 3.897937913273563*^9}, {
   3.89794068719888*^9, 3.897940692166933*^9}, {3.89799389369029*^9, 
   3.897993918339774*^9}, 3.898087478731234*^9, {3.898087675291017*^9, 
   3.898087711203302*^9}, {3.898090291615527*^9, 3.898090325474823*^9}, {
   3.898090528696384*^9, 3.898090530428196*^9}},
 CellLabel->
  "In[605]:=",ExpressionUUID->"9c002a8d-e329-4de6-8e88-772c2275a6b9"],

Cell["\<\
Now we can use this function to generate a list of options for our task input \
and visualize the results as a tree.\
\>", "Text",
 CellChangeTimes->{{3.89812384752169*^9, 
  3.8981238929296083`*^9}},ExpressionUUID->"f56b52b6-e2e4-4913-b3da-\
e1a666866aca"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"taskInput", " ", "=", " ", "\"\<4 5 6 10\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"proposals", "=", 
  RowBox[{"generateProposals", "[", 
   RowBox[{"<|", 
    RowBox[{"\"\<input\>\"", "->", " ", "taskInput"}], "|>"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8947085202185907`*^9, 3.894708551843343*^9}, {
   3.8947087763022223`*^9, 3.894708780446323*^9}, {3.8947106602399054`*^9, 
   3.8947106717619343`*^9}, {3.8975763093895493`*^9, 3.897576312598791*^9}, {
   3.89768626450091*^9, 3.897686266072969*^9}, {3.8976877497301598`*^9, 
   3.8976877506464443`*^9}, {3.89774302335641*^9, 3.897743024328142*^9}, {
   3.897770335005809*^9, 3.897770352643154*^9}, {3.89791736158917*^9, 
   3.897917364958593*^9}, {3.8979175041489687`*^9, 3.897917504864706*^9}, {
   3.897932488313897*^9, 3.897932488937537*^9}, {3.89793722793992*^9, 
   3.897937230171609*^9}, {3.8979378748829937`*^9, 3.897937909307176*^9}, {
   3.897937993985964*^9, 3.897937994159408*^9}, {3.8979380729094543`*^9, 
   3.897938078702914*^9}, 3.8979435845412827`*^9, 3.897993875880571*^9, 
   3.897993938372826*^9, {3.898087481629732*^9, 3.898087489223171*^9}, 
   3.898087655041492*^9, 3.898087712704458*^9, {3.8980878371874027`*^9, 
   3.898087848370944*^9}, {3.8980910018190117`*^9, 3.898091002793859*^9}, {
   3.89809255555025*^9, 3.8980925565877438`*^9}},
 CellLabel->
  "In[1138]:=",ExpressionUUID->"acd70c0f-ec1d-49d9-b604-e06247517b5b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"4 + 5 = 9 (left: 6 9 10)\"\>", 
   ",", "\<\"5 + 6 = 11 (left: 4 10 11)\"\>", 
   ",", "\<\"10 - 4 = 6 (left: 5 6 6)\"\>", 
   ",", "\<\"6 + 4 = 10 (left: 5 10 10)\"\>", 
   ",", "\<\"10 / 5 = 2 (left: 2 4 6)\"\>", 
   ",", "\<\"6 - 5 = 1 (left: 1 4 10)\"\>", 
   ",", "\<\"10 - 6 = 4 (left: 4 4 5)\"\>", 
   ",", "\<\"5 * 4 = 20 (left: 6 10 20) \"\>", 
   ",", "\<\"10 / 4 = 2.5 (left: 2.5 5 6)\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.898090074157621*^9, 3.898091030385858*^9, 
  3.898095623470386*^9, 3.898109122582279*^9, 3.89812759886266*^9, 
  3.898180342032505*^9},
 CellLabel->
  "Out[1139]=",ExpressionUUID->"0621dc07-962d-43e3-b19e-f115a379a58b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tree", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"StringTemplate", "[", "\"\<input: `input`\>\"", "]"}], "[", 
    RowBox[{"<|", 
     RowBox[{"\"\<input\>\"", "->", "taskInput"}], "|>"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"StringReplace", "[", 
      RowBox[{"#", ",", 
       RowBox[{"\"\<(\>\"", "->", "\"\<\\n(\>\""}]}], "]"}], "&"}], "/@", 
    "proposals"}], ",", 
   RowBox[{"TreeLayout", "->", "Left"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.898087808495076*^9, 3.898087829360025*^9}, {
   3.898087888786138*^9, 3.898087912827723*^9}, 3.8980881162782593`*^9, {
   3.898088726611862*^9, 3.898088796659227*^9}, {3.898088854735072*^9, 
   3.898088941214056*^9}, {3.8980890557963753`*^9, 3.8980891007026873`*^9}, {
   3.8980891338203287`*^9, 3.8980891622273817`*^9}, 3.8980894126418953`*^9, {
   3.898089778785678*^9, 3.898089784354718*^9}, {3.89809100946238*^9, 
   3.898091010383275*^9}, 3.898180130079657*^9, {3.898180302165142*^9, 
   3.898180322585939*^9}},
 CellLabel->
  "In[1140]:=",ExpressionUUID->"437cfec0-629c-4794-9731-12beb457e6da"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["Trees",
   DynamicModuleBox[{Typeset`tree = HoldComplete[
     Tree["input: 4 5 6 10", {
       Tree["4 + 5 = 9 \n(left: 6 9 10)", None], 
       Tree["5 + 6 = 11 \n(left: 4 10 11)", None], 
       Tree["10 - 4 = 6 \n(left: 5 6 6)", None], 
       Tree["6 + 4 = 10 \n(left: 5 10 10)", None], 
       Tree["10 / 5 = 2 \n(left: 2 4 6)", None], 
       Tree["6 - 5 = 1 \n(left: 1 4 10)", None], 
       Tree["10 - 6 = 4 \n(left: 4 4 5)", None], 
       Tree["5 * 4 = 20 \n(left: 6 10 20) ", None], 
       Tree["10 / 4 = 2.5 \n(left: 2.5 5 6)", None]}, {TreeLayout -> Left}]]}, 
    NamespaceBox[{
      {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.7223151185146178}, {0.36115755925730664`, 0.}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.7223151185146178}, {0.3611575592573071, 
         0.1805787796286544}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.7223151185146178}, {0.3611575592573073, 
         0.3611575592573088}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.7223151185146178}, {0.3611575592573073, 
         0.5417363388859632}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.7223151185146178}, {0.36115755925730775`, 
         0.7223151185146177}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.7223151185146178}, {0.36115755925730797`, 
         0.9028938981432721}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.7223151185146178}, {0.3611575592573084, 
         1.0834726777719264`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.7223151185146178}, {0.36115755925730864`, 
         1.2640514574005808`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.7223151185146178}, {0.36115755925730886`, 
         1.4446302370292354`}}]}}, 
      {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       TagBox[InsetBox[
         FrameBox["\<\"input: 4 5 6 10\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0., 0.7223151185146178}],
        "DynamicName",
        BoxID -> "VertexID$1"], 
       TagBox[InsetBox[
         FrameBox["\<\"4 + 5 = 9 \\n(left: 6 9 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.36115755925730664, 0.}],
        "DynamicName",
        BoxID -> "VertexID$2"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 + 6 = 11 \\n(left: 4 10 11)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.3611575592573071, 0.1805787796286544}],
        "DynamicName",
        BoxID -> "VertexID$3"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 - 4 = 6 \\n(left: 5 6 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.3611575592573073, 0.3611575592573088}],
        "DynamicName",
        BoxID -> "VertexID$4"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 + 4 = 10 \\n(left: 5 10 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.3611575592573073, 0.5417363388859632}],
        "DynamicName",
        BoxID -> "VertexID$5"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 / 5 = 2 \\n(left: 2 4 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.36115755925730775, 0.7223151185146177}],
        "DynamicName",
        BoxID -> "VertexID$6"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 - 5 = 1 \\n(left: 1 4 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.36115755925730797, 0.9028938981432721}],
        "DynamicName",
        BoxID -> "VertexID$7"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 - 6 = 4 \\n(left: 4 4 5)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.3611575592573084, 1.0834726777719264}],
        "DynamicName",
        BoxID -> "VertexID$8"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 * 4 = 20 \\n(left: 6 10 20) \"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.36115755925730864, 1.2640514574005808}],
        "DynamicName",
        BoxID -> "VertexID$9"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 / 4 = 2.5 \\n(left: 2.5 5 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.36115755925730886, 1.4446302370292354}],
        "DynamicName",
        BoxID -> "VertexID$10"]}}]]],
  AlignmentPoint->Center,
  Axes->False,
  AxesLabel->None,
  AxesOrigin->Automatic,
  AxesStyle->{},
  Background->None,
  BaseStyle->{},
  BaselinePosition->Automatic,
  ContentSelectable->Automatic,
  DefaultBaseStyle->"TreeGraphics",
  Epilog->{},
  FormatType->StandardForm,
  Frame->False,
  FrameLabel->None,
  FrameStyle->{},
  FrameTicks->None,
  FrameTicksStyle->{},
  GridLines->None,
  GridLinesStyle->{},
  ImageMargins->0.,
  ImagePadding->All,
  ImageSize->Automatic,
  LabelStyle->{},
  PlotLabel->None,
  PlotRange->All,
  PlotRangeClipping->False,
  PlotRangePadding->Automatic,
  PlotRegion->Automatic,
  Prolog->{},
  RotateLabel->True,
  Ticks->Automatic,
  TicksStyle->{}]], "Output",
 CellChangeTimes->{
  3.898089813921794*^9, {3.8980910115757236`*^9, 3.8980910332220907`*^9}, 
   3.8981091358468723`*^9, 3.8981801476241083`*^9, 3.898180357432921*^9},
 CellLabel->
  "Out[1140]=",ExpressionUUID->"714356aa-061d-4f1c-8bec-5b15d0189887"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate Proposed Thoughts with Value Prompt", "Section",
 CellChangeTimes->{
  3.898090100241576*^9, {3.8980901689384193`*^9, 3.898090174583633*^9}, {
   3.898090628465221*^9, 
   3.898090629813236*^9}},ExpressionUUID->"af9e26d2-7da4-4f21-b907-\
bea0d4036846"],

Cell["\<\
After we have generated a list of proposals we need to evaluate them so we \
can decide whether or not we should continue down a particular path of \
reasoning. In order to do this we use three categories which we will assign \
numerical values to form a rough heuristic for evaluating a particular \
proposal. Below we give an 8-shot prompt with varying inputs. If the numbers \
reach 24 we return \[OpenCurlyDoubleQuote]sure\[CloseCurlyDoubleQuote]. If \
they cannot reach 24 we return \[OpenCurlyDoubleQuote]impossible\
\[CloseCurlyDoubleQuote] and if we can get close we return \
\[OpenCurlyDoubleQuote]likely\[CloseCurlyDoubleQuote]. It is important to \
keep in mind that this is a rough heuristic and that the model may make \
mistakes in the evaluation that will persist later.\
\>", "Text",
 CellChangeTimes->{{3.8981239037263403`*^9, 3.898123919503756*^9}, {
  3.8981267547851477`*^9, 3.898126887848115*^9}, {3.8981269625933857`*^9, 
  3.898127077242942*^9}, {3.898127172912999*^9, 3.898127193649447*^9}, {
  3.8981272443629417`*^9, 
  3.898127299288769*^9}},ExpressionUUID->"30eba37d-3f60-44ad-8eba-\
811b5b933ea1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"evaluateProposal", "=", 
   RowBox[{"LLMFunction", "[", 
    RowBox[{
    "\"\<Evaluate if given numbers can reach 24 (sure/likely/impossible)\n10 \
14\n10 + 14 = 24\nsure\n11 12\n11 + 12 = 23\n12 - 11 = 1\n11 * 12 = 132\n11 / \
12 = 0.91\nimpossible\n4 4 10\n4 + 4 + 10 = 8 + 10 = 18\n4 * 10 - 4 = 40 - 4 \
= 36\n(10 - 4) * 4 = 6 * 4 = 24\nsure\n4 9 11\n9 + 11 + 4 = 20 + 4 = 24\nsure\
\n5 7 8\n5 + 7 + 8 = 12 + 8 = 20\n(8 - 5) * 7 = 3 * 7 = 21\nI cannot obtain \
24 now, but numbers are within a reasonable range\nlikely\n5 6 6\n5 + 6 + 6 = \
17\n(6 - 5) * 6 = 1 * 6 = 6\nI cannot obtain 24 now, but numbers are within a \
reasonable range\nlikely\n10 10 11\n10 + 10 + 11 = 31\n(11 - 10) * 10 = 10\n\
10 10 10 are all too big\nimpossible\n1 3 3\n1 * 3 * 3 = 9\n(1 + 3) * 3 = 12\n\
1 3 3 are all too small\nimpossible\n`input`\>\"", ",", 
     RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.89809046423199*^9, 3.898090501052084*^9, {3.898090657600889*^9, 
   3.898090658406302*^9}},
 CellLabel->
  "In[609]:=",ExpressionUUID->"6ec1c96f-6ec4-471f-b24f-2ec09bebf8ce"],

Cell["\<\
In order to evaluate a thought, we look at the numbers that remain after \
performing an operation.\
\>", "Text",
 CellChangeTimes->{{3.898127335517774*^9, 
  3.898127374779565*^9}},ExpressionUUID->"8589745c-434d-486a-8a28-\
1603d1165258"],

Cell[CellGroupData[{

Cell["Helper function to get left numbers from thoughts", "Subsection",
 CellChangeTimes->{{3.898090670007235*^9, 3.8980906763785753`*^9}, {
   3.8980911270565977`*^9, 3.898091131201157*^9}, 
   3.898091162064767*^9},ExpressionUUID->"99731bd8-51a7-486f-b241-\
bc261d23098f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getLeftNumbers", "[", "thought_String", "]"}], ":=", 
   RowBox[{"First", "@", 
    RowBox[{"StringCases", "[", 
     RowBox[{"thought", ",", 
      RowBox[{
       RowBox[{"\"\<(left: \>\"", "~~", "x__", "~~", "\"\<)\>\""}], ":>", 
       "x"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8980906999871492`*^9, 3.898090727542045*^9}},
 CellLabel->
  "In[610]:=",ExpressionUUID->"b6bd5179-e97d-4416-a1d8-75cc8efec3df"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate proposal", "Subsection",
 CellChangeTimes->{{3.898090739037653*^9, 
  3.89809075566826*^9}},ExpressionUUID->"a0269a78-6bdb-49c0-a2d4-\
e12189257f88"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"proposal", " ", "=", " ", 
   RowBox[{"proposals", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"evaluatedT", " ", "=", " ", 
  RowBox[{"evaluateProposal", "[", 
   RowBox[{"<|", 
    RowBox[{"\"\<input\>\"", "->", 
     RowBox[{"getLeftNumbers", "[", "proposal", "]"}]}], "|>"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.898090929440008*^9, 3.8980909834356117`*^9}, {
  3.898091068954781*^9, 3.898091082813508*^9}, {3.898091217941887*^9, 
  3.8980912245821533`*^9}},
 CellLabel->
  "In[611]:=",ExpressionUUID->"f0556489-c104-40ec-ab19-0141d475b799"],

Cell[BoxData["\<\"6 + 9 + 10 = 25\\n(10 - 6) * 9 = 36\\nI cannot obtain 24 \
now, but numbers are within a reasonable range\\nlikely\"\>"], "Output",
 CellChangeTimes->{3.898091087496667*^9, 3.898091234037475*^9, 
  3.898109162361951*^9},
 CellLabel->
  "Out[612]=",ExpressionUUID->"2f6613e0-a444-4935-986d-a790c1130522"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Helper function to get value from evaluated thoughts", "Subsection",
 CellChangeTimes->{{3.898091186538068*^9, 3.8980912149913673`*^9}, {
  3.898091254885161*^9, 
  3.8980912566110773`*^9}},ExpressionUUID->"12d78a68-a90e-4dfd-8a33-\
242880becb2a"],

Cell["\<\
We assign to each category a numerical value. We heavily weight cases where \
the model is \[OpenCurlyDoubleQuote]sure\[CloseCurlyDoubleQuote] to avoid \
missing paths that can reach a solution.\
\>", "Text",
 CellChangeTimes->{{3.898127386274493*^9, 3.8981273883777523`*^9}, {
  3.8981274286806517`*^9, 
  3.898127510035108*^9}},ExpressionUUID->"9131c2fc-e80e-47df-b7bd-\
4d9d3e2576b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getValueHelper", "[", "evaluatedT_", "]"}], ":=", " ", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"StringQ", "[", "evaluatedT", "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"ToLowerCase", "[", 
        RowBox[{"Last", "[", 
         RowBox[{"StringSplit", "[", 
          RowBox[{"evaluatedT", ",", "\"\<\\n\>\""}], "]"}], "]"}], "]"}], 
       ",", "\"\<likely\>\"", ",", "1", ",", "\"\<sure\>\"", ",", "20", ",", 
       "\"\<impossible\>\"", ",", "0.1", ",", "_", ",", "0"}], "]"}], ",", 
     "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.898091259726318*^9, 3.898091262923691*^9}},
 CellLabel->
  "In[613]:=",ExpressionUUID->"1c1a2466-9433-446d-a22a-ccef090da36c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"value", " ", "=", " ", 
  RowBox[{"getValueHelper", "[", "evaluatedT", "]"}]}]], "Input",
 CellChangeTimes->{{3.898091281282921*^9, 3.898091292002269*^9}},
 CellLabel->
  "In[614]:=",ExpressionUUID->"8c9530ec-aafd-4163-a27c-f596b5cf881d"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.898091293035302*^9, 3.898109169591082*^9},
 CellLabel->
  "Out[614]=",ExpressionUUID->"3fd5d94f-0c43-44d6-a454-280711a6e16d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["proposals"], "Input",
 CellChangeTimes->{{3.898127551301861*^9, 3.898127552531658*^9}},
 CellLabel->
  "In[678]:=",ExpressionUUID->"1db08861-7675-4723-b078-0ddcb35198a2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"4 + 5 = 9 (left: 6 9 10)\"\>", 
   ",", "\<\"5 + 6 = 11 (left: 4 10 11)\"\>", 
   ",", "\<\"6 + 10 = 16 (left: 4 5 16)\"\>", 
   ",", "\<\"4 * 5 = 20 (left: 6 10 20)\"\>", 
   ",", "\<\"10 - 4 = 6 (left: 5 6 6)\"\>", 
   ",", "\<\"10 - 5 = 5 (left: 4 5 6)\"\>", 
   ",", "\<\"6 - 4 = 2 (left: 2 5 10)\"\>", 
   ",", "\<\"6 / 4 = 1.5 (left: 1.5 5 10)\"\>", 
   ",", "\<\"10 / 5 = 2 (left: 2 4 6)\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.8981276039160433`*^9},
 CellLabel->
  "Out[678]=",ExpressionUUID->"e3b845b1-2d42-40e3-b6b6-c40d33662c41"]
}, Open  ]],

Cell["\<\
For each of our proposed steps we get a value. We perform n=3 evaluations for \
each proposal and sum the results\
\>", "Text",
 CellChangeTimes->{{3.89812762051464*^9, 
  3.898127670936145*^9}},ExpressionUUID->"6c3a2de0-a6cb-415a-a9bc-\
992588e12c37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"values", " ", "=", " ", 
  RowBox[{"getValues", "[", 
   RowBox[{"proposals", ",", " ", "taskInput"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8980928986916*^9, 3.898092908479445*^9}, {
  3.898094075935821*^9, 3.898094081600334*^9}, {3.898095585106471*^9, 
  3.898095585644136*^9}, {3.898109296685362*^9, 
  3.8981092973788147`*^9}},ExpressionUUID->"e1f4bbd7-a365-44f2-a67c-\
d7a3a68e9b29"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "41", ",", "3", ",", "2.1`", ",", "2.1`", ",", "2.1`", ",", 
   "2.1`", ",", "2.1`", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.89809313176724*^9, 3.89809408349551*^9, 
  3.8980957432516327`*^9, 3.898109272970421*^9},
 CellLabel->
  "Out[615]=",ExpressionUUID->"e3637042-b72b-4c4b-9c1a-64a7581fd9d7"]
}, Open  ]],

Cell["\<\
Here we visualize the results after generating proposals for the first step \
and evaluating.\
\>", "Text",
 CellChangeTimes->{{3.8981276825353527`*^9, 
  3.8981277100000887`*^9}},ExpressionUUID->"ae995d44-5b98-400a-835f-\
c49342b46804"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"valuedProposals", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Tree", "[", 
       RowBox[{
        RowBox[{"StringReplace", "[", 
         RowBox[{
          RowBox[{"proposals", "[", 
           RowBox[{"[", "#", "]"}], "]"}], ",", 
          RowBox[{"\"\<(\>\"", "->", "\"\<\\n(\>\""}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"StringForm", "[", 
          RowBox[{"\"\<value = ``\>\"", ",", 
           RowBox[{"NumberForm", "[", 
            RowBox[{
             RowBox[{"values", "[", 
              RowBox[{"[", "#", "]"}], "]"}], ",", "2"}], "]"}]}], "  ", 
          "]"}], "}"}]}], "]"}], ")"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "proposals", "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Tree", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTemplate", "[", "\"\<input: `input`\>\"", "]"}], "[", 
     RowBox[{"<|", 
      RowBox[{"\"\<input\>\"", "->", "taskInput"}], "|>"}], "]"}], ",", 
    "valuedProposals", ",", 
    RowBox[{"TreeLayout", "->", "Left"}], ",", 
    RowBox[{"TreeElementStyle", " ", "->", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", " ", "_", "}"}], " ", "->", " ", "LightYellow"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", " ", "__"}], "}"}], " ", "->", " ", 
        "LightBlue"}]}], "}"}]}], ",", 
    RowBox[{"ImageSize", "->", "300"}]}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.8980938863710213`*^9, 3.8980939283266172`*^9}, {
   3.898093975033168*^9, 3.8980940631961*^9}, {3.898094826474633*^9, 
   3.8980948549805813`*^9}, {3.898095190903157*^9, 3.898095278930388*^9}, {
   3.898095472230247*^9, 3.898095480657268*^9}, {3.898096398643592*^9, 
   3.898096432347691*^9}, {3.8980964655560417`*^9, 3.89809646883333*^9}, {
   3.898096577287162*^9, 3.898096586076714*^9}, {3.898097278259066*^9, 
   3.898097334408931*^9}, {3.898100187678609*^9, 3.8981002590905952`*^9}, {
   3.898127984931221*^9, 3.8981279886202183`*^9}, 3.898180393552307*^9, {
   3.8981804552329617`*^9, 3.898180470386157*^9}},
 CellLabel->
  "In[1149]:=",ExpressionUUID->"ac44531d-030e-4266-be4b-288a763474d5"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["Trees",
   DynamicModuleBox[{Typeset`tree = HoldComplete[
     Tree["input: 4 5 6 10", {
       Tree["4 + 5 = 9 \n(left: 6 9 10)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[3, 2]], None]}], 
       Tree["5 + 6 = 11 \n(left: 4 10 11)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[41, 2]], None]}], 
       Tree["10 - 4 = 6 \n(left: 5 6 6)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[3, 2]], None]}], 
       Tree["6 + 4 = 10 \n(left: 5 10 10)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[2.1, 2]], None]}], 
       Tree["10 / 5 = 2 \n(left: 2 4 6)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[2.1, 2]], None]}], 
       Tree["6 - 5 = 1 \n(left: 1 4 10)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[2.1, 2]], None]}], 
       Tree["10 - 6 = 4 \n(left: 4 4 5)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[2.1, 2]], None]}], 
       Tree["5 * 4 = 20 \n(left: 6 10 20) ", {
         Tree[
          StringForm["value = ``", 
           NumberForm[2.1, 2]], None]}], 
       Tree["10 / 4 = 2.5 \n(left: 2.5 5 6)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[3, 2]], None]}]}, {
      TreeLayout -> Left, TreeElementStyle -> {{
           Blank[]} -> RGBColor[1, 1, 0.85], {
           Blank[], 
           BlankSequence[]} -> RGBColor[0.87, 0.94, 1]}, ImageSize -> 300}]]}, 
    NamespaceBox[{
      {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.7666838955644817`}, {0.4803844614152599, 
         4.0830070404684404`*^-16}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.7666838955644817`}, {0.48038446141526037`, 
         0.4416709738911207}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.7666838955644817`}, {0.4803844614152608, 
         0.8833419477822408}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.7666838955644817`}, {0.4803844614152608, 
         1.325012921673361}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.7666838955644817`}, {0.48038446141526125`, 
         1.7666838955644815`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.7666838955644817`}, {0.4803844614152617, 
         2.2083548694556017`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.7666838955644817`}, {0.48038446141526214`, 
         2.6500258433467216`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.7666838955644817`}, {0.4803844614152626, 
         3.091696817237842}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.7666838955644817`}, {0.48038446141526303`, 
         3.5333677911289625`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.4803844614152599, 4.0830070404684404`*^-16}, {
         0.9607689228305214, 0.}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.48038446141526037`, 0.4416709738911207}, {
         0.9607689228305218, 0.4416709738911205}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.4803844614152608, 0.8833419477822408}, {
         0.9607689228305223, 0.8833419477822405}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.4803844614152608, 1.325012921673361}, {0.9607689228305223,
          1.3250129216733608`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.48038446141526125`, 1.7666838955644815`}, {
         0.9607689228305227, 1.7666838955644812`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.4803844614152617, 2.2083548694556017`}, {
         0.9607689228305232, 2.2083548694556017`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.48038446141526214`, 2.6500258433467216`}, {
         0.9607689228305236, 2.650025843346721}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.4803844614152626, 3.091696817237842}, {0.9607689228305241,
          3.0916968172378416`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.48038446141526303`, 3.5333677911289625`}, {
         0.9607689228305245, 3.533367791128962}}]}}, 
      {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       TagBox[InsetBox[
         FrameBox["\<\"input: 4 5 6 10\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0., 1.7666838955644817}],
        "DynamicName",
        BoxID -> "VertexID$1"], 
       TagBox[InsetBox[
         FrameBox["\<\"4 + 5 = 9 \\n(left: 6 9 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.4803844614152599, 4.0830070404684404*^-16}],
        "DynamicName",
        BoxID -> "VertexID$2"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"3\\\\\\\
\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[3, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.9607689228305214, 0.}],
        "DynamicName",
        BoxID -> "VertexID$3"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 + 6 = 11 \\n(left: 4 10 11)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.48038446141526037, 0.4416709738911207}],
        "DynamicName",
        BoxID -> "VertexID$4"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \
\\!\\(\\*RowBox[{\\\"\\\\\\\"41\\\\\\\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[41, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.9607689228305218, 0.4416709738911205}],
        "DynamicName",
        BoxID -> "VertexID$5"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 - 4 = 6 \\n(left: 5 6 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.4803844614152608, 0.8833419477822408}],
        "DynamicName",
        BoxID -> "VertexID$6"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"3\\\\\\\
\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[3, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.9607689228305223, 0.8833419477822405}],
        "DynamicName",
        BoxID -> "VertexID$7"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 + 4 = 10 \\n(left: 5 10 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.4803844614152608, 1.325012921673361}],
        "DynamicName",
        BoxID -> "VertexID$8"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"2.1\\\\\
\\\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[2.1, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.9607689228305223, 1.3250129216733608}],
        "DynamicName",
        BoxID -> "VertexID$9"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 / 5 = 2 \\n(left: 2 4 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.48038446141526125, 1.7666838955644815}],
        "DynamicName",
        BoxID -> "VertexID$10"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"2.1\\\\\
\\\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[2.1, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.9607689228305227, 1.7666838955644812}],
        "DynamicName",
        BoxID -> "VertexID$11"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 - 5 = 1 \\n(left: 1 4 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.4803844614152617, 2.2083548694556017}],
        "DynamicName",
        BoxID -> "VertexID$12"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"2.1\\\\\
\\\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[2.1, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.9607689228305232, 2.2083548694556017}],
        "DynamicName",
        BoxID -> "VertexID$13"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 - 6 = 4 \\n(left: 4 4 5)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.48038446141526214, 2.6500258433467216}],
        "DynamicName",
        BoxID -> "VertexID$14"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"2.1\\\\\
\\\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[2.1, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.9607689228305236, 2.650025843346721}],
        "DynamicName",
        BoxID -> "VertexID$15"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 * 4 = 20 \\n(left: 6 10 20) \"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.4803844614152626, 3.091696817237842}],
        "DynamicName",
        BoxID -> "VertexID$16"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"2.1\\\\\
\\\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[2.1, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.9607689228305241, 3.0916968172378416}],
        "DynamicName",
        BoxID -> "VertexID$17"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 / 4 = 2.5 \\n(left: 2.5 5 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.48038446141526303, 3.5333677911289625}],
        "DynamicName",
        BoxID -> "VertexID$18"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"3\\\\\\\
\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[3, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.9607689228305245, 3.533367791128962}],
        "DynamicName",
        BoxID -> "VertexID$19"]}}]]],
  AlignmentPoint->Center,
  Axes->False,
  AxesLabel->None,
  AxesOrigin->Automatic,
  AxesStyle->{},
  Background->None,
  BaseStyle->{},
  BaselinePosition->Automatic,
  ContentSelectable->Automatic,
  DefaultBaseStyle->"TreeGraphics",
  Epilog->{},
  FormatType->StandardForm,
  Frame->False,
  FrameLabel->None,
  FrameStyle->{},
  FrameTicks->None,
  FrameTicksStyle->{},
  GridLines->None,
  GridLinesStyle->{},
  ImageMargins->0.,
  ImagePadding->All,
  ImageSize->300,
  LabelStyle->{},
  PlotLabel->None,
  PlotRange->All,
  PlotRangeClipping->False,
  PlotRangePadding->Automatic,
  PlotRegion->Automatic,
  Prolog->{},
  RotateLabel->True,
  Ticks->Automatic,
  TicksStyle->{}]], "Output",
 CellChangeTimes->{{3.898096586542556*^9, 3.898096606034322*^9}, {
   3.898097291927318*^9, 3.898097334813777*^9}, 3.89810026349596*^9, {
   3.8981092731456747`*^9, 3.8981092889578533`*^9}, 3.8981279898540373`*^9, {
   3.8981804002346163`*^9, 3.8981804196775427`*^9}, {3.898180462959488*^9, 
   3.898180471015451*^9}},
 CellLabel->
  "Out[1150]=",ExpressionUUID->"30f1211d-3424-4d62-98c8-97bbde12681a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"valuedProposals2", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Tree", "[", 
       RowBox[{
        RowBox[{"StringReplace", "[", 
         RowBox[{
          RowBox[{"proposals", "[", 
           RowBox[{"[", "#", "]"}], "]"}], ",", 
          RowBox[{"\"\<(\>\"", "->", "\"\<\\n(\>\""}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"StringForm", "[", 
          RowBox[{"\"\<value = ``\>\"", ",", 
           RowBox[{"NumberForm", "[", 
            RowBox[{
             RowBox[{"values", "[", 
              RowBox[{"[", "#", "]"}], "]"}], ",", "2"}], "]"}]}], "  ", 
          "]"}], "}"}]}], "]"}], ")"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"Length", "[", "proposals", "]"}], "/", "2"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Tree", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"StringTemplate", "[", "\"\<input: `input`\>\"", "]"}], "[", 
    RowBox[{"<|", 
     RowBox[{"\"\<input\>\"", "->", "taskInput"}], "|>"}], "]"}], ",", 
   "valuedProposals2", ",", 
   RowBox[{"TreeLayout", "->", "Left"}], ",", 
   RowBox[{"TreeElementStyle", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", " ", "_", "}"}], " ", "->", " ", "LightYellow"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", " ", "__"}], "}"}], " ", "->", " ", "LightBlue"}]}],
      "}"}]}], ",", 
   RowBox[{"ImageSize", "->", "300"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.898245791678473*^9, 3.898245820213539*^9}},
 CellLabel->
  "In[1168]:=",ExpressionUUID->"32216bd5-c41b-43f1-ba99-ce90a1ea9078"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["Trees",
   DynamicModuleBox[{Typeset`tree = HoldComplete[
     Tree["input: 4 5 6 10", {
       Tree["4 + 5 = 9 \n(left: 6 9 10)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[3, 2]], None]}], 
       Tree["5 + 6 = 11 \n(left: 4 10 11)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[41, 2]], None]}], 
       Tree["10 - 4 = 6 \n(left: 5 6 6)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[3, 2]], None]}], 
       Tree["6 + 4 = 10 \n(left: 5 10 10)", {
         Tree[
          StringForm["value = ``", 
           NumberForm[2.1, 2]], None]}]}, {
      TreeLayout -> Left, TreeElementStyle -> {{
           Blank[]} -> RGBColor[1, 1, 0.85], {
           Blank[], 
           BlankSequence[]} -> RGBColor[0.87, 0.94, 1]}, ImageSize -> 300}]]}, 
    NamespaceBox[{
      {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.1479356645305312`}, {0.7844645405527353, 
         8.664693190778224*^-16}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.1479356645305312`}, {0.784464540552736, 
         0.7652904430203539}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.1479356645305312`}, {0.7844645405527366, 
         1.5305808860407073`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.1479356645305312`}, {0.7844645405527371, 
         2.29587132906106}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.7844645405527353, 8.664693190778224*^-16}, {
         1.5689290811054717`, 0.}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.784464540552736, 0.7652904430203539}, {
         1.5689290811054721`, 0.7652904430203534}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.7844645405527366, 1.5305808860407073`}, {
         1.568929081105473, 1.5305808860407064`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.7844645405527371, 2.29587132906106}, {1.568929081105473, 
         2.29587132906106}}]}}, 
      {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       TagBox[InsetBox[
         FrameBox["\<\"input: 4 5 6 10\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0., 1.1479356645305312}],
        "DynamicName",
        BoxID -> "VertexID$1"], 
       TagBox[InsetBox[
         FrameBox["\<\"4 + 5 = 9 \\n(left: 6 9 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.7844645405527353, 8.664693190778224*^-16}],
        
        "DynamicName",
        BoxID -> "VertexID$2"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"3\\\\\\\
\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[3, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.5689290811054717, 0.}],
        "DynamicName",
        BoxID -> "VertexID$3"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 + 6 = 11 \\n(left: 4 10 11)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.784464540552736, 0.7652904430203539}],
        "DynamicName",
        BoxID -> "VertexID$4"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \
\\!\\(\\*RowBox[{\\\"\\\\\\\"41\\\\\\\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[41, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.5689290811054721, 0.7652904430203534}],
        "DynamicName",
        BoxID -> "VertexID$5"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 - 4 = 6 \\n(left: 5 6 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.7844645405527366, 1.5305808860407073}],
        "DynamicName",
        BoxID -> "VertexID$6"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"3\\\\\\\
\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[3, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.568929081105473, 1.5305808860407064}],
        "DynamicName",
        BoxID -> "VertexID$7"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 + 4 = 10 \\n(left: 5 10 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.7844645405527371, 2.29587132906106}],
        "DynamicName",
        BoxID -> "VertexID$8"], 
       TagBox[InsetBox[
         FrameBox[
          
          InterpretationBox["\<\"value = \\!\\(\\*RowBox[{\\\"\\\\\\\"2.1\\\\\
\\\"\\\"}]\\)\"\>",
           StringForm["value = ``", 
            NumberForm[2.1, 2]],
           Editable->False],
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.87, 0.94, 1]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.568929081105473, 2.29587132906106}],
        "DynamicName",
        BoxID -> "VertexID$9"]}}]]],
  AlignmentPoint->Center,
  Axes->False,
  AxesLabel->None,
  AxesOrigin->Automatic,
  AxesStyle->{},
  Background->None,
  BaseStyle->{},
  BaselinePosition->Automatic,
  ContentSelectable->Automatic,
  DefaultBaseStyle->"TreeGraphics",
  Epilog->{},
  FormatType->StandardForm,
  Frame->False,
  FrameLabel->None,
  FrameStyle->{},
  FrameTicks->None,
  FrameTicksStyle->{},
  GridLines->None,
  GridLinesStyle->{},
  ImageMargins->0.,
  ImagePadding->All,
  ImageSize->300,
  LabelStyle->{},
  PlotLabel->None,
  PlotRange->All,
  PlotRangeClipping->False,
  PlotRangePadding->Automatic,
  PlotRegion->Automatic,
  Prolog->{},
  RotateLabel->True,
  Ticks->Automatic,
  TicksStyle->{}]], "Output",
 CellChangeTimes->{3.8982458221337643`*^9},
 CellLabel->
  "Out[1169]=",ExpressionUUID->"584e5b94-0dc8-40ab-8d27-2b38e6063318"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Select Top Proposals and Repeat The Process", "Section",
 CellChangeTimes->{{3.898097607160405*^9, 
  3.898097615564061*^9}},ExpressionUUID->"a514769b-8770-4e07-9686-\
586bda1ab307"],

Cell["\<\
The next step is to select the top proposals based on value and generate new \
proposals for each of these with the remaining numbers as input. Here we \
select the top 5 proposals from the previous step.\
\>", "Text",
 CellChangeTimes->{{3.898127739234761*^9, 
  3.898127807965254*^9}},ExpressionUUID->"cfe230de-ea05-4bef-95e6-\
18df8e50c2bd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nSelect", " ", "=", " ", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ids", "=", 
   RowBox[{"Range", "[", 
    RowBox[{"Length", "[", "proposals", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sortedIDs", "=", 
   RowBox[{"Reverse", "@", 
    RowBox[{"SortBy", "[", 
     RowBox[{"ids", ",", 
      RowBox[{
       RowBox[{"values", "[", 
        RowBox[{"[", "#", "]"}], "]"}], "&"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"selectIDs", "=", 
   RowBox[{"Take", "[", 
    RowBox[{"sortedIDs", ",", 
     RowBox[{"Min", "[", 
      RowBox[{"nSelect", ",", 
       RowBox[{"Length", "[", "sortedIDs", "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"newProposals", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"proposals", "[", 
     RowBox[{"[", "#", "]"}], "]"}], "&"}], "/@", "selectIDs"}]}]}], "Input",
 CellChangeTimes->{{3.898097745145049*^9, 3.8980977756191587`*^9}, {
  3.898098582726836*^9, 3.8980985838550673`*^9}, {3.898098625734343*^9, 
  3.898098626408298*^9}, {3.898098685269002*^9, 3.898098734958538*^9}},
 CellLabel->
  "In[528]:=",ExpressionUUID->"a900d0e2-e699-4955-8a67-3102afa871f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"10 - 5 = 5 (left: 4 5 6)\"\>", 
   ",", "\<\"10 - 4 = 6 (left: 5 6 6)\"\>", 
   ",", "\<\"4 + 5 = 9 (left: 6 9 10)\"\>", 
   ",", "\<\"10 / 4 = 2.5 (left: 2.5 5 6)\"\>", 
   ",", "\<\"6 - 4 = 2 (left: 2 5 10)\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.8980987103743896`*^9, 3.8980987355466957`*^9}},
 CellLabel->
  "Out[532]=",ExpressionUUID->"8d6143df-d7d8-4f00-a89d-32b0bf4ef0a5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"valuedProposals", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Tree", "[", 
       RowBox[{
        RowBox[{"proposals", "[", 
         RowBox[{"[", "#", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"StringForm", "[", 
          RowBox[{"\"\<value = ``\>\"", ",", 
           RowBox[{"NumberForm", "[", 
            RowBox[{
             RowBox[{"values", "[", 
              RowBox[{"[", "#", "]"}], "]"}], ",", "2"}], "]"}]}], "  ", 
          "]"}], "}"}]}], "]"}], ")"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "proposals", "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.8980993071322002`*^9, {3.898100667967182*^9, 
   3.898100668190854*^9}},ExpressionUUID->"8c0fb3db-8c3a-48ae-85d3-\
e15738d3bddf"],

Cell["Here is the pruned tree with the top 5 proposals.", "Text",
 CellChangeTimes->{{3.898127820552382*^9, 3.898127829107312*^9}, {
  3.898127888587208*^9, 3.898127904365563*^9}, {3.898128002597322*^9, 
  3.898128016768136*^9}},ExpressionUUID->"e126348e-6785-45b2-84f0-\
7c9aa20cf36d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tree", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"StringTemplate", "[", "\"\<input: `input`\>\"", "]"}], "[", 
    RowBox[{"<|", 
     RowBox[{"\"\<input\>\"", "->", "taskInput"}], "|>"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"StringReplace", "[", 
      RowBox[{"#", ",", 
       RowBox[{"\"\<(\>\"", "->", "\"\<\\n(\>\""}]}], "]"}], "&"}], "/@", 
    "newProposals"}], ",", 
   RowBox[{"TreeLayout", "->", "Left"}], ",", 
   RowBox[{"TreeElementStyle", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", " ", "_", "}"}], " ", "->", " ", "LightYellow"}], "}"}]}], 
   ",", 
   RowBox[{"ImageSize", "->", "200"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.898099035180874*^9, 3.898099040555675*^9}, {
  3.898100306332534*^9, 3.8981003318419733`*^9}, {3.8981005761885*^9, 
  3.898100583792163*^9}, {3.8981804821164494`*^9, 3.898180506552519*^9}},
 CellLabel->
  "In[1152]:=",ExpressionUUID->"62e8adbe-dcd9-4965-be92-fbeb48666895"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["Trees",
   DynamicModuleBox[{Typeset`tree = HoldComplete[
     Tree["input: 4 5 6 10", {
       Tree["10 - 5 = 5 \n(left: 4 5 6)", None], 
       Tree["10 - 4 = 6 \n(left: 5 6 6)", None], 
       Tree["4 + 5 = 9 \n(left: 6 9 10)", None], 
       Tree["10 / 4 = 2.5 \n(left: 2.5 5 6)", None], 
       Tree["6 - 4 = 2 \n(left: 2 5 10)", None]}, {
      TreeLayout -> Left, TreeElementStyle -> {{
           Blank[]} -> RGBColor[1, 1, 0.85]}, ImageSize -> 200}]]}, 
    NamespaceBox[{
      {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.053157059395251}, {0.5773502691896251, 0.}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.053157059395251}, {0.5773502691896255, 
         0.5265785296976252}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.053157059395251}, {0.5773502691896257, 
         1.0531570593952506`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.053157059395251}, {0.5773502691896264, 
         1.579735589092876}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.053157059395251}, {0.5773502691896268, 
         2.1063141187905012`}}]}}, 
      {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       TagBox[InsetBox[
         FrameBox["\<\"input: 4 5 6 10\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0., 1.053157059395251}],
        "DynamicName",
        BoxID -> "VertexID$1"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 - 5 = 5 \\n(left: 4 5 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.5773502691896251, 0.}],
        "DynamicName",
        BoxID -> "VertexID$2"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 - 4 = 6 \\n(left: 5 6 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.5773502691896255, 0.5265785296976252}],
        "DynamicName",
        BoxID -> "VertexID$3"], 
       TagBox[InsetBox[
         FrameBox["\<\"4 + 5 = 9 \\n(left: 6 9 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.5773502691896257, 1.0531570593952506}],
        "DynamicName",
        BoxID -> "VertexID$4"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 / 4 = 2.5 \\n(left: 2.5 5 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.5773502691896264, 1.579735589092876}],
        "DynamicName",
        BoxID -> "VertexID$5"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 - 4 = 2 \\n(left: 2 5 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.5773502691896268, 2.1063141187905012}],
        "DynamicName",
        BoxID -> "VertexID$6"]}}]]],
  AlignmentPoint->Center,
  Axes->False,
  AxesLabel->None,
  AxesOrigin->Automatic,
  AxesStyle->{},
  Background->None,
  BaseStyle->{},
  BaselinePosition->Automatic,
  ContentSelectable->Automatic,
  DefaultBaseStyle->"TreeGraphics",
  Epilog->{},
  FormatType->StandardForm,
  Frame->False,
  FrameLabel->None,
  FrameStyle->{},
  FrameTicks->None,
  FrameTicksStyle->{},
  GridLines->None,
  GridLinesStyle->{},
  ImageMargins->0.,
  ImagePadding->All,
  ImageSize->200,
  LabelStyle->{},
  PlotLabel->None,
  PlotRange->All,
  PlotRangeClipping->False,
  PlotRangePadding->Automatic,
  PlotRegion->Automatic,
  Prolog->{},
  RotateLabel->True,
  Ticks->Automatic,
  TicksStyle->{}]], "Output",
 CellChangeTimes->{
  3.898099041242382*^9, {3.898100314477522*^9, 3.898100332480443*^9}, {
   3.8981005796885633`*^9, 3.8981005843142853`*^9}, {3.898180501976391*^9, 
   3.898180506928401*^9}},
 CellLabel->
  "Out[1152]=",ExpressionUUID->"932cac29-ba55-425b-91db-661958632530"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"proposals", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"getProposals", "[", 
       RowBox[{"#", ",", "taskInput"}], "]"}], " ", "&"}], "/@", 
     "newProposals"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.898098796951603*^9, 3.898098808263694*^9}, 
   3.8980988819781923`*^9, 
   3.8981007073578176`*^9},ExpressionUUID->"b5e82884-5c2e-470a-b924-\
a5ebce2a215d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"first", " ", "=", " ", 
   RowBox[{
    RowBox[{"StringSplit", "[", 
     RowBox[{
      RowBox[{"proposals", "[", 
       RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<\\n\>\""}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"split", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", "\"\<\\n\>\""}], "]"}], "&"}], "/@", "proposals"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filtered", " ", "=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "&"}], ")"}], "/@", 
    RowBox[{"Select", "[", 
     RowBox[{"split", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "==", "first"}], "&"}]}], "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8980990924824743`*^9, 3.898099134593197*^9}, {
  3.898099538635713*^9, 3.898099544362034*^9}, {3.898099591281712*^9, 
  3.8980995970372334`*^9}, {3.898099639280319*^9, 3.898099789849744*^9}, {
  3.8980998509093513`*^9, 3.8980998740377293`*^9}, {3.898099922021315*^9, 
  3.8980999340310802`*^9}, {3.898100069964579*^9, 3.898100083587908*^9}, {
  3.898100434061129*^9, 3.8981004432259197`*^9}},
 CellLabel->
  "In[596]:=",ExpressionUUID->"0bd21ad5-6267-444b-b528-d3b5d4a92f3c"],

Cell["Here we visualize a sub-tree for a select path in our tree.", "Text",
 CellChangeTimes->{{3.89812804783078*^9, 
  3.898128077323279*^9}},ExpressionUUID->"110fbf81-8e86-4da6-be90-\
d81d280e6962"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tree", "[", 
  RowBox[{"first", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"StringReplace", "[", 
      RowBox[{"#", ",", 
       RowBox[{"\"\<(\>\"", "->", "\"\<\\n(\>\""}]}], "]"}], "&"}], "/@", 
    "filtered"}], ",", 
   RowBox[{"TreeLayout", "->", "Left"}], ",", 
   RowBox[{"TreeElementStyle", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", " ", "}"}], " ", "->", " ", "LightYellow"}], ",", 
      RowBox[{
       RowBox[{"{", "_", "}"}], "->", "LightOrange"}]}], "}"}]}], ",", 
   RowBox[{"ImageSize", "->", "250"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.898100133083415*^9, 3.898100148496415*^9}, {
  3.8981003759631023`*^9, 3.898100394731625*^9}, {3.898100459807158*^9, 
  3.898100462620244*^9}, {3.898100591123967*^9, 3.8981005939898376`*^9}, {
  3.898100723094563*^9, 3.898100762999209*^9}, {3.89812803550229*^9, 
  3.8981280426379623`*^9}, {3.898180519582758*^9, 3.898180527713323*^9}},
 CellLabel->
  "In[1154]:=",ExpressionUUID->"54f31c28-27fd-4581-8921-461dbdeb8fc6"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["Trees",
   DynamicModuleBox[{Typeset`tree = HoldComplete[
     Tree["10 - 5 = 5 (left: 4 5 6)", {
       Tree["4 + 5 = 9 \n(left: 6 9)", None], 
       Tree["5 + 6 = 11 \n(left: 4 11)", None], 
       Tree["6 + 4 = 10 \n(left: 5 10)", None], 
       Tree["4 * 5 = 20 \n(left: 6 20)", None], 
       Tree["5 * 6 = 30 \n(left: 4 30)", None], 
       Tree["6 * 4 = 24 \n(left: 5 24)", None], 
       Tree["6 - 4 = 2 \n(left: 2 5)", None], 
       Tree["5 - 4 = 1 \n(left: 1 6)", None], 
       Tree["6 / 4 = 1.5 \n(left: 1.5 5)", None], 
       Tree["5 / 4 = 1.25 \n(left: 1.25 6)", None], 
       Tree["6 / 5 = 1.2 \n(left: 1.2 4)", None]}, {
      TreeLayout -> Left, TreeElementStyle -> {{} -> RGBColor[1, 1, 0.85], {
           Blank[]} -> RGBColor[1, 0.9, 0.8]}, ImageSize -> 250}]]}, 
    NamespaceBox[{
      {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.30151134457776263`, 0.}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.30151134457776285`, 
         0.12060453783110597`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.3015113445777631, 
         0.2412090756622119}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.3015113445777631, 
         0.3618136134933178}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.3015113445777635, 
         0.4824181513244237}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.30151134457776374`, 
         0.6030226891555297}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.30151134457776396`, 
         0.7236272269866355}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.3015113445777642, 
         0.8442317648177416}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.3015113445777644, 
         0.9648363026488475}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.3015113445777644, 
         1.0854408404799536`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 0.6030226891555298}, {0.30151134457776485`, 
         1.2060453783110594`}}]}}, 
      {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       TagBox[InsetBox[
         FrameBox["\<\"10 - 5 = 5 (left: 4 5 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0., 0.6030226891555298}],
        "DynamicName",
        BoxID -> "VertexID$1"], 
       TagBox[InsetBox[
         FrameBox["\<\"4 + 5 = 9 \\n(left: 6 9)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 0.9, 0.8]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.30151134457776263, 0.}],
        "DynamicName",
        BoxID -> "VertexID$2"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 + 6 = 11 \\n(left: 4 11)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 0.9, 0.8]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.30151134457776285, 0.12060453783110597}],
        "DynamicName",
        BoxID -> "VertexID$3"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 + 4 = 10 \\n(left: 5 10)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 0.9, 0.8]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.3015113445777631, 0.2412090756622119}],
        "DynamicName",
        BoxID -> "VertexID$4"], 
       TagBox[InsetBox[
         FrameBox["\<\"4 * 5 = 20 \\n(left: 6 20)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 0.9, 0.8]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.3015113445777631, 0.3618136134933178}],
        "DynamicName",
        BoxID -> "VertexID$5"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 * 6 = 30 \\n(left: 4 30)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 0.9, 0.8]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.3015113445777635, 0.4824181513244237}],
        "DynamicName",
        BoxID -> "VertexID$6"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 * 4 = 24 \\n(left: 5 24)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 0.9, 0.8]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.30151134457776374, 0.6030226891555297}],
        "DynamicName",
        BoxID -> "VertexID$7"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 - 4 = 2 \\n(left: 2 5)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 0.9, 0.8]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.30151134457776396, 0.7236272269866355}],
        "DynamicName",
        BoxID -> "VertexID$8"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 - 4 = 1 \\n(left: 1 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 0.9, 0.8]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.3015113445777642, 0.8442317648177416}],
        "DynamicName",
        BoxID -> "VertexID$9"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 / 4 = 1.5 \\n(left: 1.5 5)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 0.9, 0.8]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.3015113445777644, 0.9648363026488475}],
        "DynamicName",
        BoxID -> "VertexID$10"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 / 4 = 1.25 \\n(left: 1.25 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 0.9, 0.8]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.3015113445777644, 1.0854408404799536}],
        "DynamicName",
        BoxID -> "VertexID$11"], 
       TagBox[InsetBox[
         FrameBox["\<\"11 total\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->Directive[
            Directive[
             RGBColor[
             0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
             AbsoluteThickness[1], 
             Opacity[1]], FontFamily -> "Roboto"],
          FrameMargins->{{6, 6}, {1, 1}},
          FrameStyle->Directive[
            Dashing[{Tiny, Tiny}], 
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          RoundingRadius->10,
          StripOnInput->False], {0.30151134457776485, 1.2060453783110594}],
        "DynamicName",
        BoxID -> "VertexID$12"]}}]]],
  AlignmentPoint->Center,
  Axes->False,
  AxesLabel->None,
  AxesOrigin->Automatic,
  AxesStyle->{},
  Background->None,
  BaseStyle->{},
  BaselinePosition->Automatic,
  ContentSelectable->Automatic,
  DefaultBaseStyle->"TreeGraphics",
  Epilog->{},
  FormatType->StandardForm,
  Frame->False,
  FrameLabel->None,
  FrameStyle->{},
  FrameTicks->None,
  FrameTicksStyle->{},
  GridLines->None,
  GridLinesStyle->{},
  ImageMargins->0.,
  ImagePadding->All,
  ImageSize->250,
  LabelStyle->{},
  PlotLabel->None,
  PlotRange->All,
  PlotRangeClipping->False,
  PlotRangePadding->Automatic,
  PlotRegion->Automatic,
  Prolog->{},
  RotateLabel->True,
  Ticks->Automatic,
  TicksStyle->{}]], "Output",
 CellChangeTimes->{
  3.8981001500101748`*^9, {3.8981003818677597`*^9, 3.898100395311182*^9}, {
   3.89810045037294*^9, 3.898100463156425*^9}, {3.898100591842395*^9, 
   3.898100594632791*^9}, {3.898180521597815*^9, 3.898180528176255*^9}},
 CellLabel->
  "Out[1154]=",ExpressionUUID->"90204d12-e7e5-4a9a-87da-5ec05d397010"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generate and Evaluate Answers", "Section",
 CellChangeTimes->{{3.898123477683241*^9, 
  3.898123501493558*^9}},ExpressionUUID->"fa49728b-35a0-4432-90ed-\
9ce529732c65"],

Cell["\<\
In order to produce a solution to the task, we must write the final equation \
resulting from the steps we have followed so far. We know we have reached the \
final step when our previous operation results in only \
\[OpenCurlyDoubleQuote]24\[CloseCurlyDoubleQuote] remaining i.e. our output \
ends in \[OpenCurlyDoubleQuote](left: 24)\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.8981281114262123`*^9, 3.8981281628268538`*^9}, {
  3.898128295954257*^9, 
  3.8981283895009413`*^9}},ExpressionUUID->"360a9bb6-9849-49b6-8991-\
14af7314a6eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateAnswer", "=", 
   RowBox[{"LLMFunction", "[", 
    RowBox[{
    "\"\<Use numbers and basic arithmetic operations (+ - * /) to obtain 24. \
Each step, you are only allowed to choose two of the remaining numbers to \
obtain a new number.\nInput: 4 4 6 8\nSteps:\n4 + 8 = 12 (left: 4 6 12)\n6 - \
4 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (6 - 4) * (4 + 8) = 24\n\
Input: 2 9 10 12\nSteps:\n12 * 2 = 24 (left: 9 10 24)\n10 - 9 = 1 (left: 1 \
24)\n24 * 1 = 24 (left: 24)\nAnswer: (12 * 2) * (10 - 9) = 24\nInput: 4 9 10 \
13\nSteps:\n13 - 10 = 3 (left: 3 4 9)\n9 - 3 = 6 (left: 4 6)\n4 * 6 = 24 \
(left: 24)\nAnswer: 4 * (9 - (13 - 10)) = 24\nInput: 1 4 8 8\nSteps:\n8 / 4 = \
2 (left: 1 2 8)\n1 + 2 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (1 + 8 \
/ 4) * 8 = 24\nInput: 5 5 5 9\nSteps:\n5 + 5 = 10 (left: 5 9 10)\n10 + 5 = 15 \
(left: 9 15)\n15 + 9 = 24 (left: 24)\nAnswer: ((5 + 5) + 5) + 9 = 24\nInput: \
`input`\nSteps:\n`steps`\n\>\"", ",", 
     RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.898128392974806*^9, 3.898128395463303*^9}, {
  3.8981284686271973`*^9, 3.898128519538773*^9}, {3.898128563512885*^9, 
  3.898128588904209*^9}},
 CellLabel->
  "In[682]:=",ExpressionUUID->"674f4134-0169-4434-b00f-5f0f7214db01"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"taskInput", " ", "=", " ", "\"\<4 5 6 10\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "steps", " ", "=", " ", 
   "\"\<\n5 * 4 = 20 (left: 6 10 20)\n10 + 20 = 30 (left: 6 30)\n30 - 6 = 24 \
(left: 24)\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"answer", " ", "=", " ", 
  RowBox[{"generateAnswer", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<input\>\"", "->", " ", "taskInput"}], ",", 
     RowBox[{"\"\<steps\>\"", "->", "steps"}]}], "|>"}], "]"}]}]}], "Input",
 CellChangeTimes->{3.898128586163685*^9},
 CellLabel->
  "In[683]:=",ExpressionUUID->"7f1efc86-1a63-4b24-a9c2-5b0349cd2cba"],

Cell[BoxData["\<\"Answer: (5 * 4 + 10) - 6 = 24\"\>"], "Output",
 CellChangeTimes->{3.89812859930433*^9},
 CellLabel->
  "Out[685]=",ExpressionUUID->"f9a06eed-4cd9-49ee-ba6b-d73538e80ef4"]
}, Open  ]],

Cell["\<\
Finally, once we arrive at an answer to our problem, we want to make sure to \
evaluate it to ensure that it is indeed a valid answer.\
\>", "Text",
 CellChangeTimes->{{3.8981286186187067`*^9, 
  3.898128650577915*^9}},ExpressionUUID->"2d9ddbd3-432c-4a10-9e71-\
65987330ec5d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"evaluateAnswer", " ", "=", " ", 
   RowBox[{"LLMFunction", "[", 
    RowBox[{
    "\"\<Use numbers and basic arithmetic operations (+ - * /) to obtain 24. \
Given an input and an answer, give a judgement (sure/impossible) if the \
answer is correct, i.e. it uses each input exactly once and no other numbers, \
and reach 24.\nInput: 4 4 6 8\nAnswer: (4 + 8) * (6 - 4) = 24\nJudge: \nsure\n\
Input: 2 9 10 12\nAnswer: 2 * 12 * (10 - 9) = 24\nJudge: \nsure\nInput: 4 9 \
10 13\nAnswer: (13 - 9) * (10 - 4) = 24\nJudge: \nsure\nInput: 4 4 6 8\n\
Answer: (4 + 8) * (6 - 4) + 1 = 25\nJudge: \nimpossible\nInput: 2 9 10 12\n\
Answer: 2 * (12 - 10) = 24\nJudge: \nimpossible\nInput: 4 9 10 13\nAnswer: \
(13 - 4) * (10 - 9) = 24\nJudge: \nimpossible\nInput: `input`\nAnswer: \
`answer`\nJudge:\>\"", ",", 
     RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8981287003429537`*^9, 3.89812870945634*^9}},
 CellLabel->
  "In[687]:=",ExpressionUUID->"8ffc00e0-ea1f-45cf-b7f0-e6bac2d7ff43"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evaluatedAnswer", " ", "=", " ", 
  RowBox[{"evaluateAnswer", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<input\>\"", "->", " ", "taskInput"}], ",", 
     RowBox[{"\"\<answer\>\"", "->", "answer"}]}], "|>"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8981287406716213`*^9, 3.898128771989225*^9}},
 CellLabel->
  "In[691]:=",ExpressionUUID->"f67930ed-64d8-4acb-97b0-a57cb4725591"],

Cell[BoxData["\<\"sure\"\>"], "Output",
 CellChangeTimes->{3.898128778377726*^9, 3.898128818015856*^9},
 CellLabel->
  "Out[691]=",ExpressionUUID->"b0d935fd-89cb-4892-9fcf-961d17fe4b98"]
}, Open  ]],

Cell["Now we\[CloseCurlyQuote]re ready to solve Game of 24!", "Text",
 CellChangeTimes->{{3.8981288354658127`*^9, 3.898128838309235*^9}, {
  3.898128876523676*^9, 
  3.898128899130471*^9}},ExpressionUUID->"17569676-ebe5-45ac-98bf-\
deb1fd462e4b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving Game of 24 with Tree of Thoughts", "Section",
 CellChangeTimes->{{3.8947123885829763`*^9, 3.894712409956229*^9}, {
   3.897944788934597*^9, 3.8979448046128883`*^9}, 3.898100829695857*^9, {
   3.898128901487609*^9, 
   3.898128901747772*^9}},ExpressionUUID->"46de83a8-d0ed-4fc4-a6f2-\
bafff4bab37a"],

Cell["\<\
Our solveTask function runs iteratively for four steps generating proposals, \
evaluating them, taking the best \
\>", "Text",
 CellChangeTimes->{{3.8981806242139263`*^9, 
  3.898180712728303*^9}},ExpressionUUID->"a6ad3f51-e6df-4a59-8dbe-\
94e017a25e15"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"getProposals", " ", "[", 
     RowBox[{"steps_String", ",", "taskInput_String"}], "]"}], " ", ":="}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"solveTask", "[", "taskInput_", "]"}], " ", ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"nSteps", "=", "4"}], ",", 
        RowBox[{"nSelect", "=", "5"}], ",", " ", "proposals", ",", 
        "newProposals", ",", " ", "values", ",", " ", "ids", ",", " ", 
        "sortedIDs", ",", " ", "selectIDs"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"proposals", " ", "=", " ", 
        RowBox[{"{", "\"\<\>\"", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"newProposals", " ", "=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"getProposals", "[", 
               RowBox[{"#", ",", "taskInput"}], "]"}], " ", "&"}], "/@", 
             "proposals"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"values", " ", "=", " ", 
           RowBox[{"getValues", "[", 
            RowBox[{"newProposals", ",", " ", "taskInput"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ids", "=", 
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "newProposals", "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"sortedIDs", "=", 
           RowBox[{"Reverse", "@", 
            RowBox[{"SortBy", "[", 
             RowBox[{"ids", ",", 
              RowBox[{
               RowBox[{"values", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "&"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"selectIDs", "=", 
           RowBox[{"Take", "[", 
            RowBox[{"sortedIDs", ",", 
             RowBox[{"Min", "[", 
              RowBox[{"nSelect", ",", 
               RowBox[{"Length", "[", "sortedIDs", "]"}]}], "]"}]}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"proposals", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"newProposals", "[", 
              RowBox[{"[", "#", "]"}], "]"}], "&"}], "/@", "selectIDs"}]}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"i", ",", "nSteps"}], "}"}]}], "\[IndentingNewLine]", "]"}],
        ";", "\[IndentingNewLine]", "proposals"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.8976843038197107`*^9, 3.897684310888968*^9}, {
   3.897684618144188*^9, 3.897684632327125*^9}, {3.897684690963068*^9, 
   3.89768470508292*^9}, {3.897684760910734*^9, 3.897684778471839*^9}, {
   3.897684842813303*^9, 3.897684852513631*^9}, {3.89768488399151*^9, 
   3.897684925555195*^9}, 3.897685023219624*^9, {3.897686089061378*^9, 
   3.8976860906077013`*^9}, {3.897686155442004*^9, 3.897686224590516*^9}, 
   3.8976876653434896`*^9, {3.897687727930625*^9, 3.897687733473237*^9}, {
   3.897687804931552*^9, 3.897687913135724*^9}, {3.8976880150855103`*^9, 
   3.897688026918168*^9}, {3.897688078387562*^9, 3.8976880896696997`*^9}, {
   3.897688272223755*^9, 3.897688324341405*^9}, {3.897688389805086*^9, 
   3.897688398419073*^9}, {3.897688458826453*^9, 3.897688484387342*^9}, {
   3.897688521877083*^9, 3.897688535638527*^9}, {3.897688618905264*^9, 
   3.897688621155604*^9}, {3.897741270075161*^9, 3.897741279828492*^9}, {
   3.897741369105941*^9, 3.897741371159121*^9}, {3.8977460212507467`*^9, 
   3.897746026401082*^9}, {3.897746103186193*^9, 3.897746218811365*^9}, {
   3.897746252233388*^9, 3.897746259785166*^9}, 3.897749439493599*^9, {
   3.897749469814644*^9, 3.8977494701311703`*^9}, {3.8977496463918467`*^9, 
   3.8977496729875183`*^9}, {3.897750118275734*^9, 3.897750122671773*^9}, {
   3.897750200143915*^9, 3.897750230264494*^9}, {3.8977518779968023`*^9, 
   3.8977518783781548`*^9}, {3.897751941926753*^9, 3.897751948086582*^9}, {
   3.897751997597323*^9, 3.8977520196151543`*^9}, {3.897752151845817*^9, 
   3.897752153418857*^9}, {3.897760015274755*^9, 3.897760037216022*^9}, {
   3.897760079048362*^9, 3.897760137712574*^9}, {3.897760230256091*^9, 
   3.897760231964123*^9}, {3.897760273955907*^9, 3.8977603008453493`*^9}, {
   3.897760368572939*^9, 3.897760383976488*^9}, 3.897760448011044*^9, {
   3.897760662890183*^9, 3.897760709823555*^9}, {3.897760751989765*^9, 
   3.897760769694849*^9}, {3.897761222737359*^9, 3.897761364642969*^9}, {
   3.897762366416437*^9, 3.897762400214768*^9}, {3.897762953844205*^9, 
   3.8977629540707893`*^9}, {3.897762997079357*^9, 3.897763049248925*^9}, 
   3.8977631003133183`*^9, {3.897764025603516*^9, 3.897764093023775*^9}, {
   3.8977642080134563`*^9, 3.897764244200636*^9}, {3.897765333879837*^9, 
   3.89776533491356*^9}, {3.897765418174872*^9, 3.897765421266088*^9}, {
   3.897765655083522*^9, 3.8977656565979433`*^9}, {3.8977660334754057`*^9, 
   3.897766036375823*^9}, {3.8977675762158546`*^9, 3.8977675882383137`*^9}, {
   3.8977677691382732`*^9, 3.897767769385511*^9}, {3.897767888203657*^9, 
   3.8977679412486353`*^9}, {3.897768030820702*^9, 3.8977680646255836`*^9}, {
   3.897768329703384*^9, 3.89776833025638*^9}, {3.8977707667948437`*^9, 
   3.897770770601048*^9}, {3.898123217481401*^9, 3.898123234947344*^9}},
 CellLabel->
  "In[673]:=",ExpressionUUID->"6d81ddf6-0cdb-419a-8ce0-024a61196f1e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"results", " ", "=", " ", 
  RowBox[{"solveTask", "[", "\"\<4 5 6 10\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.897746013550284*^9, 3.8977460193889513`*^9}, {
  3.897749675960726*^9, 3.897749676816559*^9}, {3.897917582185945*^9, 
  3.8979175842949877`*^9}, {3.898119906189784*^9, 3.898119909374007*^9}, {
  3.898120860810006*^9, 3.898120863104748*^9}, {3.89812122914926*^9, 
  3.8981212304824963`*^9}, {3.898123243094441*^9, 3.898123246621586*^9}, {
  3.8981704023757563`*^9, 3.898170407475724*^9}, {3.8981801718777723`*^9, 
  3.8981801732969227`*^9}},ExpressionUUID->"a61e1207-7ded-4551-9fba-\
b523c3e19225"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"\\n10 / 5 = 2 (left: 2 4 6)\\n4 - 2 = 2 (left: 2 6)\\n2 * 6 = \
12 (left: 12)\\n2 * 12 = 24 (left: 8 8 24)\"\>", 
   ",", "\<\"\\n10 - 4 = 6 (left: 5 6 6)\\n5 * 6 = 30 (left: 6 30)\\n30 - 6 = \
24 (left: 24)\\nAnswer: (5 * (10 - 4)) - 6 = 24\"\>", 
   ",", "\<\"\\n10 / 5 = 2 (left: 2 4 6)\\n4 - 2 = 2 (left: 2 6)\\n6 - 2 = 4 \
(left: 4)\\n14 - 4 = 10 (left: 8 10 10)\"\>", 
   ",", "\<\"\\n10 / 5 = 2 (left: 2 4 6)\\n4 - 2 = 2 (left: 2 6)\\n6 / 2 = 3 \
(left: 3)\\n3 - 2 = 1 (left: 1 8 8 14)\"\>", 
   ",", "\<\"\\n10 / 5 = 2 (left: 2 4 6)\\n4 - 2 = 2 (left: 2 6)\\n6 / 2 = 3 \
(left: 3)\\n14 / 3 = 4.67 (approximately) (left: 2 4.67 8 8)\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.898123311673059*^9, 3.898124401949554*^9, 
  3.898171515275918*^9},
 CellLabel->
  "Out[692]=",ExpressionUUID->"aab2f1b4-4bdb-48dc-865b-8892b65818a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tree", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"StringTemplate", "[", "\"\<input: `input`\>\"", "]"}], "[", 
    RowBox[{"<|", 
     RowBox[{"\"\<input\>\"", "->", "taskInput"}], "|>"}], "]"}], ",", 
   "treeData1", ",", 
   RowBox[{"TreeLayout", "->", "Left"}], ",", 
   RowBox[{"TreeElementStyle", " ", "->", " ", "treeStyle"}], ",", 
   RowBox[{"ImageSize", "->", "600"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.898171582490396*^9, 3.898171611178275*^9}, {
   3.898171787142499*^9, 3.8981718194531593`*^9}, {3.8981736633249893`*^9, 
   3.898173664794487*^9}, {3.8981759043904047`*^9, 3.898175913279746*^9}, 
   3.8981775815292177`*^9, {3.898178319929514*^9, 3.898178354081575*^9}, {
   3.898178600025473*^9, 3.898178604096506*^9}, {3.8981787421453114`*^9, 
   3.8981787427296*^9}},
 CellLabel->
  "In[1132]:=",ExpressionUUID->"f02872d9-4d33-4cfb-b58b-e5a6a69f24fb"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["Trees",
   DynamicModuleBox[{Typeset`tree = HoldComplete[
     Tree["input: 4 5 6 10", {
       Tree["10 / 5 = 2 \n(left: 2 4 6)", None], 
       Tree["10 - 4 = 6 \n(left: 5 6 6)", {
         Tree["6 / 5 = 1.2 \n(left: 1.2 6)", None], 
         Tree["6 + 6 = 12 \n(left: 5 12)", None], 
         Tree["5 * 6 = 30 \n(left: 6 30)", {
           Tree["6 + 30 = 36 \n(left: 36)", None], 
           Tree["30 * 6 = 180 \n(left: 180)", None], 
           Tree["30 - 6 = 24 \n(left: 24)", {
             Tree["(5 * (10 - 4)) - 6 = 24", None]}, {
            TreeElementStyle -> {{1} -> RGBColor[0.88, 1, 0.88]}}], 
           Tree["30 / 6 = 5 \n(left: 5)", None]}], 
         Tree["5 + 6 = 11 \n(left: 6 11)", None], 
         Tree["6 - 5 = 1 \n(left: 1 6)", None]}], 
       Tree["10 / 5 = 2 \n(left: 2 4 6)", None], 
       Tree["10 / 5 = 2 \n(left: 2 4 6)", None], 
       Tree["10 / 5 = 2 \n(left: 2 4 6)", None]}, {
      TreeLayout -> Left, 
       TreeElementStyle -> {{1} -> RGBColor[1, 1, 0.85], {3} -> 
         RGBColor[1, 1, 0.85], {4} -> RGBColor[1, 1, 0.85], {5} -> 
         RGBColor[1, 1, 0.85], {
           Blank[], 1} -> RGBColor[1, 1, 0.85], {
           Blank[], 2} -> RGBColor[1, 1, 0.85], {
           Blank[], 4} -> RGBColor[1, 1, 0.85], {
           Blank[], 5} -> RGBColor[1, 1, 0.85], {
           BlankSequence[], 1} -> RGBColor[1, 1, 0.85], {
           BlankSequence[], 2} -> RGBColor[1, 1, 0.85], {
           BlankSequence[], 4} -> RGBColor[1, 1, 0.85]}, ImageSize -> 600}]]}, 
    NamespaceBox[{
      {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.8114485329521903`}, {0.6123724356957938, 
         0.6038161776507304}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.8114485329521903`}, {0.6123724356957942, 
         1.2076323553014603`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.8114485329521903`}, {0.6123724356957945, 
         1.8114485329521899`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.8114485329521903`}, {0.6123724356957951, 
         2.4152647106029197`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0., 1.8114485329521903`}, {0.6123724356957956, 
         3.0190808882536495`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.6123724356957942, 1.2076323553014603`}, {
         1.2247448713915876`, 0.}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.6123724356957942, 1.2076323553014603`}, {
         1.224744871391588, 0.6038161776507301}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.6123724356957942, 1.2076323553014603`}, {
         1.224744871391589, 1.2076323553014598`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.6123724356957942, 1.2076323553014603`}, {
         1.2247448713915894`, 1.8114485329521894`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{0.6123724356957942, 1.2076323553014603`}, {
         1.2247448713915894`, 2.4152647106029193`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{1.224744871391589, 1.2076323553014598`}, {
         1.8371173070873827`, 0.30190808882536474`}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{1.224744871391589, 1.2076323553014598`}, {
         1.8371173070873827`, 0.9057242664760945}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{1.224744871391589, 1.2076323553014598`}, {
         1.8371173070873832`, 1.509540444126824}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{1.224744871391589, 1.2076323553014598`}, {1.837117307087384,
          2.113356621777554}}]}, 
       {RGBColor[0.6, 0.5882352941176471, 0.5529411764705883], 
        AbsoluteThickness[1], 
        LineBox[{{1.8371173070873832`, 1.509540444126824}, {2.449489742783178,
          1.5095404441268239`}}]}}, 
      {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
       TagBox[InsetBox[
         FrameBox["\<\"input: 4 5 6 10\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0., 1.8114485329521903}],
        "DynamicName",
        BoxID -> "VertexID$1"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 / 5 = 2 \\n(left: 2 4 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.6123724356957938, 0.6038161776507304}],
        "DynamicName",
        BoxID -> "VertexID$2"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 - 4 = 6 \\n(left: 5 6 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {0.6123724356957942, 1.2076323553014603}],
        "DynamicName",
        BoxID -> "VertexID$3"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 / 5 = 1.2 \\n(left: 1.2 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.2247448713915876, 0.}],
        "DynamicName",
        BoxID -> "VertexID$4"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 + 6 = 12 \\n(left: 5 12)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.224744871391588, 0.6038161776507301}],
        "DynamicName",
        BoxID -> "VertexID$5"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 * 6 = 30 \\n(left: 6 30)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {1.224744871391589, 1.2076323553014598}],
        "DynamicName",
        BoxID -> "VertexID$6"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 + 30 = 36 \\n(left: 36)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.8371173070873827, 0.30190808882536474}],
        "DynamicName",
        BoxID -> "VertexID$7"], 
       TagBox[InsetBox[
         FrameBox["\<\"30 * 6 = 180 \\n(left: 180)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.8371173070873827, 0.9057242664760945}],
        "DynamicName",
        BoxID -> "VertexID$8"], 
       TagBox[InsetBox[
         FrameBox["\<\"30 - 6 = 24 \\n(left: 24)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->4,
          StripOnInput->False], {1.8371173070873832, 1.509540444126824}],
        "DynamicName",
        BoxID -> "VertexID$9"], 
       TagBox[InsetBox[
         FrameBox["\<\"(5 * (10 - 4)) - 6 = 24\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[0.88, 1, 0.88]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {2.449489742783178, 1.5095404441268239}],
        "DynamicName",
        BoxID -> "VertexID$10"], 
       TagBox[InsetBox[
         FrameBox["\<\"30 / 6 = 5 \\n(left: 5)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.837117307087384, 2.113356621777554}],
        "DynamicName",
        BoxID -> "VertexID$11"], 
       TagBox[InsetBox[
         FrameBox["\<\"5 + 6 = 11 \\n(left: 6 11)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.2247448713915894, 1.8114485329521894}],
        "DynamicName",
        BoxID -> "VertexID$12"], 
       TagBox[InsetBox[
         FrameBox["\<\"6 - 5 = 1 \\n(left: 1 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {1.2247448713915894, 2.4152647106029193}],
        "DynamicName",
        BoxID -> "VertexID$13"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 / 5 = 2 \\n(left: 2 4 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.6123724356957945, 1.8114485329521899}],
        "DynamicName",
        BoxID -> "VertexID$14"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 / 5 = 2 \\n(left: 2 4 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.6123724356957951, 2.4152647106029197}],
        "DynamicName",
        BoxID -> "VertexID$15"], 
       TagBox[InsetBox[
         FrameBox["\<\"10 / 5 = 2 \\n(left: 2 4 6)\"\>",
          Background->Directive[
            RGBColor[
            0.9607843137254902, 0.9882352941176471, 0.9764705882352941], 
            RGBColor[1, 1, 0.85]],
          BaseStyle->GrayLevel[0],
          FrameMargins->{{2, 2}, {1, 1}},
          FrameStyle->Directive[
            RGBColor[
            0.4196078431372549, 0.6313725490196078, 0.4196078431372549], 
            AbsoluteThickness[1], 
            Opacity[1]],
          ImageSize->Automatic,
          RoundingRadius->0,
          StripOnInput->False], {0.6123724356957956, 3.0190808882536495}],
        "DynamicName",
        BoxID -> "VertexID$16"]}}]]],
  AlignmentPoint->Center,
  Axes->False,
  AxesLabel->None,
  AxesOrigin->Automatic,
  AxesStyle->{},
  Background->None,
  BaseStyle->{},
  BaselinePosition->Automatic,
  ContentSelectable->Automatic,
  DefaultBaseStyle->"TreeGraphics",
  Epilog->{},
  FormatType->StandardForm,
  Frame->False,
  FrameLabel->None,
  FrameStyle->{},
  FrameTicks->None,
  FrameTicksStyle->{},
  GridLines->None,
  GridLinesStyle->{},
  ImageMargins->0.,
  ImagePadding->All,
  ImageSize->600,
  LabelStyle->{},
  PlotLabel->None,
  PlotRange->All,
  PlotRangeClipping->False,
  PlotRangePadding->Automatic,
  PlotRegion->Automatic,
  Prolog->{},
  RotateLabel->True,
  Ticks->Automatic,
  TicksStyle->{}]], "Output",
 CellChangeTimes->{
  3.8981716119090157`*^9, 3.898171789060917*^9, 3.898171820861268*^9, 
   3.8981736706419563`*^9, {3.898173782473433*^9, 3.898173804760392*^9}, 
   3.898173847462227*^9, 3.89817399095185*^9, 3.8981740448147306`*^9, 
   3.898174082196991*^9, {3.898175448965026*^9, 3.8981755024972343`*^9}, 
   3.89817555054172*^9, 3.898175788287704*^9, 3.898175831609188*^9, {
   3.8981758962713013`*^9, 3.898175913990995*^9}, {3.898176150386044*^9, 
   3.8981761676119957`*^9}, 3.898176200997448*^9, 3.898176254596377*^9, 
   3.898177370620932*^9, 3.898177582159176*^9, 3.89817785415998*^9, 
   3.8981778981637993`*^9, 3.898178054356675*^9, 3.8981781321202517`*^9, 
   3.898178188848888*^9, {3.898178314149041*^9, 3.8981783547983627`*^9}, 
   3.898178501473117*^9, 3.898178535169676*^9, 3.8981786466746264`*^9, {
   3.898178713543693*^9, 3.8981787537454453`*^9}, {3.8981787897420483`*^9, 
   3.8981788190011377`*^9}, 3.898178867324622*^9, {3.898178899202825*^9, 
   3.898178914822608*^9}, {3.898178950488267*^9, 3.898178971731389*^9}, {
   3.898179030221449*^9, 3.8981790792807837`*^9}, {3.898179140553595*^9, 
   3.898179270097734*^9}, 3.898179372987987*^9},
 CellLabel->
  "Out[1132]=",ExpressionUUID->"a0cc148a-75e3-47fc-ae9c-39ba33f7c0a1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extending to Other Problems", "Section",
 CellChangeTimes->{{3.8946203108413057`*^9, 3.894620330260145*^9}, {
  3.897920209191691*^9, 3.89792021518717*^9}, {3.898128254334857*^9, 
  3.898128259906024*^9}},ExpressionUUID->"3df9e38c-c880-4cd6-bfdd-\
0629bb0ada92"],

Cell["\<\
How can we extend the tree of thoughts methodology to other types of problems \
with less well defined solutions and thought spaces? We can look at using \
language models to solve coding challenges such as those presented in An \
Elementary Introduction to the Wolfram Language (4). 

Below are a few selected exercises from the book.\
\>", "Text",
 CellChangeTimes->{{3.897920227262916*^9, 3.8979202540274773`*^9}, {
  3.897921613630382*^9, 3.897921616089073*^9}, {3.8981805994568033`*^9, 
  3.8981806003626547`*^9}, {3.898180895711121*^9, 3.898180898252282*^9}, {
  3.898180935956155*^9, 3.898180952708329*^9}, {3.898181001172833*^9, 
  3.898181053266492*^9}},ExpressionUUID->"b18b39be-92c0-47e7-b254-\
2dabe980c905"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "exercise1", " ", "=", " ", 
   "\"\<Make a combined list of the first 5 squares and cubes (numbers raised \
to the power 3), sorted into order.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "exercise2", " ", "=", " ", 
   "\"\<Find the second-to-last digit of 2^32.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "exercise3", " ", "=", " ", 
   "\"\<Make a graph with 50 nodes, in which node i connects to node \
i+1.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "exercise4", " ", "=", " ", 
   "\"\<Make a line plot of the numerical phase of the moon for each of the \
next 30 days.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "exercise5", " ", "=", " ", 
   "\"\<In the digit lists for the first 1000 squares, find those that begin \
with 9 and end with 0 or 1.\>\""}], ";"}]}], "Input",
 CellChangeTimes->{{3.897923964020966*^9, 3.8979240510740128`*^9}, {
   3.897996501297477*^9, 3.897996502483651*^9}, {3.897996560865672*^9, 
   3.897996566565255*^9}, {3.897996635931363*^9, 3.897996638980068*^9}, {
   3.897997340426928*^9, 3.897997350483665*^9}, {3.897997405556315*^9, 
   3.897997409341189*^9}, {3.898004225522018*^9, 3.898004230561695*^9}, {
   3.8980042783432903`*^9, 3.8980042918602743`*^9}, {3.898004353253541*^9, 
   3.8980044124116573`*^9}, 3.898004443457323*^9, {3.898005247961893*^9, 
   3.8980052550220747`*^9}, 3.8980053207004538`*^9, {3.898005745372463*^9, 
   3.898005775786207*^9}, {3.898005813677647*^9, 3.898005815132609*^9}, {
   3.898005846885694*^9, 3.898005850949874*^9}, {3.898005952234393*^9, 
   3.898005957723152*^9}, {3.8980062199665003`*^9, 3.8980063109680634`*^9}, {
   3.8980063541370564`*^9, 3.898006371716193*^9}, {3.898006417412902*^9, 
   3.898006603032065*^9}, {3.898006665959569*^9, 3.898006679213697*^9}, {
   3.898007459153199*^9, 3.8980075048782043`*^9}, {3.898007563280622*^9, 
   3.898007574911483*^9}, {3.8980077547087593`*^9, 3.898007817721479*^9}, {
   3.8980079420517273`*^9, 3.8980079596179457`*^9}, {3.898008004411182*^9, 
   3.8980080278772917`*^9}, {3.8980082339373007`*^9, 3.898008285821925*^9}, {
   3.898008371448017*^9, 3.898008375031755*^9}, {3.898008520515832*^9, 
   3.898008589902328*^9}, {3.898008709100143*^9, 3.898008714923852*^9}, {
   3.898008909241468*^9, 3.8980089971090527`*^9}, {3.898009171997808*^9, 
   3.8980092028862963`*^9}, {3.898009271548568*^9, 3.898009413031266*^9}, {
   3.89800948140593*^9, 3.898009496302651*^9}, {3.89800953833856*^9, 
   3.898009618716962*^9}, {3.8980096671217613`*^9, 3.898009671641968*^9}, {
   3.8980097040595627`*^9, 3.89800971016008*^9}, {3.8980097420838842`*^9, 
   3.8980097742475433`*^9}, {3.898009848357615*^9, 3.8980098995912857`*^9}, {
   3.8980099448933*^9, 3.8980099459963818`*^9}, {3.8980100296530533`*^9, 
   3.898010062336186*^9}, {3.898010094076388*^9, 3.89801029314275*^9}, {
   3.8980103329457417`*^9, 3.8980104179534273`*^9}, {3.898010490229669*^9, 
   3.898010500998513*^9}, {3.898011464664083*^9, 3.8980115652195807`*^9}, {
   3.8980116173302526`*^9, 3.898011812477846*^9}, {3.898011845788451*^9, 
   3.8980118497624693`*^9}, {3.898011882370985*^9, 3.898011882724444*^9}, {
   3.8980119305586367`*^9, 3.8980119668396606`*^9}, {3.898012013398677*^9, 
   3.898012059620626*^9}, {3.898012100383863*^9, 3.898012140096208*^9}, {
   3.8980121802296257`*^9, 3.89801218503432*^9}, {3.89801221856602*^9, 
   3.898012239363776*^9}, {3.898012274836359*^9, 3.898012315752548*^9}, {
   3.898012355537528*^9, 3.898012374561964*^9}, {3.8981110021215754`*^9, 
   3.898111002837775*^9}, 3.8981282232582397`*^9, {3.8981712952732887`*^9, 
   3.8981713308103333`*^9}, {3.8981805500766907`*^9, 3.898180552191012*^9}, {
   3.898180886105091*^9, 3.898180887554678*^9}, {3.898181032563292*^9, 
   3.898181042836294*^9}, {3.898181331235551*^9, 3.898181351108109*^9}},
 CellLabel->
  "In[1160]:=",ExpressionUUID->"26031e5a-df31-4008-b40d-bce70837dee1"],

Cell["\<\
Unlike the case of Game of 24, there is no obvious way to break down any \
given coding problem into a series of steps that we can use for Tree of \
Thoughts. One approach is to ask GPT-4 to help us break down a problem.\
\>", "Text",
 CellChangeTimes->{{3.8981810561507874`*^9, 3.898181061693321*^9}, {
  3.898181122587873*^9, 
  3.898181253924346*^9}},ExpressionUUID->"941b4dd5-17c8-412c-a4fe-\
899c9a4fd4ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getSteps", " ", "=", " ", 
   RowBox[{"evaluateProposal", "=", 
    RowBox[{"LLMFunction", "[", 
     RowBox[{
     "\"\<Here is a programming task in Wolfram language:\n`input`\nHow would \
you break this problem down into a step by step procedure you could use to \
arrive at an answer?\>\"", ",", 
      RowBox[{"LLMEvaluator", "->", "llmParams"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.898181257428773*^9, 3.898181323818694*^9}},
 CellLabel->
  "In[1166]:=",ExpressionUUID->"488f5472-28a1-427a-9f7c-77d4c0a64726"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"steps1", " ", "=", " ", 
  RowBox[{"getSteps", "[", 
   RowBox[{"<|", 
    RowBox[{"\"\<input\>\"", "->", " ", "exercise1"}], "|>"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.898181327946566*^9, 3.898181328557624*^9}, {
  3.8981813612188168`*^9, 3.898181396683956*^9}},
 CellLabel->
  "In[1167]:=",ExpressionUUID->"e82fb32f-c5f3-406c-9325-d8accabfddf3"],

Cell[BoxData["\<\"Step 1: Generate a list of the first 5 natural \
numbers.\\n\\nWolfram language has a built-in function `Range[]` that can \
help us generate a list of the first 5 natural numbers. `Range[5]` will give \
us `{1, 2, 3, 4, 5}`.\\n\\nStep 2: Square each of the numbers in the list.\\n\
\\nIn Wolfram language, you can use `Map[]` or `/@` to apply a function to \
each element in the list. `#^2& /@ Range[5]` will give us a list of the \
squares of the first 5 natural numbers.\\n\\nStep 3: Cube each of the numbers \
in the list.\\n\\nSimilarly, `#^3& /@ Range[5]` will give us a list of the \
cubes of the first 5 natural numbers.\\n\\nStep 4: Combine the list of \
squares and cubes.\\n\\nYou can use `Join[]` to combine the two lists. \
`Join[#^2& /@ Range[5], #^3& /@ Range[5]]` will give us a combined list of \
the first 5 squares and cubes.\\n\\nStep 5: Sort the combined list into \
order.\\n\\nFinally, you can use `Sort[]` to sort the combined list into \
ascending order. `Sort[Join[#^2& /@ Range[5], #^3& /@ Range[5]]]` will give \
us the sorted combined list.\\n\\nPutting it all together, the Wolfram \
language code to solve the problem is:\\n\\n`Sort[Join[#^2& /@ Range[5], #^3& \
/@ Range[5]]]`\"\>"], "Output",
 CellChangeTimes->{3.8981814018453074`*^9, 3.8981814354217176`*^9},
 CellLabel->
  "Out[1167]=",ExpressionUUID->"d1b133d5-8965-4553-9d42-1d0421c7bf0e"]
}, Open  ]],

Cell["\<\
In this case, GPT-4 is not only able to reproduce some reasonable steps but \
also generates a valid answer for the problem. These steps can be used to \
generate a prompt that can help us solve more challenging problems. 

In order to make our chain of thought prompt for proposals we use the above \
prompt to generate steps for a number of problems. We sample a subset of the \
steps produced and suggest the model to provide a possible next step.\
\>", "Text",
 CellChangeTimes->{{3.89818147173709*^9, 3.898181574308528*^9}, {
  3.898181608825116*^9, 
  3.89818165819447*^9}},ExpressionUUID->"532425c3-6ce0-4b97-baa3-\
841321a92b47"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "proposalPrompt", " ", "=", " ", 
   "\"\<Given a task and a list of steps generate the likely next step that \
gets closer to achieving the task.\nTask: Make a combined list of the first 5 \
squares and cubes (numbers raised to the power 3), sorted into order.\nSteps:\
\n1. Generate a list of the first five natural numbers. In Wolfram Language, \
you can do this with the Range[] function, as Range[5].\n2. Square each \
number in the list. This can be done by applying the power operator ^ to the \
list, as Range[5]^2. Wolfram Language will automatically apply the operation \
to each element of the list.\n3. Cube each number in the list. This is done \
in the same way as the squaring operation, but with 3 as the exponent, as \
Range[5]^3.\nPossible next step:\n4. Join the list of squares and the list of \
cubes into a single list. The Join[] function can be used for this, as \
Join[Range[5]^2, Range[5]^3].\nTask: Make a line plot of the numerical phase \
of the moon for each of the next 30 days.\nSteps:\n1. Generate a list of the \
next 30 days. In Wolfram Language, you can use the Today function to get \
today's date, and you can add n days to this date with Today + n Quantity[1, \
\\\"Days\\\"]. If you use the Table[] function to do this for n from 0 to 29, \
you get a list of the dates of the next 30 days.\nPossible next step:\n2. For \
each date in this list, calculate the numerical phase of the moon. The \
MoonPhase[] function in Wolfram Language does exactly this. So \
Table[MoonPhase[Today + n Quantity[1, \\\"Days\\\"]], {n, 30}] generates a \
list of the moon phases for the next 30 days\nTask: In the digit lists for \
the first 1000 squares, find those that begin with 9 and end with 0 or 1.\n\
Steps:\n1. Generate a list of the squares of the first 1000 natural numbers. \
This can be done using the Range[] function and the power operator ^, as \
Range[1000]^2.\n2. Convert each number in this list to a list of its digits. \
The IntegerDigits[] function can be used for this, so \
IntegerDigits[Range[1000]^2] gives a list of lists, where each inner list is \
the digit list of a square.\nPossible next step:\n3. Search this list of \
lists for lists that begin with 9 and end with either 0 or 1. The Cases[] \
function in Wolfram Language can be used for this. The pattern {9, __, 0 | 1} \
matches any list that begins with 9 (9) and ends with either 0 or 1 (0 | 1), \
with any number of any digits in between (__). Therefore, \
Cases[IntegerDigits[Range[1000]^2], {9, __, 0 | 1}] returns all lists of \
digits that represent squares beginning with 9 and ending with 0 or 1.\n\
Input: `input`\nSteps: \n`steps`\nPossible next step:\n\>\""}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.897923964020966*^9, 3.8979240510740128`*^9}, {
   3.897996501297477*^9, 3.897996502483651*^9}, {3.897996560865672*^9, 
   3.897996566565255*^9}, {3.897996635931363*^9, 3.897996638980068*^9}, {
   3.897997340426928*^9, 3.897997350483665*^9}, {3.897997405556315*^9, 
   3.897997409341189*^9}, {3.898004225522018*^9, 3.898004230561695*^9}, {
   3.8980042783432903`*^9, 3.8980042918602743`*^9}, {3.898004353253541*^9, 
   3.8980044124116573`*^9}, 3.898004443457323*^9, {3.898005247961893*^9, 
   3.8980052550220747`*^9}, 3.8980053207004538`*^9, {3.898005745372463*^9, 
   3.898005775786207*^9}, {3.898005813677647*^9, 3.898005815132609*^9}, {
   3.898005846885694*^9, 3.898005850949874*^9}, {3.898005952234393*^9, 
   3.898005957723152*^9}, {3.8980062199665003`*^9, 3.8980063109680634`*^9}, {
   3.8980063541370564`*^9, 3.898006371716193*^9}, {3.898006417412902*^9, 
   3.898006603032065*^9}, {3.898006665959569*^9, 3.898006679213697*^9}, {
   3.898007459153199*^9, 3.8980075048782043`*^9}, {3.898007563280622*^9, 
   3.898007574911483*^9}, {3.8980077547087593`*^9, 3.898007817721479*^9}, {
   3.8980079420517273`*^9, 3.8980079596179457`*^9}, {3.898008004411182*^9, 
   3.8980080278772917`*^9}, {3.8980082339373007`*^9, 3.898008285821925*^9}, {
   3.898008371448017*^9, 3.898008375031755*^9}, {3.898008520515832*^9, 
   3.898008589902328*^9}, {3.898008709100143*^9, 3.898008714923852*^9}, {
   3.898008909241468*^9, 3.8980089971090527`*^9}, {3.898009171997808*^9, 
   3.8980092028862963`*^9}, {3.898009271548568*^9, 3.898009413031266*^9}, {
   3.89800948140593*^9, 3.898009496302651*^9}, {3.89800953833856*^9, 
   3.898009618716962*^9}, {3.8980096671217613`*^9, 3.898009671641968*^9}, {
   3.8980097040595627`*^9, 3.89800971016008*^9}, {3.8980097420838842`*^9, 
   3.8980097742475433`*^9}, {3.898009848357615*^9, 3.8980098995912857`*^9}, {
   3.8980099448933*^9, 3.8980099459963818`*^9}, {3.8980100296530533`*^9, 
   3.898010062336186*^9}, {3.898010094076388*^9, 3.89801029314275*^9}, {
   3.8980103329457417`*^9, 3.8980104179534273`*^9}, {3.898010490229669*^9, 
   3.898010500998513*^9}, {3.898011464664083*^9, 3.8980115652195807`*^9}, {
   3.8980116173302526`*^9, 3.898011812477846*^9}, {3.898011845788451*^9, 
   3.8980118497624693`*^9}, {3.898011882370985*^9, 3.898011882724444*^9}, {
   3.8980119305586367`*^9, 3.8980119668396606`*^9}, {3.898012013398677*^9, 
   3.898012059620626*^9}, {3.898012100383863*^9, 3.898012140096208*^9}, {
   3.8980121802296257`*^9, 3.89801218503432*^9}, {3.89801221856602*^9, 
   3.898012239363776*^9}, {3.898012274836359*^9, 3.898012315752548*^9}, {
   3.898012355537528*^9, 3.898012374561964*^9}, {3.8981110021215754`*^9, 
   3.898111002837775*^9}, 3.8981282232582397`*^9, {3.8981712952732887`*^9, 
   3.8981713308103333`*^9}, {3.8981805500766907`*^9, 3.898180552191012*^9}, {
   3.898180886105091*^9, 3.898180887554678*^9}, {3.898181032563292*^9, 
   3.898181042836294*^9}, 
   3.898181669677806*^9},ExpressionUUID->"d26b54dc-5456-48dc-9098-\
d6c3c033eb56"],

Cell["\<\
Similar to the case for Game of 24 we can ask the model to evaluate a \
proposal, in this case asking it whether a set of steps will accomplish \
(sure), is reasonable (likely) or cannot produce the desired result \
(impossible).\
\>", "Text",
 CellChangeTimes->{{3.8981816774672127`*^9, 
  3.8981817317646437`*^9}},ExpressionUUID->"ad2ee832-28d1-46e2-be00-\
8e2361799545"],

Cell[BoxData[
 RowBox[{"evaluateProposalPrompt", " ", "=", " ", 
  "\"\<Evaluate if following the procedure given in the steps will accomplish \
the given task (sure/likely/impossible)\nTask: Find the second-to-last digit \
of 2^32.\nSteps:\n1. Calculate the number 2^32. In Wolfram Language, this is \
done simply as 2^32.\n2. Convert the result into a list of digits. Wolfram \
Language provides the function IntegerDigits[] for this purpose.\n3. Reverse \
the order of the list of digits. This can be done with the Reverse[] \
function. Reversing the list of digits will allow us to directly address the \
second-to-last digit as the second element of the reversed list (since \
Wolfram Language uses 1-based indexing).\n4. Extract the second element from \
the reversed list of digits. This can be done with the Part[] function (which \
is often abbreviated as [[ ]]), using 2 as the index.\nsure\nTask: Make a \
combined list of the first 5 squares and cubes (numbers raised to the power \
3), sorted into order.\nSteps:\n1. Generate a list of the first five natural \
numbers. In Wolfram Language, you can do this with the Range[] function, as \
Range[5].\n2. Square each number in the list. This can be done by applying \
the power operator ^ to the list, as Range[5]^2. Wolfram Language will \
automatically apply the operation to each element of the list.\n3. Cube each \
number in the list. This is done in the same way as the squaring operation, \
but with 3 as the exponent, as Range[5]^3.\nI cannot accomplish the task now, \
but the steps are reasonable\nlikely\nTask: Make a graph with 50 nodes, in \
which node i connects to node i+1.\nSteps:\n1. Generate a list of numbers \
from 1 to 49. In Wolfram Language, you can do this using the Table[] function \
as Table[i, {i, 49}]. However, for this task, we are not just generating a \
list of numbers; we are generating a list of directed edges between nodes.\n\
2. For each number i in this list, create an edge from node i + 1 to node i. \
This can be done using the -> operator in Wolfram Language. So the command \
Table[i + 1 -> i, {i, 49}] generates a list of edges where each node i (for i \
from 1 to 49) is connected to node i + 1.\n3. Create a graph from this list \
of edges. Wolfram Language has a Graph[] function that can take a list of \
edges as input and generate a corresponding graph.\nimpossible\nTask: Make a \
line plot of the numerical phase of the moon for each of the next 30 days.\n\
Steps: \n1. Generate a list of the next 30 days. In Wolfram Language, you can \
use the Today function to get today's date, and you can add n days to this \
date with Today + n Quantity[1, \\\"Days\\\"]. If you use the Table[] \
function to do this for n from 0 to 29, you get a list of the dates of the \
next 30 days.\n2. For each date in this list, calculate the numerical phase \
of the moon. The MoonPhase[] function in Wolfram Language does exactly this. \
So Table[MoonPhase[Today + n + 1 Quantity[1, \\\"Days\\\"]], {n, 30}] \
generates a list of the moon phases for the next 30 days\n3. Create a line \
plot of this list of moon phases. You can use the ListLinePlot[] function for \
this. Therefore, ListLinePlot[Table[MoonPhase[Today + n + 1 Quantity[1, \
\\\"Days\\\"]], {n, 30}]] creates the desired plot.\nimpossible\nTask: In the \
digit lists for the first 1000 squares, find those that begin with 9 and end \
with 0 or 1.\nSteps:\n1. Generate a list of the squares of the first 1000 \
natural numbers. This can be done using the Range[] function and the power \
operator ^, as Range[1000]^2.\n2. Convert each number in this list to a list \
of its digits. The IntegerDigits[] function can be used for this, so \
IntegerDigits[Range[1000]^2] gives a list of lists, where each inner list is \
the digit list of a square.\n3. Search this list of lists for lists that \
begin with 9 and end with either 0 or 1. The Cases[] function in Wolfram \
Language can be used for this. The pattern {9, __, 0 | 1} matches any list \
that begins with 9 (9) and ends with either 0 or 1 (0 | 1), with any number \
of any digits in between (__). Therefore, Cases[IntegerDigits[Range[1000]^2], \
{9, __, 0 | 1}] returns all lists of digits that represent squares beginning \
with 9 and ending with 0 or 1.\nsure\nTask: `input`\nSteps:\n`steps`\n\
\>\""}]], "Input",
 CellChangeTimes->{{3.897923964020966*^9, 3.8979240510740128`*^9}, {
   3.897996501297477*^9, 3.897996502483651*^9}, {3.897996560865672*^9, 
   3.897996566565255*^9}, {3.897996635931363*^9, 3.897996638980068*^9}, {
   3.897997340426928*^9, 3.897997350483665*^9}, {3.897997405556315*^9, 
   3.897997409341189*^9}, {3.898004225522018*^9, 3.898004230561695*^9}, {
   3.8980042783432903`*^9, 3.8980042918602743`*^9}, {3.898004353253541*^9, 
   3.8980044124116573`*^9}, 3.898004443457323*^9, {3.898005247961893*^9, 
   3.8980052550220747`*^9}, 3.8980053207004538`*^9, {3.898005745372463*^9, 
   3.898005775786207*^9}, {3.898005813677647*^9, 3.898005815132609*^9}, {
   3.898005846885694*^9, 3.898005850949874*^9}, {3.898005952234393*^9, 
   3.898005957723152*^9}, {3.8980062199665003`*^9, 3.8980063109680634`*^9}, {
   3.8980063541370564`*^9, 3.898006371716193*^9}, {3.898006417412902*^9, 
   3.898006603032065*^9}, {3.898006665959569*^9, 3.898006679213697*^9}, {
   3.898007459153199*^9, 3.8980075048782043`*^9}, {3.898007563280622*^9, 
   3.898007574911483*^9}, {3.8980077547087593`*^9, 3.898007817721479*^9}, {
   3.8980079420517273`*^9, 3.8980079596179457`*^9}, {3.898008004411182*^9, 
   3.8980080278772917`*^9}, {3.8980082339373007`*^9, 3.898008285821925*^9}, {
   3.898008371448017*^9, 3.898008375031755*^9}, {3.898008520515832*^9, 
   3.898008589902328*^9}, {3.898008709100143*^9, 3.898008714923852*^9}, {
   3.898008909241468*^9, 3.8980089971090527`*^9}, {3.898009171997808*^9, 
   3.8980092028862963`*^9}, {3.898009271548568*^9, 3.898009413031266*^9}, {
   3.89800948140593*^9, 3.898009496302651*^9}, {3.89800953833856*^9, 
   3.898009618716962*^9}, {3.8980096671217613`*^9, 3.898009671641968*^9}, {
   3.8980097040595627`*^9, 3.89800971016008*^9}, {3.8980097420838842`*^9, 
   3.8980097742475433`*^9}, {3.898009848357615*^9, 3.8980098995912857`*^9}, {
   3.8980099448933*^9, 3.8980099459963818`*^9}, {3.8980100296530533`*^9, 
   3.898010062336186*^9}, {3.898010094076388*^9, 3.89801029314275*^9}, {
   3.8980103329457417`*^9, 3.8980104179534273`*^9}, {3.898010490229669*^9, 
   3.898010500998513*^9}, {3.898011464664083*^9, 3.8980115652195807`*^9}, {
   3.8980116173302526`*^9, 3.898011812477846*^9}, {3.898011845788451*^9, 
   3.8980118497624693`*^9}, {3.898011882370985*^9, 3.898011882724444*^9}, {
   3.8980119305586367`*^9, 3.8980119668396606`*^9}, {3.898012013398677*^9, 
   3.898012059620626*^9}, {3.898012100383863*^9, 3.898012140096208*^9}, {
   3.8980121802296257`*^9, 3.89801218503432*^9}, {3.89801221856602*^9, 
   3.898012239363776*^9}, {3.898012274836359*^9, 3.898012315752548*^9}, {
   3.898012355537528*^9, 3.898012374561964*^9}, {3.8981110021215754`*^9, 
   3.898111002837775*^9}, 3.8981282232582397`*^9, {3.8981712952732887`*^9, 
   3.8981713308103333`*^9}, {3.8981805500766907`*^9, 3.898180552191012*^9}, {
   3.898180886105091*^9, 3.898180887554678*^9}, {3.898181032563292*^9, 
   3.898181042836294*^9}, 3.898181669677806*^9, 
   3.898181742661229*^9},ExpressionUUID->"ae682326-ecd9-4c2c-924a-\
5b1698c01f88"],

Cell["\<\
In order to produce a solution to the coding challenge we ask the model to \
produce an answer for the problem given a series of steps.\
\>", "Text",
 CellChangeTimes->{{3.8981817459616413`*^9, 
  3.89818177264167*^9}},ExpressionUUID->"ea76f9a8-ea8b-455b-80e0-\
79652572e1d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "answerPrompt", " ", "=", 
   "\"\<Follow the steps given to write a single line of Wolfram language \
code that satisfies the given task.\nTask: Find the second-to-last digit of \
2^32.\nSteps:\n1. Calculate the number 2^32. In Wolfram Language, this is \
done simply as 2^32.\n2. Convert the result into a list of digits. Wolfram \
Language provides the function IntegerDigits[] for this purpose.\n3. Reverse \
the order of the list of digits. This can be done with the Reverse[] \
function. Reversing the list of digits will allow us to directly address the \
second-to-last digit as the second element of the reversed list (since \
Wolfram Language uses 1-based indexing).\n4. Extract the second element from \
the reversed list of digits. This can be done with the Part[] function (which \
is often abbreviated as [[ ]]), using 2 as the index.\nAnswer: (2^32 // \
IntegerDigits // Reverse)[[2]]\nTask: Make a combined list of the first 5 \
squares and cubes (numbers raised to the power 3), sorted into order.\nSteps:\
\n1. Generate a list of the first five natural numbers. In Wolfram Language, \
you can do this with the Range[] function, as Range[5].\n2. Square each \
number in the list. This can be done by applying the power operator ^ to the \
list, as Range[5]^2. Wolfram Language will automatically apply the operation \
to each element of the list.\n3. Cube each number in the list. This is done \
in the same way as the squaring operation, but with 3 as the exponent, as \
Range[5]^3.\n4. Join the list of squares and the list of cubes into a single \
list. The Join[] function can be used for this, as Join[Range[5]^2, \
Range[5]^3].\n5. Sort the combined list into order. This can be done with the \
Sort[] function, as Sort[Join[Range[5]^2, Range[5]^3]].\nAnswer: \
Sort[Join[Range[5]^2,Range[5]^3]]\nTask: Make a graph with 50 nodes, in which \
node i connects to node i+1.\nSteps:\n1. Generate a list of numbers from 1 to \
49. In Wolfram Language, you can do this using the Table[] function as \
Table[i, {i, 49}]. However, for this task, we are not just generating a list \
of numbers; we are generating a list of directed edges between nodes.\n2. For \
each number i in this list, create an edge from node i to node i + 1. This \
can be done using the -> operator in Wolfram Language. So the command Table[i \
-> i + 1, {i, 49}] generates a list of edges where each node i (for i from 1 \
to 49) is connected to node i + 1.\n3. Create a graph from this list of \
edges. Wolfram Language has a Graph[] function that can take a list of edges \
as input and generate a corresponding graph.\nAnswer: Graph[Table[i -> i + 1, \
{i, 49}]]\nTask: Make a line plot of the numerical phase of the moon for each \
of the next 30 days.\nSteps:\n1. Generate a list of the next 30 days. In \
Wolfram Language, you can use the Today function to get today's date, and you \
can add n days to this date with Today + n Quantity[1, \\\"Days\\\"]. If you \
use the Table[] function to do this for n from 0 to 29, you get a list of the \
dates of the next 30 days.\n2. For each date in this list, calculate the \
numerical phase of the moon. The MoonPhase[] function in Wolfram Language \
does exactly this. So Table[MoonPhase[Today + n Quantity[1, \\\"Days\\\"]], \
{n, 30}] generates a list of the moon phases for the next 30 days\n3. Create \
a line plot of this list of moon phases. You can use the ListLinePlot[] \
function for this. Therefore, ListLinePlot[Table[MoonPhase[Today + n \
Quantity[1, \\\"Days\\\"]], {n, 30}]] creates the desired plot.\nAnswer: \
ListLinePlot[Table[MoonPhase[Today + n Quantity[1,\\\"Days\\\"]],{n,30}]]\n\
Task: In the digit lists for the first 1000 squares, find those that begin \
with 9 and end with 0 or 1.\nSteps:\n1. Generate a list of the squares of the \
first 1000 natural numbers. This can be done using the Range[] function and \
the power operator ^, as Range[1000]^2.\n2. Convert each number in this list \
to a list of its digits. The IntegerDigits[] function can be used for this, \
so IntegerDigits[Range[1000]^2] gives a list of lists, where each inner list \
is the digit list of a square.\n3. Search this list of lists for lists that \
begin with 9 and end with either 0 or 1. The Cases[] function in Wolfram \
Language can be used for this. The pattern {9, __, 0 | 1} matches any list \
that begins with 9 (9) and ends with either 0 or 1 (0 | 1), with any number \
of any digits in between (__). Therefore, Cases[IntegerDigits[Range[1000]^2], \
{9, __, 0 | 1}] returns all lists of digits that represent squares beginning \
with 9 and ending with 0 or 1.\nAnswer: \
Cases[IntegerDigits[Range[1000]^2],{9,__,0 | 1}]\nTask: `input`\nSteps:\n\
`steps`\n\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.897923964020966*^9, 3.8979240510740128`*^9}, {
   3.897996501297477*^9, 3.897996502483651*^9}, {3.897996560865672*^9, 
   3.897996566565255*^9}, {3.897996635931363*^9, 3.897996638980068*^9}, {
   3.897997340426928*^9, 3.897997350483665*^9}, {3.897997405556315*^9, 
   3.897997409341189*^9}, {3.898004225522018*^9, 3.898004230561695*^9}, {
   3.8980042783432903`*^9, 3.8980042918602743`*^9}, {3.898004353253541*^9, 
   3.8980044124116573`*^9}, 3.898004443457323*^9, {3.898005247961893*^9, 
   3.8980052550220747`*^9}, 3.8980053207004538`*^9, {3.898005745372463*^9, 
   3.898005775786207*^9}, {3.898005813677647*^9, 3.898005815132609*^9}, {
   3.898005846885694*^9, 3.898005850949874*^9}, {3.898005952234393*^9, 
   3.898005957723152*^9}, {3.8980062199665003`*^9, 3.8980063109680634`*^9}, {
   3.8980063541370564`*^9, 3.898006371716193*^9}, {3.898006417412902*^9, 
   3.898006603032065*^9}, {3.898006665959569*^9, 3.898006679213697*^9}, {
   3.898007459153199*^9, 3.8980075048782043`*^9}, {3.898007563280622*^9, 
   3.898007574911483*^9}, {3.8980077547087593`*^9, 3.898007817721479*^9}, {
   3.8980079420517273`*^9, 3.8980079596179457`*^9}, {3.898008004411182*^9, 
   3.8980080278772917`*^9}, {3.8980082339373007`*^9, 3.898008285821925*^9}, {
   3.898008371448017*^9, 3.898008375031755*^9}, {3.898008520515832*^9, 
   3.898008589902328*^9}, {3.898008709100143*^9, 3.898008714923852*^9}, {
   3.898008909241468*^9, 3.8980089971090527`*^9}, {3.898009171997808*^9, 
   3.8980092028862963`*^9}, {3.898009271548568*^9, 3.898009413031266*^9}, {
   3.89800948140593*^9, 3.898009496302651*^9}, {3.89800953833856*^9, 
   3.898009618716962*^9}, {3.8980096671217613`*^9, 3.898009671641968*^9}, {
   3.8980097040595627`*^9, 3.89800971016008*^9}, {3.8980097420838842`*^9, 
   3.8980097742475433`*^9}, {3.898009848357615*^9, 3.8980098995912857`*^9}, {
   3.8980099448933*^9, 3.8980099459963818`*^9}, {3.8980100296530533`*^9, 
   3.898010062336186*^9}, {3.898010094076388*^9, 3.89801029314275*^9}, {
   3.8980103329457417`*^9, 3.8980104179534273`*^9}, {3.898010490229669*^9, 
   3.898010500998513*^9}, {3.898011464664083*^9, 3.8980115652195807`*^9}, {
   3.8980116173302526`*^9, 3.898011812477846*^9}, {3.898011845788451*^9, 
   3.8980118497624693`*^9}, {3.898011882370985*^9, 3.898011882724444*^9}, {
   3.8980119305586367`*^9, 3.8980119668396606`*^9}, {3.898012013398677*^9, 
   3.898012059620626*^9}, {3.898012100383863*^9, 3.898012140096208*^9}, {
   3.8980121802296257`*^9, 3.89801218503432*^9}, {3.89801221856602*^9, 
   3.898012239363776*^9}, {3.898012274836359*^9, 3.898012315752548*^9}, {
   3.898012355537528*^9, 3.898012374561964*^9}, {3.8981110021215754`*^9, 
   3.898111002837775*^9}, 3.8981282232582397`*^9, {3.8981712952732887`*^9, 
   3.8981713308103333`*^9}, {3.8981805500766907`*^9, 3.898180552191012*^9}, {
   3.898180886105091*^9, 3.898180887554678*^9}, {3.898181032563292*^9, 
   3.898181042836294*^9}, 3.898181669677806*^9, 3.898181742661229*^9, 
   3.8981817819227333`*^9},ExpressionUUID->"8c2f5922-14c4-4cf8-be6c-\
faa37d285a96"],

Cell["\<\
Once we have produced an answer, we can evaluate the answer and judge whether \
it produced the desired result.\
\>", "Text",
 CellChangeTimes->{{3.898181790095796*^9, 
  3.898181826361133*^9}},ExpressionUUID->"4cfdfcc2-14f1-4560-94b4-\
f9842c025905"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "evaluateAnswerPrompt", " ", "=", " ", 
   "\"\<Given a task and an answer, give a judgement (sure/impossible) if the \
answer is correct, i.e. the line of code provided in the answer, when \
evaluated will give the result specified in the task.\nTask: Find the \
second-to-last digit of 2^32.\nAnswer: (2^32 // IntegerDigits // \
Reverse)[[2]]\nJudge: \nsure\nTask: Find the second-to-last digit of 2^32.\n\
Answer: (2^32 // IntegerDigits // Reverse)[[1]]\nJudge: \nimpossible\nTask: \
Make a graph with 50 nodes, in which node i connects to node i+1.\nAnswer: \
Graph[Table[i -> i + 1, {i, 49}]]\nJudge:\nsure\nTask: Make a graph with 50 \
nodes, in which node i connects to node i+1.\nAnswer: Graph[Table[i -> i + 1, \
{i, 50}]]\nJudge:\nimpossible\nTask: Make a combined list of the first 5 \
squares and cubes (numbers raised to the power 3), sorted into order.\n\
Answer: Sort[Join[Range[5]^2,Range[5]^3]]\nJudge:\nsure\nTask: Make a \
combined list of the first 5 squares and cubes (numbers raised to the power \
3), sorted into order.\nAnswer: Sort[Table[i^2, {i, 5}], Table[i^3, {i, 5}]]\n\
Judge:\nimpossible\nTask: `input`\nAnswer: `answer`\nJudge:\n\>\""}], 
  "\[IndentingNewLine]", "\n"}]], "Input",
 CellChangeTimes->{{3.897923964020966*^9, 3.8979240510740128`*^9}, {
   3.897996501297477*^9, 3.897996502483651*^9}, {3.897996560865672*^9, 
   3.897996566565255*^9}, {3.897996635931363*^9, 3.897996638980068*^9}, {
   3.897997340426928*^9, 3.897997350483665*^9}, {3.897997405556315*^9, 
   3.897997409341189*^9}, {3.898004225522018*^9, 3.898004230561695*^9}, {
   3.8980042783432903`*^9, 3.8980042918602743`*^9}, {3.898004353253541*^9, 
   3.8980044124116573`*^9}, 3.898004443457323*^9, {3.898005247961893*^9, 
   3.8980052550220747`*^9}, 3.8980053207004538`*^9, {3.898005745372463*^9, 
   3.898005775786207*^9}, {3.898005813677647*^9, 3.898005815132609*^9}, {
   3.898005846885694*^9, 3.898005850949874*^9}, {3.898005952234393*^9, 
   3.898005957723152*^9}, {3.8980062199665003`*^9, 3.8980063109680634`*^9}, {
   3.8980063541370564`*^9, 3.898006371716193*^9}, {3.898006417412902*^9, 
   3.898006603032065*^9}, {3.898006665959569*^9, 3.898006679213697*^9}, {
   3.898007459153199*^9, 3.8980075048782043`*^9}, {3.898007563280622*^9, 
   3.898007574911483*^9}, {3.8980077547087593`*^9, 3.898007817721479*^9}, {
   3.8980079420517273`*^9, 3.8980079596179457`*^9}, {3.898008004411182*^9, 
   3.8980080278772917`*^9}, {3.8980082339373007`*^9, 3.898008285821925*^9}, {
   3.898008371448017*^9, 3.898008375031755*^9}, {3.898008520515832*^9, 
   3.898008589902328*^9}, {3.898008709100143*^9, 3.898008714923852*^9}, {
   3.898008909241468*^9, 3.8980089971090527`*^9}, {3.898009171997808*^9, 
   3.8980092028862963`*^9}, {3.898009271548568*^9, 3.898009413031266*^9}, {
   3.89800948140593*^9, 3.898009496302651*^9}, {3.89800953833856*^9, 
   3.898009618716962*^9}, {3.8980096671217613`*^9, 3.898009671641968*^9}, {
   3.8980097040595627`*^9, 3.89800971016008*^9}, {3.8980097420838842`*^9, 
   3.8980097742475433`*^9}, {3.898009848357615*^9, 3.8980098995912857`*^9}, {
   3.8980099448933*^9, 3.8980099459963818`*^9}, {3.8980100296530533`*^9, 
   3.898010062336186*^9}, {3.898010094076388*^9, 3.89801029314275*^9}, {
   3.8980103329457417`*^9, 3.8980104179534273`*^9}, {3.898010490229669*^9, 
   3.898010500998513*^9}, {3.898011464664083*^9, 3.8980115652195807`*^9}, {
   3.8980116173302526`*^9, 3.898011812477846*^9}, {3.898011845788451*^9, 
   3.8980118497624693`*^9}, {3.898011882370985*^9, 3.898011882724444*^9}, {
   3.8980119305586367`*^9, 3.8980119668396606`*^9}, {3.898012013398677*^9, 
   3.898012059620626*^9}, {3.898012100383863*^9, 3.898012140096208*^9}, {
   3.8980121802296257`*^9, 3.89801218503432*^9}, {3.89801221856602*^9, 
   3.898012239363776*^9}, {3.898012274836359*^9, 3.898012315752548*^9}, {
   3.898012355537528*^9, 3.898012374561964*^9}, {3.8981110021215754`*^9, 
   3.898111002837775*^9}, 3.8981282232582397`*^9, {3.8981712952732887`*^9, 
   3.8981713308103333`*^9}, {3.8981805500766907`*^9, 3.898180552191012*^9}, {
   3.898180886105091*^9, 3.898180887554678*^9}, {3.898181032563292*^9, 
   3.898181042836294*^9}, 3.898181669677806*^9, 3.898181742661229*^9, 
   3.8981817819227333`*^9},ExpressionUUID->"95522b8d-9279-45b4-9057-\
99786edd86f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusion", "Section",
 CellChangeTimes->{{3.898128241543476*^9, 3.898128244279627*^9}, {
  3.898182247648609*^9, 
  3.898182248265298*^9}},ExpressionUUID->"6ccfd318-e65e-4bf4-bd6b-\
e76c657af96c"],

Cell["\<\
We investigated the use of the Tree of Thoughts framework to extend language \
models\[CloseCurlyQuote] problem solving ability for difficult problems that \
require exploring a diversity of intermediate thoughts. We used the newly \
introduced LLMFunction capability in Wolfram Language to reproduce the ToT \
algorithm for the Game of 24. We visualized the results of exploring and \
evaluating proposals for intermediate steps in this game. We produce and \
visualize a solution to the game by exploring the Tree of Thoughts. Finally \
we begin to explore extending this framework to solving coding challenges, \
providing prompts that could be used toward this end.\
\>", "Text",
 CellChangeTimes->{{3.898182252686949*^9, 3.898182477809567*^9}, {
  3.8981825205396013`*^9, 
  3.8981825958443403`*^9}},ExpressionUUID->"5ea9049e-9607-41fe-b9a5-\
256eccafb2a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Acknowledgment", "Section",
 CellChangeTimes->{{3.898181901737294*^9, 
  3.898181918224023*^9}},ExpressionUUID->"11ba11a1-f3ce-4fb1-84b7-\
f86894fd4aed"],

Cell["\<\
I\[CloseCurlyQuote]d like to thank Jofre Espigule, my project mentor, for his \
extensive support and mentorship and helpful ideas throughout the course of \
my project. Thanks also to Steven Wolfram, Mads, Xerxes, Yi, Danielle, \
Stephanie and all the other mentors and TAs that made Wolfram Summer School \
2023 possible.\
\>", "Text",
 CellChangeTimes->{{3.898181928274317*^9, 3.898181968679083*^9}, {
  3.898182041728387*^9, 3.898182101123323*^9}, {3.898182170165689*^9, 
  3.898182238727755*^9}, {3.8981881833534727`*^9, 3.898188203743582*^9}, {
  3.898188655418824*^9, 
  3.898188657495248*^9}},ExpressionUUID->"96e5b889-9a95-42c7-bb43-\
75a4ae15b6f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",
 CellChangeTimes->{{3.898110998189679*^9, 
  3.898111000373991*^9}},ExpressionUUID->"5b9c9186-b220-4d66-abe5-\
5e5eca71744e"],

Cell["\<\
Tree of Thoughts: Deliberate Problem Solving with Large Language Models - \
https://arxiv.org/abs/2305.10601\
\>", "ItemNumbered",
 CellChangeTimes->{{3.898111084514639*^9, 3.898111088343787*^9}, {
  3.898111217290008*^9, 
  3.898111238626234*^9}},ExpressionUUID->"7678ed98-d11b-4b59-98bc-\
e134441eb28b"],

Cell["\<\
Chain-of-Thought Prompting Elicits Reasoning in Large Language Models - \
https://arxiv.org/abs/2201.11903\
\>", "ItemNumbered",
 CellChangeTimes->{{3.898111084514639*^9, 3.898111105972838*^9}, 
   3.898111194089982*^9, {3.898111332889427*^9, 3.898111332891592*^9}, {
   3.8981118625376053`*^9, 
   3.898111870333172*^9}},ExpressionUUID->"d21c92f4-4769-4ee1-866a-\
107c61484574"],

Cell["\<\
The New World of LLM Functions: Integrating LLM Technology into the Wolfram \
Language  - \
https://writings.stephenwolfram.com/2023/05/the-new-world-of-llm-functions-\
integrating-llm-technology-into-the-wolfram-language/\
\>", "ItemNumbered",
 CellChangeTimes->{{3.898111084514639*^9, 3.898111105972838*^9}, 
   3.898111194089982*^9, {3.898111332889427*^9, 3.898111332891592*^9}, {
   3.898116563095736*^9, 
   3.8981166027198477`*^9}},ExpressionUUID->"f7dc59b1-9876-49cc-bf00-\
0d66101b0673"],

Cell["\<\
An Elementary Introduction to the Wolfram Language - \
https://www.wolfram.com/language/elementary-introduction/3rd-ed/\
\>", "ItemNumbered",
 CellChangeTimes->{{3.898111084514639*^9, 3.898111105972838*^9}, 
   3.898111194089982*^9, {3.898111332889427*^9, 3.898111332891592*^9}, {
   3.898180973875125*^9, 
   3.898180992613706*^9}},ExpressionUUID->"3b27ee7a-e2e4-4801-9392-\
46796527d747"],

Cell["\<\
Progressive-Hint Prompting Improves Reasoning in Large Language Models - \
https://arxiv.org/abs/2304.09797\
\>", "ItemNumbered",
 CellChangeTimes->{{3.898111084514639*^9, 3.898111105972838*^9}, 
   3.898111194089982*^9, {3.898111332889427*^9, 
   3.898111332891592*^9}},ExpressionUUID->"bbc21954-2693-4032-8be1-\
0a5665f276e1"],

Cell["\<\
Language Models as Zero-Shot Planners: Extracting Actionable Knowledge for \
Embodied Agents - https://arxiv.org/abs/2201.07207\
\>", "ItemNumbered",
 CellChangeTimes->{{3.898111084514639*^9, 3.898111105972838*^9}, 
   3.898111194089982*^9, {3.898111333364408*^9, 3.898111345903925*^9}, {
   3.8981114168271723`*^9, 
   3.898111416829645*^9}},ExpressionUUID->"e68b363d-b377-46a0-9b5f-\
5fc13ccee7a4"],

Cell["\<\
Inner Monologue: Embodied Reasoning through Planning with Language Models - \
https://arxiv.org/abs/2207.05608\
\>", "ItemNumbered",
 CellChangeTimes->{{3.898111084514639*^9, 3.898111105972838*^9}, 
   3.898111194089982*^9, {3.898111333364408*^9, 3.898111345903925*^9}, {
   3.898111417158288*^9, 
   3.898111424633131*^9}},ExpressionUUID->"89cfa329-f01f-4484-bf81-\
9631488d507e"],

Cell["\<\
OpenAI GPT-4 Technical Report - https://arxiv.org/abs/2303.08774\
\>", "ItemNumbered",
 CellChangeTimes->{{3.898111084514639*^9, 3.898111105972838*^9}, 
   3.898111194089982*^9, {3.898111333364408*^9, 3.898111345903925*^9}, {
   3.898111417158288*^9, 3.898111424028845*^9}, {3.8981116348026743`*^9, 
   3.898111647108144*^9}},ExpressionUUID->"fc796dd2-4ac2-40ec-8d90-\
4c47785084c6"],

Cell["\<\
Reflexion: Language Agents with Verbal Reinforcement Learning - \
https://arxiv.org/abs/2303.11366\
\>", "ItemNumbered",
 CellChangeTimes->{{3.898111084514639*^9, 3.898111105972838*^9}, 
   3.898111194089982*^9, {3.898111333364408*^9, 3.898111345903925*^9}, {
   3.898111417158288*^9, 3.898111424028845*^9}, {3.8981116348026743`*^9, 
   3.898111646603323*^9}, {3.898111698350122*^9, 
   3.898111714207839*^9}},ExpressionUUID->"11de69cd-f35e-40be-afeb-\
dc113e8070f8"],

Cell["\<\
S.A. Sloman. The empirical case for two systems of reasoning. Psychological \
bulletin, 119(1): 3,1996.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.898111084514639*^9, 3.898111105972838*^9}, 
   3.898111194089982*^9, {3.898111333364408*^9, 3.898111345903925*^9}, {
   3.898111417158288*^9, 3.898111424028845*^9}, {3.8981116348026743`*^9, 
   3.898111646603323*^9}, {3.898111698350122*^9, 3.898111711754559*^9}, {
   3.898111743137965*^9, 
   3.898111765293942*^9}},ExpressionUUID->"800c82b2-79b1-45a1-b28c-\
a2e0307dc32b"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{20, Automatic}, {Automatic, 44}},
PrivateNotebookOptions->{"CloudPublishPath"->"/Published/TreeOfThoughts.nb"},
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (June 8, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"586f0e43-7085-4d95-bcea-ea1ceb756ac0"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 346, 5, 98, "Title",ExpressionUUID->"d2a0f2ea-1afa-47bb-af64-05cfebfe254e"],
Cell[929, 29, 243829, 4129, 601, "Input",ExpressionUUID->"e0d9a510-518d-4771-a3de-e4286fba0685"],
Cell[244761, 4160, 359, 7, 35, "Text",ExpressionUUID->"b372ee7e-37c5-42f6-8454-98ec1efa959f"],
Cell[245123, 4169, 1538, 23, 150, "Text",ExpressionUUID->"3b449413-76a4-4c62-b1af-465532cd5fe1"],
Cell[CellGroupData[{
Cell[246686, 4196, 186, 4, 67, "Section",ExpressionUUID->"d6fb392b-fae2-418b-b368-71aa47fc5320",
 InitializationCell->True],
Cell[246875, 4202, 479, 8, 68, "Input",ExpressionUUID->"1dd6b514-7818-433f-851a-016838632c3b",
 InitializationCell->True],
Cell[247357, 4212, 656, 11, 46, "Input",ExpressionUUID->"39565d8c-70d4-45ec-8b6f-75338386bdb4",
 InitializationCell->True],
Cell[248016, 4225, 475, 13, 46, "Input",ExpressionUUID->"e842301c-4f4f-4b0f-91d9-3b872b2704af",
 InitializationCell->True],
Cell[248494, 4240, 864, 21, 110, "Input",ExpressionUUID->"dde0731e-99f6-4607-b945-733887b8f13f",
 InitializationCell->True],
Cell[249361, 4263, 1079, 30, 152, "Input",ExpressionUUID->"98846ad4-b404-4be0-b20f-cc2c8033faac",
 InitializationCell->True],
Cell[250443, 4295, 2635, 64, 362, "Input",ExpressionUUID->"e9b2900c-e2c6-46aa-9768-9de7d1796048",
 InitializationCell->True],
Cell[253081, 4361, 2690, 61, 362, "Input",ExpressionUUID->"41f29cb8-dca4-486b-8055-82c2aaafabb9",
 InitializationCell->True],
Cell[255774, 4424, 2101, 52, 320, "Input",ExpressionUUID->"9fafce5f-b42f-4ac6-aa2d-d91147aaa556",
 InitializationCell->True],
Cell[257878, 4478, 427, 11, 46, "Input",ExpressionUUID->"bb8307c2-5f43-475e-843d-8a88937c704e",
 InitializationCell->True],
Cell[258308, 4491, 749, 17, 278, "Input",ExpressionUUID->"a4909f45-f544-4fca-a8c1-b165de3c90e1",
 InitializationCell->True],
Cell[259060, 4510, 1083, 19, 845, "Input",ExpressionUUID->"92d667f8-524d-4c2f-8c18-f2b91c02ca30",
 InitializationCell->True],
Cell[260146, 4531, 1236, 21, 824, "Input",ExpressionUUID->"bff2ad84-93b1-42fa-beaf-58ea253e4597",
 InitializationCell->True],
Cell[261385, 4554, 1066, 19, 677, "Input",ExpressionUUID->"fbbdf475-2c54-479f-bc6c-7a0ace885571",
 InitializationCell->True],
Cell[262454, 4575, 1072, 31, 110, "Input",ExpressionUUID->"15c12391-85bb-4960-86df-d9291a4e1fe0",
 InitializationCell->True],
Cell[263529, 4608, 4450, 116, 367, "Input",ExpressionUUID->"75f36b5d-377b-4dc3-bf01-c78619d143e6"],
Cell[267982, 4726, 11720, 327, 913, "Input",ExpressionUUID->"41f930f2-08cf-41e3-9cde-aca7998c5fee"]
}, Closed]],
Cell[CellGroupData[{
Cell[279739, 5058, 238, 4, 53, "Section",ExpressionUUID->"53efa0f1-a0d6-49c5-8965-f0c3d63ecb4c"],
Cell[279980, 5064, 6868, 168, 598, "Input",ExpressionUUID->"a5b6272c-85cc-4927-a4cd-75a08632c9bb"]
}, Closed]],
Cell[CellGroupData[{
Cell[286885, 5237, 210, 4, 53, "Section",ExpressionUUID->"f13e90d7-e38d-451a-935f-0f4e5a74a24b"],
Cell[287098, 5243, 2572, 41, 495, "Text",ExpressionUUID->"9380df0e-fc25-42b2-a159-7562aa1f26ab"],
Cell[CellGroupData[{
Cell[289695, 5288, 223, 5, 45, "Subsubsection",ExpressionUUID->"23854f4e-64c2-4afd-9462-0a2338fd330c"],
Cell[289921, 5295, 994, 18, 220, "Input",ExpressionUUID->"8b7a3c5d-518c-4642-aab7-549b5903683f"],
Cell[CellGroupData[{
Cell[290940, 5317, 342, 8, 30, "Input",ExpressionUUID->"7bc893f3-4b34-4a0f-8768-e00720c81e0d"],
Cell[291285, 5327, 507, 8, 140, "Output",ExpressionUUID->"8a718770-2404-4c2e-af04-f8d1a22d1e95"]
}, Open  ]],
Cell[291807, 5338, 853, 15, 81, "Text",ExpressionUUID->"0425907d-1f3f-4b7a-b091-c40ecf1d6375"],
Cell[292663, 5355, 1341, 22, 766, "Input",ExpressionUUID->"5b1901f4-f211-428c-a9b7-2d4561e13515"],
Cell[CellGroupData[{
Cell[294029, 5381, 344, 8, 30, "Input",ExpressionUUID->"82a68dbf-5b42-4d73-bc5a-11f2aed57abe"],
Cell[294376, 5391, 303, 5, 119, "Output",ExpressionUUID->"160ac1b7-6700-41a3-81b3-25623bd02260"]
}, Open  ]],
Cell[294694, 5399, 398, 9, 58, "Text",ExpressionUUID->"630d7c6e-8b28-4033-b83f-b06b24873f19"],
Cell[CellGroupData[{
Cell[295117, 5412, 486, 10, 30, "Input",ExpressionUUID->"e4378cf0-68e5-4e32-b231-c0ebf7621934"],
Cell[295606, 5424, 407, 7, 140, "Output",ExpressionUUID->"b727089d-de93-4560-8547-b01a76a503ff"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[296074, 5438, 441, 8, 67, "Section",ExpressionUUID->"846c7dbf-d144-4ef8-8bbe-969b9fcb6715"],
Cell[296518, 5448, 656, 11, 81, "Text",ExpressionUUID->"a6d0bffa-1c22-4a52-a22c-e05259031d18"],
Cell[297177, 5461, 1035, 20, 262, "Input",ExpressionUUID->"9c002a8d-e329-4de6-8e88-772c2275a6b9"],
Cell[298215, 5483, 267, 6, 35, "Text",ExpressionUUID->"f56b52b6-e2e4-4913-b3da-e1a666866aca"],
Cell[CellGroupData[{
Cell[298507, 5493, 1455, 25, 52, "Input",ExpressionUUID->"acd70c0f-ec1d-49d9-b604-e06247517b5b"],
Cell[299965, 5520, 706, 15, 70, "Output",ExpressionUUID->"0621dc07-962d-43e3-b19e-f115a379a58b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[300708, 5540, 1093, 23, 30, "Input",ExpressionUUID->"437cfec0-629c-4794-9731-12beb457e6da"],
Cell[301804, 5565, 10119, 258, 463, "Output",ExpressionUUID->"714356aa-061d-4f1c-8bec-5b15d0189887"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[311972, 5829, 267, 5, 67, "Section",ExpressionUUID->"af9e26d2-7da4-4f21-b907-bea0d4036846"],
Cell[312242, 5836, 1136, 18, 104, "Text",ExpressionUUID->"30eba37d-3f60-44ad-8eba-811b5b933ea1"],
Cell[313381, 5856, 1151, 20, 829, "Input",ExpressionUUID->"6ec1c96f-6ec4-471f-b24f-2ec09bebf8ce"],
Cell[314535, 5878, 249, 6, 35, "Text",ExpressionUUID->"8589745c-434d-486a-8a28-1603d1165258"],
Cell[CellGroupData[{
Cell[314809, 5888, 274, 4, 54, "Subsection",ExpressionUUID->"99731bd8-51a7-486f-b241-bc261d23098f"],
Cell[315086, 5894, 474, 12, 30, "Input",ExpressionUUID->"b6bd5179-e97d-4416-a1d8-75cc8efec3df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[315597, 5911, 164, 3, 54, "Subsection",ExpressionUUID->"a0269a78-6bdb-49c0-a2d4-e12189257f88"],
Cell[CellGroupData[{
Cell[315786, 5918, 630, 15, 52, "Input",ExpressionUUID->"f0556489-c104-40ec-ab19-0141d475b799"],
Cell[316419, 5935, 321, 5, 98, "Output",ExpressionUUID->"2f6613e0-a444-4935-986d-a790c1130522"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[316789, 5946, 253, 4, 54, "Subsection",ExpressionUUID->"12d78a68-a90e-4dfd-8a33-242880becb2a"],
Cell[317045, 5952, 397, 8, 35, "Text",ExpressionUUID->"9131c2fc-e80e-47df-b7bd-4d9d3e2576b3"],
Cell[317445, 5962, 837, 20, 94, "Input",ExpressionUUID->"1c1a2466-9433-446d-a22a-ccef090da36c"],
Cell[CellGroupData[{
Cell[318307, 5986, 262, 5, 30, "Input",ExpressionUUID->"8c9530ec-aafd-4163-a27c-f596b5cf881d"],
Cell[318572, 5993, 175, 3, 34, "Output",ExpressionUUID->"3fd5d94f-0c43-44d6-a454-280711a6e16d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[318784, 6001, 184, 3, 30, "Input",ExpressionUUID->"1db08861-7675-4723-b078-0ddcb35198a2"],
Cell[318971, 6006, 591, 13, 56, "Output",ExpressionUUID->"e3b845b1-2d42-40e3-b6b6-c40d33662c41"]
}, Open  ]],
Cell[319577, 6022, 262, 6, 35, "Text",ExpressionUUID->"6c3a2de0-a6cb-415a-a9bc-992588e12c37"],
Cell[CellGroupData[{
Cell[319864, 6032, 415, 8, 30, "Input",ExpressionUUID->"e1f4bbd7-a365-44f2-a67c-d7a3a68e9b29"],
Cell[320282, 6042, 360, 8, 34, "Output",ExpressionUUID->"e3637042-b72b-4c4b-9c1a-64a7581fd9d7"]
}, Open  ]],
Cell[320657, 6053, 247, 6, 35, "Text",ExpressionUUID->"ae995d44-5b98-400a-835f-c49342b46804"],
Cell[CellGroupData[{
Cell[320929, 6063, 2274, 54, 115, "Input",ExpressionUUID->"ac44531d-030e-4266-be4b-288a763474d5"],
Cell[323206, 6119, 21345, 553, 858, "Output",ExpressionUUID->"30f1211d-3424-4d62-98c8-97bbde12681a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[344588, 6677, 1651, 45, 73, "Input",ExpressionUUID->"32216bd5-c41b-43f1-ba99-ce90a1ea9078"],
Cell[346242, 6724, 10412, 280, 405, "Output",ExpressionUUID->"584e5b94-0dc8-40ab-8d27-2b38e6063318"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[356715, 7011, 188, 3, 67, "Section",ExpressionUUID->"a514769b-8770-4e07-9686-586bda1ab307"],
Cell[356906, 7016, 354, 7, 58, "Text",ExpressionUUID->"cfe230de-ea05-4bef-95e6-18df8e50c2bd"],
Cell[CellGroupData[{
Cell[357285, 7027, 1224, 34, 115, "Input",ExpressionUUID->"a900d0e2-e699-4955-8a67-3102afa871f5"],
Cell[358512, 7063, 431, 9, 34, "Output",ExpressionUUID->"8d6143df-d7d8-4f00-a89d-32b0bf4ef0a5"]
}, Open  ]],
Cell[358958, 7075, 825, 23, 30, "Input",ExpressionUUID->"8c0fb3db-8c3a-48ae-85d3-e15738d3bddf"],
Cell[359786, 7100, 286, 4, 35, "Text",ExpressionUUID->"e126348e-6785-45b2-84f0-7c9aa20cf36d"],
Cell[CellGroupData[{
Cell[360097, 7108, 982, 24, 52, "Input",ExpressionUUID->"62e8adbe-dcd9-4965-be92-fbeb48666895"],
Cell[361082, 7134, 6721, 178, 443, "Output",ExpressionUUID->"932cac29-ba55-425b-91db-661958632530"]
}, Open  ]],
Cell[367818, 7315, 447, 12, 30, "Input",ExpressionUUID->"b5e82884-5c2e-470a-b924-a5ebce2a215d"],
Cell[368268, 7329, 1398, 37, 73, "Input",ExpressionUUID->"0bd21ad5-6267-444b-b528-d3b5d4a92f3c"],
Cell[369669, 7368, 200, 3, 35, "Text",ExpressionUUID->"110fbf81-8e86-4da6-be90-d81d280e6962"],
Cell[CellGroupData[{
Cell[369894, 7375, 1047, 24, 30, "Input",ExpressionUUID->"54f31c28-27fd-4581-8921-461dbdeb8fc6"],
Cell[370944, 7401, 12698, 321, 575, "Output",ExpressionUUID->"90204d12-e7e5-4a9a-87da-5ec05d397010"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[383691, 7728, 174, 3, 67, "Section",ExpressionUUID->"fa49728b-35a0-4432-90ed-9ce529732c65"],
Cell[383868, 7733, 565, 10, 58, "Text",ExpressionUUID->"360a9bb6-9849-49b6-8991-14af7314a6eb"],
Cell[384436, 7745, 1330, 22, 808, "Input",ExpressionUUID->"674f4134-0169-4434-b00f-5f0f7214db01"],
Cell[CellGroupData[{
Cell[385791, 7771, 659, 17, 136, "Input",ExpressionUUID->"7f1efc86-1a63-4b24-a9c2-5b0349cd2cba"],
Cell[386453, 7790, 188, 3, 34, "Output",ExpressionUUID->"f9a06eed-4cd9-49ee-ba6b-d73538e80ef4"]
}, Open  ]],
Cell[386656, 7796, 286, 6, 35, "Text",ExpressionUUID->"2d9ddbd3-432c-4a10-9e71-65987330ec5d"],
Cell[386945, 7804, 1061, 18, 661, "Input",ExpressionUUID->"8ffc00e0-ea1f-45cf-b7f0-e6bac2d7ff43"],
Cell[CellGroupData[{
Cell[388031, 7826, 413, 9, 30, "Input",ExpressionUUID->"f67930ed-64d8-4acb-97b0-a57cb4725591"],
Cell[388447, 7837, 186, 3, 34, "Output",ExpressionUUID->"b0d935fd-89cb-4892-9fcf-961d17fe4b98"]
}, Open  ]],
Cell[388648, 7843, 246, 4, 35, "Text",ExpressionUUID->"17569676-ebe5-45ac-98bf-deb1fd462e4b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[388931, 7852, 312, 5, 67, "Section",ExpressionUUID->"46de83a8-d0ed-4fc4-a6f2-bafff4bab37a"],
Cell[389246, 7859, 264, 6, 35, "Text",ExpressionUUID->"a6ad3f51-e6df-4a59-8dbe-94e017a25e15"],
Cell[389513, 7867, 5512, 105, 325, "Input",ExpressionUUID->"6d81ddf6-0cdb-419a-8ce0-024a61196f1e"],
Cell[CellGroupData[{
Cell[395050, 7976, 636, 10, 30, "Input",ExpressionUUID->"a61e1207-7ded-4551-9fba-b523c3e19225"],
Cell[395689, 7988, 884, 16, 455, "Output",ExpressionUUID->"aab2f1b4-4bdb-48dc-865b-8892b65818a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[396610, 8009, 895, 18, 30, "Input",ExpressionUUID->"f02872d9-4d33-4cfb-b58b-e5a6a69f24fb"],
Cell[397508, 8029, 17775, 429, 657, "Output",ExpressionUUID->"a0cc148a-75e3-47fc-ae9c-39ba33f7c0a1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[415332, 8464, 268, 4, 67, "Section",ExpressionUUID->"3df9e38c-c880-4cd6-bfdd-0629bb0ada92"],
Cell[415603, 8470, 730, 13, 104, "Text",ExpressionUUID->"b18b39be-92c0-47e7-b254-2dabe980c905"],
Cell[416336, 8485, 3957, 67, 115, "Input",ExpressionUUID->"26031e5a-df31-4008-b40d-bce70837dee1"],
Cell[420296, 8554, 421, 8, 58, "Text",ExpressionUUID->"941b4dd5-17c8-412c-a4fe-899c9a4fd4ff"],
Cell[420720, 8564, 569, 13, 73, "Input",ExpressionUUID->"488f5472-28a1-427a-9f7c-77d4c0a64726"],
Cell[CellGroupData[{
Cell[421314, 8581, 381, 9, 30, "Input",ExpressionUUID->"e82fb32f-c5f3-406c-9325-d8accabfddf3"],
Cell[421698, 8592, 1395, 19, 574, "Output",ExpressionUUID->"d1b133d5-8965-4553-9d42-1d0421c7bf0e"]
}, Open  ]],
Cell[423108, 8614, 647, 12, 127, "Text",ExpressionUUID->"532425c3-6ce0-4b97-baa3-841321a92b47"],
Cell[423758, 8628, 5750, 81, 682, "Input",ExpressionUUID->"d26b54dc-5456-48dc-9098-d6c3c033eb56"],
Cell[429511, 8711, 383, 8, 58, "Text",ExpressionUUID->"ad2ee832-28d1-46e2-be00-8e2361799545"],
Cell[429897, 8721, 7370, 99, 1060, "Input",ExpressionUUID->"ae682326-ecd9-4c2c-924a-5b1698c01f88"],
Cell[437270, 8822, 286, 6, 35, "Text",ExpressionUUID->"ea76f9a8-ea8b-455b-80e0-79652572e1d6"],
Cell[437559, 8830, 7830, 107, 1102, "Input",ExpressionUUID->"8c2f5922-14c4-4cf8-be6c-faa37d285a96"],
Cell[445392, 8939, 261, 6, 35, "Text",ExpressionUUID->"4cfdfcc2-14f1-4560-94b4-f9842c025905"],
Cell[445656, 8947, 4309, 61, 703, "Input",ExpressionUUID->"95522b8d-9279-45b4-9057-99786edd86f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[450002, 9013, 204, 4, 67, "Section",ExpressionUUID->"6ccfd318-e65e-4bf4-bd6b-e76c657af96c"],
Cell[450209, 9019, 872, 14, 104, "Text",ExpressionUUID->"5ea9049e-9607-41fe-b9a5-256eccafb2a3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[451118, 9038, 159, 3, 67, "Section",ExpressionUUID->"11ba11a1-f3ce-4fb1-84b7-f86894fd4aed"],
Cell[451280, 9043, 668, 12, 58, "Text",ExpressionUUID->"96e5b889-9a95-42c7-bb43-75a4ae15b6f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[451985, 9060, 155, 3, 67, "Section",ExpressionUUID->"5b9c9186-b220-4d66-abe5-5e5eca71744e"],
Cell[452143, 9065, 315, 7, 32, "ItemNumbered",ExpressionUUID->"7678ed98-d11b-4b59-98bc-e134441eb28b"],
Cell[452461, 9074, 389, 8, 32, "ItemNumbered",ExpressionUUID->"d21c92f4-4769-4ee1-866a-107c61484574"],
Cell[452853, 9084, 505, 10, 53, "ItemNumbered",ExpressionUUID->"f7dc59b1-9876-49cc-bf00-0d66101b0673"],
Cell[453361, 9096, 400, 8, 32, "ItemNumbered",ExpressionUUID->"3b27ee7a-e2e4-4801-9392-46796527d747"],
Cell[453764, 9106, 338, 7, 32, "ItemNumbered",ExpressionUUID->"bbc21954-2693-4032-8be1-0a5665f276e1"],
Cell[454105, 9115, 410, 8, 32, "ItemNumbered",ExpressionUUID->"e68b363d-b377-46a0-9b5f-5fc13ccee7a4"],
Cell[454518, 9125, 391, 8, 32, "ItemNumbered",ExpressionUUID->"89cfa329-f01f-4484-bf81-9631488d507e"],
Cell[454912, 9135, 393, 7, 32, "ItemNumbered",ExpressionUUID->"fc796dd2-4ac2-40ec-8d90-4c47785084c6"],
Cell[455308, 9144, 477, 9, 32, "ItemNumbered",ExpressionUUID->"11de69cd-f35e-40be-afeb-dc113e8070f8"],
Cell[455788, 9155, 532, 10, 32, "ItemNumbered",ExpressionUUID->"800c82b2-79b1-45a1-b28c-a2e0307dc32b"]
}, Open  ]]
}, Open  ]]
}
]
*)

